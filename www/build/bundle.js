webpackJsonp([0],[
/* 0 */,
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_waud_js__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_waud_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_waud_js__);
/* unused harmony export AudioManager */

var AudioManager = (function () {
    function AudioManager() {
        var _this = this;
        this._sounds = {};
        this._autoPlaySounds = [];
        this._muted = false;
        __WEBPACK_IMPORTED_MODULE_0_waud_js__["Waud"].init();
        __WEBPACK_IMPORTED_MODULE_0_waud_js__["Waud"].enableTouchUnlock(function () { return _this.onTouchUnlocked(); });
        __WEBPACK_IMPORTED_MODULE_0_waud_js__["Waud"].autoMute();
    }
    AudioManager.prototype.onTouchUnlocked = function () {
        var _this = this;
        this._autoPlaySounds.forEach(function (sound) {
            var theSound = _this._sounds[sound];
            if (!theSound.isPlaying()) {
                theSound.play();
            }
        });
    };
    Object.defineProperty(AudioManager.prototype, "volume", {
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_0_waud_js__["Waud"].getVolume();
        },
        set: function (v) {
            __WEBPACK_IMPORTED_MODULE_0_waud_js__["Waud"].setVolume(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AudioManager.prototype, "mute", {
        get: function () {
            return this._mute;
        },
        set: function (v) {
            this._mute = v;
            __WEBPACK_IMPORTED_MODULE_0_waud_js__["Waud"].mute(v);
        },
        enumerable: true,
        configurable: true
    });
    AudioManager.prototype.pause = function (sound) {
        if (!sound) {
            __WEBPACK_IMPORTED_MODULE_0_waud_js__["Waud"].pause();
        }
        else {
            var theSound = this._sounds[sound];
            if (theSound) {
                theSound.pause();
            }
        }
    };
    AudioManager.prototype.stop = function (sound) {
        if (!sound) {
            __WEBPACK_IMPORTED_MODULE_0_waud_js__["Waud"].stop();
        }
        else {
            var theSound = this._sounds[sound];
            if (theSound) {
                theSound.stop();
            }
        }
    };
    AudioManager.prototype.play = function (sound, at) {
        if (at === void 0) { at = 0; }
        var theSound = this._sounds[sound];
        if (theSound) {
            theSound.setTime(at);
            theSound.play();
        }
    };
    AudioManager.prototype.isPlaying = function (sound) {
        var theSound = this._sounds[sound];
        if (theSound) {
            return theSound.isPlaying();
        }
        else {
            return false;
        }
    };
    AudioManager.prototype.isReady = function (sound) {
        var theSound = this._sounds[sound];
        if (theSound) {
            return theSound.isReady();
        }
        else {
            return false;
        }
    };
    AudioManager.prototype.add = function (_a) {
        var _b = _a === void 0 ? {} : _a, name = _b.name, url = _b.url, _c = _b.autoplay, autoplay = _c === void 0 ? false : _c, _d = _b.loop, loop = _d === void 0 ? false : _d, _e = _b.volume, volume = _e === void 0 ? 1.0 : _e;
        var sound = new __WEBPACK_IMPORTED_MODULE_0_waud_js__["WaudSound"](url, {
            autoplay: autoplay,
            loop: loop,
            volume: volume
        });
        if (this._sounds[name]) {
            if (this._sounds[name].isPlaying()) {
                this._sounds[name].stop();
            }
        }
        this._sounds[name] = sound;
        if (autoplay) {
            this._autoPlaySounds.push(name);
        }
        return sound;
    };
    return AudioManager;
}());

var audioManager = new AudioManager();
/* harmony default export */ __webpack_exports__["a"] = (audioManager);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXVkaW9NYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQXVkaW9NYW5hZ2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRTFDO0lBQ0k7UUFBQSxpQkFRQztRQVBHLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBRXBCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGVBQWUsRUFBRSxFQUF0QixDQUFzQixDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxzQ0FBZSxHQUFmO1FBQUEsaUJBT0M7UUFORyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7WUFDOUIsSUFBSSxRQUFRLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsc0JBQUksZ0NBQU07YUFHVjtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDNUIsQ0FBQzthQUxELFVBQVcsQ0FBQztZQUNSLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsQ0FBQzs7O09BQUE7SUFLRCxzQkFBSSw4QkFBSTthQUlSO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdEIsQ0FBQzthQU5ELFVBQVMsQ0FBQztZQUNOLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQixDQUFDOzs7T0FBQTtJQUtELDRCQUFLLEdBQUwsVUFBTSxLQUFLO1FBQ1AsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1QsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDWCxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDckIsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBRUQsMkJBQUksR0FBSixVQUFLLEtBQUs7UUFDTixFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDVCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDaEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNYLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFFRCwyQkFBSSxHQUFKLFVBQUssS0FBSyxFQUFFLEVBQU07UUFBTixtQkFBQSxFQUFBLE1BQU07UUFDZCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDWCxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3JCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixDQUFDO0lBQ0wsQ0FBQztJQUVELGdDQUFTLEdBQVQsVUFBVSxLQUFLO1FBQ1gsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ1gsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNoQyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUM7SUFDTCxDQUFDO0lBRUQsOEJBQU8sR0FBUCxVQUFRLEtBQUs7UUFDVCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDWCxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzlCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQztJQUNMLENBQUM7SUFFRCwwQkFBRyxHQUFILFVBQUksRUFBZ0U7WUFBaEUsNEJBQWdFLEVBQTlELGNBQUksRUFBRSxZQUFHLEVBQUUsZ0JBQWdCLEVBQWhCLHFDQUFnQixFQUFFLFlBQVksRUFBWixpQ0FBWSxFQUFFLGNBQVksRUFBWixpQ0FBWTtRQUN6RCxJQUFJLEtBQUssR0FBRyxJQUFJLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDM0IsUUFBUSxVQUFBO1lBQ1IsSUFBSSxNQUFBO1lBQ0osTUFBTSxRQUFBO1NBQ1QsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDOUIsQ0FBQztRQUNMLENBQUM7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUMzQixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ1gsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVMLG1CQUFDO0FBQUQsQ0FBQyxBQXJHRCxJQXFHQzs7QUFFRCxJQUFJLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3RDLGVBQWUsWUFBWSxDQUFDIn0=

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var Controller = (function () {
    function Controller() {
        this._initialized = false;
    }
    Controller.prototype.init = function (owner) {
        if (!this._initialized) {
            this._owner = owner;
            this._initialized = true;
            return true;
        }
        return false;
    };
    return Controller;
}());
/* harmony default export */ __webpack_exports__["a"] = (Controller);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7SUFDSTtRQUNJLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFFRCx5QkFBSSxHQUFKLFVBQUssS0FBSztRQUNOLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7WUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBQ0wsaUJBQUM7QUFBRCxDQUFDLEFBYkQsSUFhQyJ9

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*
 * }     arrow to the right
 * {     arrow to the left
 * !     warning (exclamation point)
 * X     really big warning!
 * #     This is going to hurt. Jump it!
 * ^     Auto Jump
 * +     Terrain rises
 * -     Terrain lowers
 * >     Auto speed up
 * <     Auto slow down
 * _     stick-in-the-mud (really slow)
 * ready READY
*/
var ACTION = {
    NONE: 0,
    JUMP: 10,
    SPEED_UP: 20,
    SLOW_DOWN: 30,
    REALLY_SLOW: 31,
    DIE: 99,
};
var flags = {
    "#": {
        action: ACTION.DIE,
        colors: [0xff0000, 0xe00000],
        name: "die!",
        texture: [
            "________",
            "_X____X_",
            "__X__X__",
            "___XX___",
            "___XX___",
            "__X__X__",
            "_X____X_",
            "________",
        ],
    },
    "X": {
        action: ACTION.NONE,
        colors: [0xC04000, 0xB03000],
        name: "look out!",
        texture: [
            "________",
            "___XX___",
            "___XX___",
            "___XX___",
            "___XX___",
            "________",
            "___XX___",
            "________",
        ],
    },
    "!": {
        action: ACTION.NONE,
        colors: [0xC0C000, 0xB0B000],
        name: "warning",
        texture: [
            "________",
            "___XX___",
            "___XX___",
            "___XX___",
            "___XX___",
            "________",
            "___XX___",
            "________",
        ],
    },
    "^": {
        action: ACTION.JUMP,
        colors: [0x8000ff, 0x7000e0],
        name: "jump",
        texture: [
            "________",
            "_XXXXXX_",
            "________",
            "_XXXXXX_",
            "________",
            "_XXXXXX_",
            "________",
            "_XXXXXX_",
        ],
    },
    ">": {
        action: ACTION.SPEED_UP,
        colors: [0x80ff00, 0x70e000],
        name: "speed up",
        texture: [
            "________",
            "___XX___",
            "__X__X__",
            "_X____X_",
            "___XX___",
            "__X__X__",
            "_X____X_",
            "________",
        ],
    },
    "<": {
        action: ACTION.SLOW_DOWN,
        colors: [0x808040, 0x707038],
        name: "slow down",
        texture: [
            "________",
            "________",
            "________",
            "________",
            "_X____X_",
            "__X__X__",
            "___XX___",
            "________",
        ],
    },
    _: {
        action: ACTION.REALLY_SLOW,
        colors: [0xaa7849, 0x8a5839],
        name: "quicksand",
        texture: [
            "________",
            "_X____X_",
            "__X__X__",
            "___XX___",
            "_X____X_",
            "__X__X__",
            "___XX___",
            "________",
        ],
    },
    "{": {
        action: ACTION.NONE,
        colors: null,
        name: "arrow left",
        texture: [
            "________",
            "_XXXXXX_",
            "_XX_____",
            "_X_X____",
            "_X__X___",
            "_X___X__",
            "_X____X_",
            "________",
        ],
    },
    "}": {
        action: ACTION.NONE,
        colors: null,
        name: "arrow right",
        texture: [
            "________",
            "_XXXXXX_",
            "_____XX_",
            "____X_X_",
            "___X__X_",
            "__X___X_",
            "_X____X_",
            "________",
        ],
    },
    "+": {
        action: ACTION.NONE,
        colors: null,
        name: "terrain up",
        texture: [
            "___XX___",
            "__XXXX__",
            "_XXXXXX_",
            "___XX___",
            "___XX___",
            "________",
            "_XXXXXX_",
            "________",
        ],
    },
    "-": {
        action: ACTION.NONE,
        colors: null,
        name: "cliff",
        texture: [
            "_XXXXXX_",
            "________",
            "___XX___",
            "___XX___",
            "_XXXXXX_",
            "__XXXX__",
            "___XX___",
            "________",
        ],
    },
    r: {
        action: ACTION.NONE,
        colors: null,
        name: "R",
        texture: [
            "________",
            "_XXXXX__",
            "_XX__XX_",
            "_XXXXX__",
            "_XX__XX_",
            "_XX__XX_",
            "_XX__XX_",
            "________",
        ],
    },
    e: {
        action: ACTION.NONE,
        colors: null,
        name: "E",
        texture: [
            "________",
            "_XXXXXX_",
            "_XX_____",
            "_XXXX___",
            "_XX_____",
            "_XX_____",
            "_XXXXXX_",
            "________",
        ],
    },
    a: {
        action: ACTION.NONE,
        colors: null,
        name: "A",
        texture: [
            "________",
            "__XXXX__",
            "_XX__XX_",
            "_XXXXXX_",
            "_XX__XX_",
            "_XX__XX_",
            "_XX__XX_",
            "________",
        ],
    },
    d: {
        action: ACTION.NONE,
        colors: null,
        name: "D",
        texture: [
            "________",
            "_XXXXX__",
            "_XX__XX_",
            "_XX__XX_",
            "_XX__XX_",
            "_XX__XX_",
            "_XXXXX__",
            "________",
        ],
    },
    y: {
        action: ACTION.NONE,
        colors: null,
        name: "Y",
        texture: [
            "________",
            "_XX__XX_",
            "_XX__XX_",
            "__XXXX__",
            "___XX___",
            "___XX___",
            "___XX___",
            "________",
        ],
    },
    " ": {
        action: ACTION.NONE,
        colors: null,
        name: "blank",
        texture: [
            "________",
            "________",
            "________",
            "________",
            "________",
            "________",
            "________",
            "________",
        ],
    },
};
/* harmony default export */ __webpack_exports__["a"] = ({
    ACTION: ACTION,
    flags: flags,
    getFlag: function (flag) {
        if (flags[flag] === undefined) {
            return flags[" "];
        }
        else {
            return flags[flag];
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmbGFncy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztFQWFFO0FBRUYsSUFBTSxNQUFNLEdBQUc7SUFDWCxJQUFJLEVBQUUsQ0FBQztJQUNQLElBQUksRUFBRSxFQUFFO0lBQ1IsUUFBUSxFQUFFLEVBQUU7SUFDWixTQUFTLEVBQUUsRUFBRTtJQUNiLFdBQVcsRUFBRSxFQUFFO0lBQ2YsR0FBRyxFQUFFLEVBQUU7Q0FDVixDQUFDO0FBRUYsSUFBSSxLQUFLLEdBQUc7SUFDUixHQUFHLEVBQUU7UUFDRCxNQUFNLEVBQUUsTUFBTSxDQUFDLEdBQUc7UUFDbEIsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztRQUM1QixJQUFJLEVBQUUsTUFBTTtRQUNaLE9BQU8sRUFBRTtZQUNMLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1NBQ2I7S0FDSjtJQUNELEdBQUcsRUFBRTtRQUNELE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSTtRQUNuQixNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1FBQzVCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE9BQU8sRUFBRTtZQUNMLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1NBQ2I7S0FDSjtJQUNELEdBQUcsRUFBRTtRQUNELE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSTtRQUNuQixNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1FBQzVCLElBQUksRUFBRSxTQUFTO1FBQ2YsT0FBTyxFQUFFO1lBQ0wsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7U0FDYjtLQUNKO0lBQ0QsR0FBRyxFQUFFO1FBQ0QsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1FBQ25CLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7UUFDNUIsSUFBSSxFQUFFLE1BQU07UUFDWixPQUFPLEVBQUU7WUFDTCxVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtTQUNiO0tBQ0o7SUFDRCxHQUFHLEVBQUU7UUFDRCxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVE7UUFDdkIsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztRQUM1QixJQUFJLEVBQUUsVUFBVTtRQUNoQixPQUFPLEVBQUU7WUFDTCxVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtTQUNiO0tBQ0o7SUFDRCxHQUFHLEVBQUU7UUFDRCxNQUFNLEVBQUUsTUFBTSxDQUFDLFNBQVM7UUFDeEIsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztRQUM1QixJQUFJLEVBQUUsV0FBVztRQUNqQixPQUFPLEVBQUU7WUFDTCxVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtTQUNiO0tBQ0o7SUFDRCxDQUFDLEVBQUU7UUFDQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFdBQVc7UUFDMUIsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztRQUM1QixJQUFJLEVBQUUsV0FBVztRQUNqQixPQUFPLEVBQUU7WUFDTCxVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtTQUNiO0tBQ0o7SUFDRCxHQUFHLEVBQUU7UUFDRCxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUk7UUFDbkIsTUFBTSxFQUFFLElBQUk7UUFDWixJQUFJLEVBQUUsWUFBWTtRQUNsQixPQUFPLEVBQUU7WUFDTCxVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtTQUNiO0tBQ0o7SUFDRCxHQUFHLEVBQUU7UUFDRCxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUk7UUFDbkIsTUFBTSxFQUFFLElBQUk7UUFDWixJQUFJLEVBQUUsYUFBYTtRQUNuQixPQUFPLEVBQUU7WUFDTCxVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtTQUNiO0tBQ0o7SUFDRCxHQUFHLEVBQUU7UUFDRCxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUk7UUFDbkIsTUFBTSxFQUFFLElBQUk7UUFDWixJQUFJLEVBQUUsWUFBWTtRQUNsQixPQUFPLEVBQUU7WUFDTCxVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtTQUNiO0tBQ0o7SUFDRCxHQUFHLEVBQUU7UUFDRCxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUk7UUFDbkIsTUFBTSxFQUFFLElBQUk7UUFDWixJQUFJLEVBQUUsT0FBTztRQUNiLE9BQU8sRUFBRTtZQUNMLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1NBQ2I7S0FDSjtJQUNELENBQUMsRUFBRTtRQUNDLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSTtRQUNuQixNQUFNLEVBQUUsSUFBSTtRQUNaLElBQUksRUFBRSxHQUFHO1FBQ1QsT0FBTyxFQUFFO1lBQ0wsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7U0FDYjtLQUNKO0lBQ0QsQ0FBQyxFQUFFO1FBQ0MsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1FBQ25CLE1BQU0sRUFBRSxJQUFJO1FBQ1osSUFBSSxFQUFFLEdBQUc7UUFDVCxPQUFPLEVBQUU7WUFDTCxVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtTQUNiO0tBQ0o7SUFDRCxDQUFDLEVBQUU7UUFDQyxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUk7UUFDbkIsTUFBTSxFQUFFLElBQUk7UUFDWixJQUFJLEVBQUUsR0FBRztRQUNULE9BQU8sRUFBRTtZQUNMLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1NBQ2I7S0FDSjtJQUNELENBQUMsRUFBRTtRQUNDLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSTtRQUNuQixNQUFNLEVBQUUsSUFBSTtRQUNaLElBQUksRUFBRSxHQUFHO1FBQ1QsT0FBTyxFQUFFO1lBQ0wsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7U0FDYjtLQUNKO0lBQ0QsQ0FBQyxFQUFFO1FBQ0MsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1FBQ25CLE1BQU0sRUFBRSxJQUFJO1FBQ1osSUFBSSxFQUFFLEdBQUc7UUFDVCxPQUFPLEVBQUU7WUFDTCxVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtTQUNiO0tBQ0o7SUFDRCxHQUFHLEVBQUU7UUFDRCxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUk7UUFDbkIsTUFBTSxFQUFFLElBQUk7UUFDWixJQUFJLEVBQUUsT0FBTztRQUNiLE9BQU8sRUFBRTtZQUNMLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1lBQ1YsVUFBVTtZQUNWLFVBQVU7WUFDVixVQUFVO1NBQ2I7S0FDSjtDQUNKLENBQUM7QUFFRixlQUFlO0lBQ1gsTUFBTSxRQUFBO0lBQ04sS0FBSyxPQUFBO0lBQ0wsT0FBTyxZQUFDLElBQUk7UUFDUixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkIsQ0FBQztJQUNMLENBQUM7Q0FDSixDQUFBIn0=

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var SVG_NS = "http://www.w3.org/2000/svg", XLINK_NS = "http://www.w3.org/1999/xlink";
/* harmony default export */ __webpack_exports__["a"] = ({
    clamp: function (v, min, max) {
        if (v < min) {
            return min;
        }
        if (v > max) {
            return max;
        }
        return v;
    },
    fmt2: function (n) {
        return Math.round(n * 100) / 100;
    },
    sign: function (v) {
        return v < 0 ? -1 : 1;
    },
    format: function (n, width, decimals) {
        if (width === void 0) { width = 10; }
        if (decimals === void 0) { decimals = 2; }
        if (typeof n !== "number") {
            if (typeof n === "string") {
                return n.padStart(width);
            }
            return n;
        }
        var num = n;
        var int = Math.floor(num);
        var fraction = (num - int).toFixed(decimals);
        return (int.toString() + "." + fraction.toString().substr(2).padEnd(decimals, "0")).padStart(width);
    },
    svgEl: function (icon) {
        var svgWrapper = document.createElementNS(SVG_NS, "svg");
        var svgIconEl = document.createElementNS(SVG_NS, "use");
        svgIconEl.setAttributeNS(XLINK_NS, "xlink:href", "#" + icon);
        svgWrapper.appendChild(svgIconEl);
        return svgWrapper;
    },
    buttonFromTarget: function (target, limit) {
        if (limit === void 0) { limit = 5; }
        var btn = target, numTries = 0;
        while (!(btn instanceof HTMLButtonElement) && btn && (numTries++ < limit)) {
            btn = btn.parentElement;
        }
        return (btn instanceof HTMLButtonElement) ? btn : null;
    },
    simpleProperCase: function (str) {
        return str ? str[0].toUpperCase() + str.substr(1) : "";
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTSxNQUFNLEdBQUcsNEJBQTRCLEVBQ3JDLFFBQVEsR0FBRyw4QkFBOEIsQ0FBQztBQUVoRCxlQUFlO0lBQ1gsS0FBSyxZQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRztRQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ1YsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUNmLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNWLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDZixDQUFDO1FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNiLENBQUM7SUFDRCxJQUFJLFlBQUMsQ0FBQztRQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDckMsQ0FBQztJQUNELElBQUksWUFBQyxDQUFDO1FBQ0YsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFDRCxNQUFNLFlBQUMsQ0FBQyxFQUFFLEtBQVUsRUFBRSxRQUFZO1FBQXhCLHNCQUFBLEVBQUEsVUFBVTtRQUFFLHlCQUFBLEVBQUEsWUFBWTtRQUM5QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdCLENBQUM7WUFDRCxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2IsQ0FBQztRQUVELElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNaLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTdDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXhHLENBQUM7SUFDRCxLQUFLLFlBQUMsSUFBSTtRQUNOLElBQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pELElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hELFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFJLElBQU0sQ0FBQyxDQUFDO1FBQzdELFVBQVUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLFVBQVUsQ0FBQztJQUN0QixDQUFDO0lBQ0QsZ0JBQWdCLFlBQUMsTUFBTSxFQUFFLEtBQVM7UUFBVCxzQkFBQSxFQUFBLFNBQVM7UUFDOUIsSUFBSSxHQUFHLEdBQUcsTUFBTSxFQUNaLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDakIsT0FBTyxDQUFDLENBQUMsR0FBRyxZQUFZLGlCQUFpQixDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN4RSxHQUFHLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztRQUM1QixDQUFDO1FBQ0QsTUFBTSxDQUFDLENBQUMsR0FBRyxZQUFZLGlCQUFpQixDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztJQUMzRCxDQUFDO0lBQ0QsZ0JBQWdCLFlBQUMsR0FBRztRQUNoQixNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMzRCxDQUFDO0NBQ0osQ0FBQSJ9

/***/ }),
/* 5 */,
/* 6 */,
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var Delta = (function () {
    function Delta(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.t, t = _c === void 0 ? -1 : _c, _d = _b.maxAcceptableDelta, maxAcceptableDelta = _d === void 0 ? 67 : _d;
        this._t = t;
        this.maxAcceptableDelta = maxAcceptableDelta;
        this.log = false;
        this._logGroup = undefined;
    }
    Object.defineProperty(Delta.prototype, "logGroup", {
        set: function (g) {
            this._logGroup = g;
            if (typeof this.log === "number") {
                console.groupEnd();
                if (g) {
                    console.group(g);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Delta.prototype.reset = function () {
        this._t = -1;
    };
    Delta.prototype.update = function (t) {
        if (t === void 0) { t = 0; }
        var delta = t - this._t;
        if (this._t < 0) {
            delta = 0;
        }
        this._t = t;
        if (delta < 0) {
            delta = 0;
        }
        if (typeof this.log === "number" && delta > this.log && this._logGroup) {
            console.log(performance.now() + ": " + delta);
        }
        if (delta > this.maxAcceptableDelta) {
            delta = this.maxAcceptableDelta;
        }
        return delta;
    };
    return Delta;
}());
/* harmony default export */ __webpack_exports__["a"] = (Delta);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVsdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEZWx0YS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGVBQVksRUFBd0M7WUFBeEMsNEJBQXdDLEVBQXRDLFNBQU0sRUFBTiwyQkFBTSxFQUFFLDBCQUF1QixFQUF2Qiw0Q0FBdUI7UUFDekMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7UUFDakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDL0IsQ0FBQztJQUNELHNCQUFJLDJCQUFRO2FBQVosVUFBYSxDQUFDO1lBQ1YsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFDbkIsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDbkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDSixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQixDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUM7OztPQUFBO0lBQ0QscUJBQUssR0FBTDtRQUNJLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDakIsQ0FBQztJQUNELHNCQUFNLEdBQU4sVUFBTyxDQUFLO1FBQUwsa0JBQUEsRUFBQSxLQUFLO1FBQ1IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDeEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNaLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1osS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxHQUFHLEtBQUssUUFBUSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3JFLE9BQU8sQ0FBQyxHQUFHLENBQUksV0FBVyxDQUFDLEdBQUcsRUFBRSxVQUFLLEtBQU8sQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztZQUNsQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDO1FBQ3BDLENBQUM7UUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFDTCxZQUFDO0FBQUQsQ0FBQyxBQXZDRCxJQXVDQyJ9

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_three_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__flags_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__textures_js__ = __webpack_require__(24);



var MAX_STEPS = 256;
var HALF_MAX_STEPS = 128;
var FLOOR = 1;
var CEILING = 2;
function _createMaterial(_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.multi, multi = _c === void 0 ? false : _c, _d = _b.withTexture, withTexture = _d === void 0 ? true : _d, color = _b.color, _e = _b.visible, visible = _e === void 0 ? true : _e;
    var material;
    if (multi) {
        material = ["right", "left", "top", "bottom", "back", "front"].map(function (side) {
            return _createMaterial({
                color: color,
                visible: visible,
                withTexture: side === "top" || side,
            });
        });
        //material.needsUpdate = false;
    }
    else {
        material = new __WEBPACK_IMPORTED_MODULE_0_three_js__["MeshLambertMaterial"]({
            color: color,
            emissive: withTexture ? new __WEBPACK_IMPORTED_MODULE_0_three_js__["Color"](0xFFFFFF) : new __WEBPACK_IMPORTED_MODULE_0_three_js__["Color"](0x000000),
            emissiveMap: withTexture ? __WEBPACK_IMPORTED_MODULE_2__textures_js__["a" /* default */][" "] : null,
            wireframe: false
        });
        material.visible = visible;
        material.needsUpdate = false;
    }
    return material;
}
function _setVisibility(material, visibility) {
    if (material instanceof Array) {
        var materials = material;
        for (var i = 5; i >= 0; i--) {
            var faceVisible = (visibility & (1 << i)) > 0;
            materials[i].visible = faceVisible;
        }
    }
    else {
        material.visible = Boolean(visibility);
    }
}
function _setTexture(material, flag) {
    if (material instanceof Array) {
        _setTexture(material[2], flag);
    }
    else {
        material.emissiveMap = __WEBPACK_IMPORTED_MODULE_2__textures_js__["a" /* default */][flag];
    }
}
function _setColor(material, color) {
    if (material instanceof Array) {
        var materials = material;
        for (var i = 5; i >= 0; i--) {
            materials[i].color.set(color);
        }
    }
    else {
        material.color.set(color);
    }
}
var Level = (function () {
    function Level(level, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.blockSize, blockSize = _c === void 0 ? 200 : _c, _d = _b.stepSize, stepSize = _d === void 0 ? 25 : _d, _e = _b.drawDistance, drawDistance = _e === void 0 ? 15 : _e, _f = _b.colors, colors = _f === void 0 ? [0xFF8020, 0x8020FF] : _f, _g = _b.initialSpeed, initialSpeed = _g === void 0 ? 25 : _g;
        this.blockSize = blockSize;
        this.stepSize = stepSize;
        this.drawDistance = drawDistance;
        this._initialSpeed = initialSpeed;
        this.level = this._parseLevel(level);
        this.curRow = 0;
        this.maxVisibleRow = drawDistance - 1;
        this.colors = colors;
        this._floor = [];
        this._ceiling = [];
        this._speeds = [];
        this._initBoxArray();
    }
    Level.prototype._initBoxArray = function () {
        var _this = this;
        var blockSize = this.blockSize, stepSize = this.stepSize, drawDistance = this.drawDistance, level = this.level, _floor = this._floor, _ceiling = this._ceiling;
        var box = new __WEBPACK_IMPORTED_MODULE_0_three_js__["BoxBufferGeometry"](blockSize, MAX_STEPS * stepSize, blockSize, 1, 1, 1);
        var _loop_1 = function (z) {
            [_floor, _ceiling].forEach(function (arr) {
                arr.push(level.height[0].map(function (_, idx) {
                    var material = _createMaterial({
                        color: _this.colors[(z + idx) % _this.colors.length],
                        withTexture: true,
                        multi: true
                    });
                    var mesh = new __WEBPACK_IMPORTED_MODULE_0_three_js__["Mesh"](box, material);
                    return mesh;
                }));
            });
        };
        for (var z = 0; z < drawDistance; z++) {
            _loop_1(z);
        }
    };
    Level.prototype._parseLevel = function (level, len) {
        if (len === void 0) { len = 0; }
        var parsedLevel = {
            _curSpeed: this._initialSpeed,
            flags: [],
            height: [],
            speeds: [],
        };
        for (var i = 0; i < level.length; i++) {
            var r = level[i];
            if (r instanceof Array) {
                var rpt = r[1];
                if (r[2]) {
                    parsedLevel._curSpeed = r[2];
                }
                r = this._parseLevel([r[0]], parsedLevel.height.length);
                for (var i_1 = 0; i_1 < rpt; i_1++) {
                    parsedLevel.height.push(r.height[0]);
                    parsedLevel.flags.push(r.flags[0]);
                    parsedLevel.speeds.push(parsedLevel._curSpeed);
                }
            }
            else {
                r = r.split(/(...)/).filter(function (i) { return i !== ""; });
                parsedLevel.height.push(r.map(function (c, idx) {
                    c = c.substr(0, 2);
                    var algs = {
                        "rr": Math.random() * 256,
                        "ss": 256 * Math.sin((len + idx) * (Math.PI / 180)),
                        "cc": 256 * Math.cos((len + idx) * (Math.PI / 180)),
                        "sc": 256 * (Math.cos(len) * (Math.PI / 180) + Math.sin(idx) * (Math.PI / 180)),
                    };
                    return Number.isNaN(parseInt(c, 16)) ? algs[c] : parseInt(c, 16);
                }));
                parsedLevel.flags.push(r.map(function (c) { return c[2]; }));
                parsedLevel.speeds.push(parsedLevel._curSpeed);
            }
        }
        parsedLevel.length = parsedLevel.height.length;
        return parsedLevel;
    };
    Object.defineProperty(Level.prototype, "description", {
        get: function () {
            return this.level.height.map(function (r) { return r.join(" "); }).join(String.fromCharCode(10));
        },
        enumerable: true,
        configurable: true
    });
    Level.prototype.addToScene = function (scene, useShadows) {
        if (useShadows === void 0) { useShadows = false; }
        this.updateScene(0, true);
        [this._floor, this._ceiling].forEach(function (plane) { return plane.forEach(function (z) { return z.forEach(function (mesh) {
            mesh.castShadow = useShadows;
            mesh.receiveShadow = useShadows;
            scene.add(mesh);
        }); }); });
        return scene;
    };
    Level.prototype.getFaceVisibility = function (which, z, x) {
        var cur, left, right, front, topVisible = false, bottomVisible = false, leftVisible = false, rightVisible = false, frontVisible = false, otherwise = which === FLOOR ? 999999 : -999999;
        if (which === FLOOR) {
            cur = this.heightAtCoordinates(z, x);
            left = this.heightAtCoordinates(z, x - 1);
            right = this.heightAtCoordinates(z, x + 1);
            front = this.heightAtCoordinates(z - 1, x);
            topVisible = true;
        }
        else {
            cur = this.ceilingAtCoordinates(z, x);
            left = this.ceilingAtCoordinates(z, x - 1);
            right = this.ceilingAtCoordinates(z, x + 1);
            front = this.ceilingAtCoordinates(z - 1, x);
            bottomVisible = true;
        }
        cur = cur !== undefined ? cur : otherwise;
        left = left !== undefined ? left : otherwise;
        right = right !== undefined ? right : otherwise;
        front = front !== undefined ? front : otherwise;
        if (left !== cur) {
            leftVisible = true;
        }
        if (right !== cur) {
            rightVisible = true;
        }
        if (front !== cur) {
            frontVisible = true;
        }
        return ((frontVisible ? 1 : 0) << 4) |
            ((bottomVisible ? 1 : 0) << 3) |
            ((topVisible ? 1 : 0) << 2) |
            ((leftVisible ? 1 : 0) << 1) |
            ((rightVisible ? 1 : 0) << 0);
    };
    Level.prototype.updateScene = function (cameraZ, force) {
        if (force === void 0) { force = false; }
        var stepSize = this.stepSize, blockSize = this.blockSize, level = this.level, drawDistance = this.drawDistance, _floor = this._floor, _ceiling = this._ceiling;
        var curRow = Math.max(Math.floor(-(cameraZ) / blockSize), 0) - 1;
        if (curRow < 0) {
            curRow = 0;
        }
        var maxVisibleRow = curRow + drawDistance - 1;
        var delta = curRow - this.curRow;
        var colors = this.colors;
        // move floor as needed to the end of the level
        if (force || delta > 0) {
            var offsetY = HALF_MAX_STEPS * stepSize, halfHeight = HALF_MAX_STEPS * stepSize;
            for (var i = 0; i < delta; i++) {
                var row = _floor.shift();
                _floor.push(row);
                row = _ceiling.shift();
                _ceiling.push(row);
            }
            for (var z = force ? curRow : (maxVisibleRow - delta); z <= Math.min(level.length - 1, maxVisibleRow); z++) {
                var r_1 = level.height[z], flagsInRow_1 = level.flags[z];
                var offsetX = (r_1.length / 2) * blockSize - (blockSize / 2);
                for (var x = r_1.length - 1; x > -1; x--) {
                    var c = r_1[x], flag_1 = flagsInRow_1[x] || " ", floor_1 = _floor[z - curRow][x], ceiling_1 = _ceiling[z - curRow][x];
                    if (c !== undefined) {
                        var h = c * stepSize;
                        floor_1.visible = true;
                        ceiling_1.visible = false;
                        floor_1.position.set(x * blockSize - offsetX, -(halfHeight + offsetY) + h, -z * blockSize);
                        if (__WEBPACK_IMPORTED_MODULE_2__textures_js__["a" /* default */][flag_1]) {
                            _setTexture(floor_1.material, flag_1);
                        }
                        else {
                            _setTexture(floor_1.material, " ");
                        }
                        if (!Number.isNaN(parseInt(flag_1, 16)) && flag_1.toUpperCase() === flag_1) {
                            ceiling_1.position.set(x * blockSize - offsetX, h + parseInt(flag_1, 16) * blockSize, -z * blockSize);
                            ceiling_1.visible = true;
                        }
                        // determine face visibility
                        _setVisibility(floor_1.material, this.getFaceVisibility(FLOOR, z, x));
                        _setVisibility(ceiling_1.material, this.getFaceVisibility(CEILING, z, x));
                    }
                    else {
                        ceiling_1.visible = false;
                        floor_1.visible = false;
                    }
                }
            }
        }
        if (force || (delta > 0)) {
            // colors get change irrespective of adjusting visible floor
            for (var z = curRow; z <= Math.min(level.length - 1, maxVisibleRow); z++) {
                var r = level.height[z], flagsInRow = level.flags[z], dz = z - curRow;
                for (var x = r.length - 1; x > -1; x--) {
                    var floor = _floor[dz][x], ceiling = _ceiling[dz][x], flag = __WEBPACK_IMPORTED_MODULE_1__flags_js__["a" /* default */].getFlag(flagsInRow[x]), colorPicks = flag.colors ? flag.colors : colors, color = colorPicks[(z + x) % colorPicks.length];
                    if (floor.visible) {
                        _setColor(floor.material, color);
                    }
                    if (ceiling.visible) {
                        _setColor(ceiling.material, color);
                    }
                }
            }
        }
        this.curRow = curRow;
        this.maxVisibleRow = maxVisibleRow;
    };
    Level.prototype.targetSpeedAtCoordinates = function (z) {
        var r = this.level.speeds[z];
        if (r !== undefined) {
            return r;
        }
        else {
            return this._initialSpeed;
        }
    };
    Level.prototype.heightAtCoordinates = function (z, x) {
        var offsetY = HALF_MAX_STEPS * this.stepSize;
        var r = this.level.height[z];
        if (r) {
            var c = r[x];
            if (c === undefined) {
                return undefined;
            }
            var h = -offsetY + (c * this.stepSize);
            return h;
        }
        else {
            return undefined;
        }
    };
    Level.prototype.flagAtCoordinates = function (z, x) {
        var r = this.level.flags[z];
        if (r) {
            var flag = r[x];
            return __WEBPACK_IMPORTED_MODULE_1__flags_js__["a" /* default */].getFlag(flag);
        }
        else {
            return undefined;
        }
    };
    Level.prototype.ceilingAtCoordinates = function (z, x) {
        var r = this.level.height[z], flags = this.level.flags[z];
        if (r && flags) {
            var ceiling = parseInt(flags[x], 16);
            if (!Number.isNaN(ceiling) && flags[x].toUpperCase() == flags[x]) {
                var c = r[x];
                if (c === undefined) {
                    return undefined;
                }
                var h = this.heightAtCoordinates(z, x) + (ceiling * this.blockSize);
                return h;
            }
        }
        return undefined;
    };
    Level.prototype._propertyAtPosition = function (position, fn) {
        var blockSize = this.blockSize;
        var offsetX = (this.level.height[0].length / 2) * blockSize;
        return fn(Math.floor(-((position.z - 100) / blockSize)), Math.floor((position.x + offsetX) / blockSize));
    };
    Level.prototype.flagAtPosition = function (position) {
        return this._propertyAtPosition(position, this.flagAtCoordinates.bind(this));
    };
    Level.prototype.heightAtPosition = function (position) {
        return this._propertyAtPosition(position, this.heightAtCoordinates.bind(this));
    };
    Level.prototype.ceilingAtPosition = function (position) {
        return this._propertyAtPosition(position, this.ceilingAtCoordinates.bind(this));
    };
    Level.prototype.targetSpeedAtPosition = function (position) {
        return this._propertyAtPosition(position, this.targetSpeedAtCoordinates.bind(this));
    };
    Level.createLevel = function (level, opts) {
        return new Level(level, opts);
    };
    return Level;
}());
/* harmony default export */ __webpack_exports__["a"] = (Level);
Level.MAX_STEPS = MAX_STEPS;
Level.HALF_MAX_STEPS = HALF_MAX_STEPS;
//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Controllers_ControllerCollection_js__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Game_js__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Controllers_KeyboardController_js__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Controllers_MetaController_js__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Controllers_TouchController_js__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__AudioManager_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_svg_injector__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_svg_injector___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_svg_injector__);







__WEBPACK_IMPORTED_MODULE_6_svg_injector___default()(document.querySelectorAll("img.inject-svg"));
// sounds we need from the start
__WEBPACK_IMPORTED_MODULE_5__AudioManager_js__["a" /* default */].add({ name: "bg", url: "music/roccow-welcome.mp3", autoplay: true, loop: true });
__WEBPACK_IMPORTED_MODULE_5__AudioManager_js__["a" /* default */].add({ name: "jump", url: "sfx/jump.wav", volume: 0.5 });
__WEBPACK_IMPORTED_MODULE_5__AudioManager_js__["a" /* default */].add({ name: "explode", url: "sfx/explosion.wav" });
var kbd = new __WEBPACK_IMPORTED_MODULE_2__Controllers_KeyboardController_js__["a" /* default */]();
var meta = new __WEBPACK_IMPORTED_MODULE_3__Controllers_MetaController_js__["a" /* default */]();
var touch = new __WEBPACK_IMPORTED_MODULE_4__Controllers_TouchController_js__["a" /* default */]();
var controllersToCreate = [kbd, meta];
if ("ontouchstart" in window) {
    controllersToCreate.push(touch);
}
var controllers = new __WEBPACK_IMPORTED_MODULE_0__Controllers_ControllerCollection_js__["a" /* default */](controllersToCreate);
var game = new __WEBPACK_IMPORTED_MODULE_1__Game_js__["a" /* default */]({ controllers: controllers });
game.start();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLG9CQUFvQixNQUFNLHVDQUF1QyxDQUFDO0FBQ3pFLE9BQU8sSUFBSSxNQUFNLFdBQVcsQ0FBQztBQUM3QixPQUFPLGtCQUFrQixNQUFNLHFDQUFxQyxDQUFDO0FBQ3JFLE9BQU8sY0FBYyxNQUFNLGlDQUFpQyxDQUFDO0FBQzdELE9BQU8sZUFBZSxNQUFNLGtDQUFrQyxDQUFDO0FBRy9ELE9BQU8sWUFBWSxNQUFNLG1CQUFtQixDQUFDO0FBRTdDLE9BQU8sV0FBVyxNQUFNLGNBQWMsQ0FBQztBQUV2QyxXQUFXLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztBQUV6RCxnQ0FBZ0M7QUFDaEMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLDBCQUEwQixFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUYsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNyRSxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO0FBRWhFLElBQUksR0FBRyxHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQztBQUNuQyxJQUFJLElBQUksR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO0FBQ2hDLElBQUksS0FBSyxHQUFHLElBQUksZUFBZSxFQUFFLENBQUM7QUFFbEMsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN0QyxFQUFFLENBQUMsQ0FBQyxjQUFjLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMzQixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVELElBQUksV0FBVyxHQUFHLElBQUksb0JBQW9CLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNoRSxJQUFJLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxFQUFFLFdBQVcsYUFBQSxFQUFFLENBQUMsQ0FBQztBQUNyQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMifQ==

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var MS_IN_A_MINUTE = 60 * 1000;
var Beat = (function () {
    function Beat(_a) {
        var _b = (_a === void 0 ? {} : _a).bpm, bpm = _b === void 0 ? 120 : _b;
        this._bpm = 0;
        this._msBetweenBeats = 0;
        this._beatStartedAt = 0;
        this.beating = false;
        this.bpm = bpm;
    }
    Object.defineProperty(Beat.prototype, "bpm", {
        get: function () {
            return this._bpm;
        },
        set: function (v) {
            this._bpm = v;
            this._msBetweenBeats = v ? (MS_IN_A_MINUTE) / v : 0;
            if (this.beating) {
                this.startBeat();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Beat.prototype, "msBetweenBeats", {
        get: function () {
            return this._msBetweenBeats;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Beat.prototype, "timeSinceLastBeat", {
        get: function () {
            if (this.beating && this._msBetweenBeats > 0) {
                return (performance.now() - this._beatStartedAt) % this._msBetweenBeats;
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Beat.prototype, "normalizedTimeSinceLastBeat", {
        get: function () {
            if (this.beating && this._msBetweenBeats > 0) {
                return this.timeSinceLastBeat / this._msBetweenBeats;
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Beat.prototype, "timeForBeat", {
        get: function () {
            var now = performance.now();
            if ((now - this._beatStartedAt) > this._msBetweenBeats) {
                this._beatStartedAt = now;
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Beat.prototype.start = function () {
        this.beating = true;
        this._beatStartedAt = performance.now();
    };
    Beat.prototype.stop = function () {
        this.beating = false;
        this._beatStartedAt = 0;
    };
    return Beat;
}());
/* harmony default export */ __webpack_exports__["a"] = (Beat);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmVhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkJlYXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTSxjQUFjLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztBQUVqQztJQUNJLGNBQVksRUFBa0I7WUFBaEIsa0NBQVMsRUFBVCw4QkFBUztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBRXJCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ25CLENBQUM7SUFFRCxzQkFBSSxxQkFBRzthQUFQO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckIsQ0FBQzthQUVELFVBQVEsQ0FBQztZQUNMLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNmLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNyQixDQUFDO1FBQ0wsQ0FBQzs7O09BUkE7SUFVRCxzQkFBSSxnQ0FBYzthQUFsQjtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQ2hDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksbUNBQWlCO2FBQXJCO1lBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUM1RSxDQUFDO1lBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNiLENBQUM7OztPQUFBO0lBRUQsc0JBQUksNkNBQTJCO2FBQS9CO1lBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUN6RCxDQUFDO1lBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNiLENBQUM7OztPQUFBO0lBRUQsc0JBQUksNkJBQVc7YUFBZjtZQUNJLElBQUksR0FBRyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JELElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDO2dCQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUM7OztPQUFBO0lBRUQsb0JBQUssR0FBTDtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxjQUFjLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFRCxtQkFBSSxHQUFKO1FBQ0ksSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUlMLFdBQUM7QUFBRCxDQUFDLEFBN0RELElBNkRDIn0=

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Delta_js__ = __webpack_require__(7);

var ControllerCollection = (function () {
    function ControllerCollection(controllers) {
        if (controllers === void 0) { controllers = []; }
        this.controllers = controllers;
        this._states = [];
        this._state = {};
        this._delta = new __WEBPACK_IMPORTED_MODULE_0__Delta_js__["a" /* default */]({ t: performance.now(), maxAcceptableDelta: 1000 });
        this.timeSinceLastInput = 1000;
    }
    ControllerCollection.prototype.init = function () {
        var _this = this;
        this.controllers.forEach(function (controller) { return controller.init(_this); });
    };
    ControllerCollection.prototype.addController = function (controller) {
        controller.init(this);
        this.controllers.push(controller);
    };
    ControllerCollection.prototype.removeController = function (controller) {
        if (controller.cleanUp) {
            controller.cleanUp();
        }
        var idx = this.controllers.indexOf(controller);
        if (idx > -1) {
            this.controllers.splice(idx, 1);
        }
    };
    ControllerCollection.prototype.registerSwitch = function (name) {
        if (this._states.indexOf(name) > -1) {
            return;
        }
        this._states.push(name);
        this._state[name] = false;
    };
    ControllerCollection.prototype.stateUpdated = function () {
        this.timeSinceLastInput = this._delta.update(performance.now());
    };
    ControllerCollection.prototype.readState = function () {
        var state = this._state, states = this._states, controllers = this.controllers, someInput = false, statesLen = states.length - 1, i;
        for (i = statesLen; i > -1; i--) {
            state[states[i]] = false;
        }
        for (i = controllers.length - 1; i > -1; i--) {
            var controller = controllers[i];
            for (var l = statesLen; l > -1; l--) {
                var stateToCheck = states[l];
                if (controller[stateToCheck]) {
                    state[stateToCheck] = true;
                    someInput = true;
                }
            }
        }
        if (someInput) {
            this.stateUpdated();
        }
        return this._state;
    };
    return ControllerCollection;
}());
/* harmony default export */ __webpack_exports__["a"] = (ControllerCollection);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJvbGxlckNvbGxlY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDb250cm9sbGVyQ29sbGVjdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxhQUFhLENBQUM7QUFFaEM7SUFDSSw4QkFBWSxXQUFnQjtRQUFoQiw0QkFBQSxFQUFBLGdCQUFnQjtRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzVFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7SUFDbkMsQ0FBQztJQUVELG1DQUFJLEdBQUo7UUFBQSxpQkFFQztRQURHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUEsVUFBVSxJQUFJLE9BQUEsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsRUFBckIsQ0FBcUIsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCw0Q0FBYSxHQUFiLFVBQWMsVUFBVTtRQUNwQixVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCwrQ0FBZ0IsR0FBaEIsVUFBaUIsVUFBVTtRQUN2QixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNyQixVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDekIsQ0FBQztRQUNELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9DLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWCxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEMsQ0FBQztJQUNMLENBQUM7SUFFRCw2Q0FBYyxHQUFkLFVBQWUsSUFBSTtRQUNmLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxNQUFNLENBQUM7UUFDWCxDQUFDO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVELDJDQUFZLEdBQVo7UUFDSSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELHdDQUFTLEdBQVQ7UUFDSSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxFQUNuQixNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFDckIsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQzlCLFNBQVMsR0FBRyxLQUFLLEVBQ2pCLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDN0IsQ0FBQyxDQUFDO1FBRU4sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM5QixLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdCLENBQUM7UUFFRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDM0MsSUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDbEMsSUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMzQixLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDO29CQUMzQixTQUFTLEdBQUcsSUFBSSxDQUFDO2dCQUNyQixDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ1osSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3hCLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBQ0wsMkJBQUM7QUFBRCxDQUFDLEFBckVELElBcUVDIn0=

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Controller_js__ = __webpack_require__(2);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var directionalBitmap = {
    /*    ....ULRD */
    33: 10,
    34: 3,
    35: 5,
    36: 12,
    37: 4,
    65: 4,
    38: 8,
    87: 8,
    39: 2,
    68: 2,
    40: 1,
    83: 1,
};
var KeyboardController = (function (_super) {
    __extends(KeyboardController, _super);
    function KeyboardController() {
        var _this = _super.call(this) || this;
        _this._directions = 0;
        return _this;
    }
    KeyboardController.prototype.init = function (owner /*: ControllerCollection*/) {
        var _this = this;
        if (_super.prototype.init.call(this, owner)) {
            document.addEventListener("keydown", this._keyDownEvent = function (evt) { return _this.onKeyDown(evt); });
            document.addEventListener("keyup", this._keyUpEvent = function (evt) { return _this.onKeyUp(evt); });
            ["up", "down", "left", "right"].forEach(function (s) { return owner.registerSwitch(s); });
        }
    };
    KeyboardController.prototype.cleanUp = function () {
        document.removeEventListener("keydown", this._keyDownEvent);
        document.removeEventListener("keyup", this._keyUpEvent);
    };
    KeyboardController.prototype.onKeyDown = function (evt) {
        var key = evt.which;
        var bitmask = directionalBitmap[key] || 0x00;
        this._directions |= bitmask;
        this._updateFromBitmap();
    };
    KeyboardController.prototype.onKeyUp = function (evt) {
        var key = evt.which;
        var bitmask = directionalBitmap[key] || 0x00;
        this._directions &= (!bitmask);
        this._updateFromBitmap();
    };
    KeyboardController.prototype._updateFromBitmap = function () {
        this.up = this._directions & 8;
        this.down = this._directions & 1;
        this.left = this._directions & 4;
        this.right = this._directions & 2;
    };
    return KeyboardController;
}(__WEBPACK_IMPORTED_MODULE_0__Controller_js__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (KeyboardController);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2V5Ym9hcmRDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiS2V5Ym9hcmRDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxPQUFPLFVBQVUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QyxJQUFNLGlCQUFpQixHQUFHO0lBRXRCLGlCQUFpQjtJQUNqQixFQUFFLEVBQUUsRUFBVTtJQUNkLEVBQUUsRUFBRSxDQUFVO0lBQ2QsRUFBRSxFQUFFLENBQVU7SUFDZCxFQUFFLEVBQUUsRUFBVTtJQUNkLEVBQUUsRUFBRSxDQUFVO0lBQ2QsRUFBRSxFQUFFLENBQVU7SUFDZCxFQUFFLEVBQUUsQ0FBVTtJQUNkLEVBQUUsRUFBRSxDQUFVO0lBQ2QsRUFBRSxFQUFFLENBQVU7SUFDZCxFQUFFLEVBQUUsQ0FBVTtJQUNkLEVBQUUsRUFBRSxDQUFVO0lBQ2QsRUFBRSxFQUFFLENBQVU7Q0FDakIsQ0FBQTtBQUVEO0lBQWdELHNDQUFVO0lBQ3REO1FBQUEsWUFDSSxpQkFBTyxTQUVWO1FBREcsS0FBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7O0lBQ3pCLENBQUM7SUFFRCxpQ0FBSSxHQUFKLFVBQUssS0FBSyxDQUFBLDBCQUEwQjtRQUFwQyxpQkFNQztRQUxHLEVBQUUsQ0FBQyxDQUFDLGlCQUFNLElBQUksWUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxHQUFHLFVBQUEsR0FBRyxJQUFJLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQyxDQUFDO1lBQ3RGLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFBLEdBQUcsSUFBSSxPQUFBLEtBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQWpCLENBQWlCLENBQUMsQ0FBQztZQUNoRixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQXZCLENBQXVCLENBQUMsQ0FBQztRQUMxRSxDQUFDO0lBQ0wsQ0FBQztJQUVELG9DQUFPLEdBQVA7UUFDSSxRQUFRLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1RCxRQUFRLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsc0NBQVMsR0FBVCxVQUFVLEdBQUc7UUFDVCxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQztRQUM3QyxJQUFJLENBQUMsV0FBVyxJQUFJLE9BQU8sQ0FBQztRQUM1QixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsb0NBQU8sR0FBUCxVQUFRLEdBQUc7UUFDUCxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQztRQUM3QyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM5QixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsOENBQWlCLEdBQWpCO1FBQ0ksSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQVUsQ0FBQztRQUN4QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBVSxDQUFDO1FBQzFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFVLENBQUM7UUFDMUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQVUsQ0FBQztJQUMvQyxDQUFDO0lBRUwseUJBQUM7QUFBRCxDQUFDLEFBeENELENBQWdELFVBQVUsR0F3Q3pEIn0=

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Controller_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_js__ = __webpack_require__(4);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var PASSIVE_HANDLER = false;
var MetaController = (function (_super) {
    __extends(MetaController, _super);
    function MetaController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MetaController.prototype._createControlSurface = function () {
        var _this = this;
        var pauseButton = document.createElement("div");
        var exitButton = document.createElement("div");
        var retryButton = document.createElement("div");
        pauseButton.appendChild(__WEBPACK_IMPORTED_MODULE_1__util_js__["a" /* default */].svgEl("media-pause"));
        pauseButton.setAttribute("title", "Pause");
        exitButton.appendChild(__WEBPACK_IMPORTED_MODULE_1__util_js__["a" /* default */].svgEl("home"));
        exitButton.setAttribute("title", "Exit");
        retryButton.appendChild(__WEBPACK_IMPORTED_MODULE_1__util_js__["a" /* default */].svgEl("reload"));
        retryButton.setAttribute("title", "Retry");
        pauseButton.classList.add("pause");
        exitButton.classList.add("exit");
        retryButton.classList.add("retry");
        this._els = [];
        [pauseButton, exitButton, retryButton].forEach(function (el) {
            var handlerOpts = {
                passive: PASSIVE_HANDLER,
                capture: false
            };
            if ("ontouchstart" in window) {
                el.addEventListener("touchstart", _this, handlerOpts);
            }
            else {
                el.addEventListener("click", _this, handlerOpts);
            }
            document.body.appendChild(el);
            _this._els.push(el);
        });
    };
    MetaController.prototype.init = function (owner) {
        if (_super.prototype.init.call(this, owner)) {
            this._createControlSurface();
            ["pause", "exit", "retry"].forEach(function (s) { return owner.registerSwitch(s); });
        }
    };
    MetaController.prototype.cleanUp = function () {
        var _this = this;
        if (this._els) {
            this._els.forEach(function (el) {
                if ("ontouchstart" in window) {
                    el.removeEventListener("touchstart", _this);
                }
                else {
                    el.removeEventListener("click", _this);
                }
                document.body.removeChild(el);
            });
        }
    };
    MetaController.prototype.handleEvent = function (evt) {
        var target = evt.target;
        var button = __WEBPACK_IMPORTED_MODULE_1__util_js__["a" /* default */].buttonFromTarget(target);
        if (button) {
            this["on" + __WEBPACK_IMPORTED_MODULE_1__util_js__["a" /* default */].simpleProperCase(button.className) + "Pressed"](evt);
        }
        if (!PASSIVE_HANDLER) {
            evt.preventDefault();
        }
    };
    MetaController.prototype.onPausePressed = function (evt) {
        this.pause = !this.pause;
    };
    MetaController.prototype.onExitPressed = function (evt) {
        this.exit = true;
    };
    MetaController.prototype.onRetryPressed = function (evt) {
        this.retry = true;
    };
    return MetaController;
}(__WEBPACK_IMPORTED_MODULE_0__Controller_js__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (MetaController);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0YUNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJNZXRhQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsT0FBTyxVQUFVLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBRTlCLElBQU0sZUFBZSxHQUFHLEtBQUssQ0FBQztBQUU5QjtJQUE0QyxrQ0FBVTtJQUF0RDs7SUE4RUEsQ0FBQztJQTdFRyw4Q0FBcUIsR0FBckI7UUFBQSxpQkFpQ0M7UUFoQ0csSUFBSSxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRCxJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLElBQUksV0FBVyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFaEQsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDbkQsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFM0MsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDM0MsVUFBVSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDekMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFDN0MsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFM0MsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFFZixDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsRUFBRTtZQUM3QyxJQUFJLFdBQVcsR0FBRztnQkFDVixPQUFPLEVBQUUsZUFBZTtnQkFDeEIsT0FBTyxFQUFFLEtBQUs7YUFDakIsQ0FBQztZQUNOLEVBQUUsQ0FBQyxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixFQUFFLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLEtBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztZQUN6RCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osRUFBRSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxLQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDcEQsQ0FBQztZQUNELFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRTlCLEtBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELDZCQUFJLEdBQUosVUFBSyxLQUFLO1FBQ04sRUFBRSxDQUFDLENBQUMsaUJBQU0sSUFBSSxZQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztZQUM3QixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7SUFDTCxDQUFDO0lBRUQsZ0NBQU8sR0FBUDtRQUFBLGlCQVdDO1FBVkcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEVBQUU7Z0JBQ2hCLEVBQUUsQ0FBQyxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUMzQixFQUFFLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLEtBQUksQ0FBQyxDQUFDO2dCQUMvQyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsS0FBSSxDQUFDLENBQUM7Z0JBQzFDLENBQUM7Z0JBQ0QsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO0lBQ0wsQ0FBQztJQUVELG9DQUFXLEdBQVgsVUFBWSxHQUFHO1FBQ1gsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUN4QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0MsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNULElBQUksQ0FBQyxPQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7WUFDbkIsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3pCLENBQUM7SUFDTCxDQUFDO0lBRUQsdUNBQWMsR0FBZCxVQUFlLEdBQUc7UUFDZCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBRUQsc0NBQWEsR0FBYixVQUFjLEdBQUc7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsdUNBQWMsR0FBZCxVQUFlLEdBQUc7UUFDZCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUFDLEFBOUVELENBQTRDLFVBQVUsR0E4RXJEIn0=

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Controller_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_js__ = __webpack_require__(4);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var eventMap = {
    "touchstart": "onPress",
    "mousedown": "onPress",
    "touchend": "onRelease",
    "mouseup": "onRelease"
};
var PASSIVE_HANDLER = false;
var TouchController = (function (_super) {
    __extends(TouchController, _super);
    function TouchController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TouchController.prototype._createControlSurface = function () {
        var _this = this;
        var body = document.body, buttons = ["left", "right", "up|top", "down|bottom"], handlerOpts = {
            passive: PASSIVE_HANDLER,
            capture: false
        };
        this._els = {};
        buttons.forEach(function (button) {
            var buttonEl = document.createElement("button"), _a = button.split("|"), buttonDir = _a[0], buttonAlias = _a[1], buttonProperCase = buttonDir[0].toUpperCase() + buttonDir.substr(1);
            if (!buttonAlias) {
                buttonAlias = buttonDir;
            }
            buttonEl.appendChild(__WEBPACK_IMPORTED_MODULE_1__util_js__["a" /* default */].svgEl("chevron-" + buttonAlias));
            buttonEl.setAttribute("title", buttonProperCase);
            buttonEl.classList.add(buttonDir);
            body.appendChild(buttonEl);
            _this._els[buttonDir] = buttonEl;
        });
        if ("ontouchstart" in window) {
            body.addEventListener("touchstart", this, handlerOpts);
            body.addEventListener("touchend", this, handlerOpts);
        }
        else {
            body.addEventListener("mousedown", this, handlerOpts);
            body.addEventListener("mouseup", this, handlerOpts);
        }
    };
    TouchController.prototype.init = function (owner) {
        if (_super.prototype.init.call(this, owner)) {
            this._createControlSurface();
            ["up", "down", "left", "right"].forEach(function (s) { return owner.registerSwitch(s); });
        }
    };
    TouchController.prototype.cleanUp = function () {
        var body = document.body;
        if (this._els) {
            if ("ontouchstart" in window) {
                body.removeEventListener("touchstart", this);
                body.removeEventListener("touchend", this);
            }
            else {
                body.removeEventListener("mousedown", this);
                body.removeEventListener("mouseup", this);
            }
            this._els.forEach(function (el) {
                document.body.removeChild(el);
            });
        }
    };
    /**
     * Handle touch and mouse events
     *
     * @param {Event} evt   event
     * @return {void}
     *
     * @memberof TouchController
     */
    TouchController.prototype.handleEvent = function (evt) {
        var target = evt.target;
        var button = __WEBPACK_IMPORTED_MODULE_1__util_js__["a" /* default */].buttonFromTarget(target);
        if (button) {
            this[eventMap[evt.type]](button.className);
        }
        if (!PASSIVE_HANDLER) {
            evt.preventDefault();
        }
    };
    TouchController.prototype.onPress = function (btn) {
        this[btn] = true;
    };
    TouchController.prototype.onRelease = function (btn) {
        this[btn] = false;
    };
    return TouchController;
}(__WEBPACK_IMPORTED_MODULE_0__Controller_js__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (TouchController);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG91Y2hDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVG91Y2hDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxPQUFPLFVBQVUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLElBQUksTUFBTSxZQUFZLENBQUM7QUFFOUIsSUFBTSxRQUFRLEdBQUc7SUFDYixZQUFZLEVBQUUsU0FBUztJQUN2QixXQUFXLEVBQUUsU0FBUztJQUN0QixVQUFVLEVBQUUsV0FBVztJQUN2QixTQUFTLEVBQUUsV0FBVztDQUN6QixDQUFDO0FBRUYsSUFBTSxlQUFlLEdBQUcsS0FBSyxDQUFDO0FBRTlCO0lBQTZDLG1DQUFVO0lBQXZEOztJQWtGQSxDQUFDO0lBakZHLCtDQUFxQixHQUFyQjtRQUFBLGlCQThCQztRQTdCRyxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxFQUNwQixPQUFPLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsRUFDcEQsV0FBVyxHQUFHO1lBQ1YsT0FBTyxFQUFFLGVBQWU7WUFDeEIsT0FBTyxFQUFFLEtBQUs7U0FDakIsQ0FBQztRQUNOLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFBLE1BQU07WUFDbEIsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFDM0Msc0JBQTRDLEVBQTNDLGlCQUFTLEVBQUUsbUJBQVcsRUFDdkIsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO2dCQUNmLFdBQVcsR0FBRyxTQUFTLENBQUM7WUFDNUIsQ0FBQztZQUNELFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFXLFdBQWEsQ0FBQyxDQUFDLENBQUM7WUFDM0QsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUNqRCxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzNCLEtBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsUUFBUSxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO1FBR0gsRUFBRSxDQUFDLENBQUMsY0FBYyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDdkQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDekQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDeEQsQ0FBQztJQUNMLENBQUM7SUFFRCw4QkFBSSxHQUFKLFVBQUssS0FBSztRQUNOLEVBQUUsQ0FBQyxDQUFDLGlCQUFNLElBQUksWUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7WUFDN0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUF2QixDQUF1QixDQUFDLENBQUM7UUFDMUUsQ0FBQztJQUNMLENBQUM7SUFFRCxpQ0FBTyxHQUFQO1FBQ0ksSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUN6QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNaLEVBQUUsQ0FBQyxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUM3QyxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQy9DLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUM1QyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzlDLENBQUM7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEVBQUU7Z0JBQ2hCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztJQUNMLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gscUNBQVcsR0FBWCxVQUFZLEdBQUc7UUFDWCxJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ3hCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0MsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztZQUNuQixHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDekIsQ0FBQztJQUNMLENBQUM7SUFFRCxpQ0FBTyxHQUFQLFVBQVEsR0FBRztRQUNQLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELG1DQUFTLEdBQVQsVUFBVSxHQUFHO1FBQ1QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBQ0wsc0JBQUM7QUFBRCxDQUFDLEFBbEZELENBQTZDLFVBQVUsR0FrRnREIn0=

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Display */
var Display = (function () {
    function Display() {
        var body = document.body, el = document.createElement("div");
        el.classList.add("msg");
        body.appendChild(el);
        this._el = el;
        this.hide();
    }
    Display.prototype.show = function () {
        this._el.style.visibility = "visible";
        this._visible = true;
    };
    Display.prototype.hide = function () {
        this._el.style.visibility = "hidden";
        this._visible = false;
    };
    Object.defineProperty(Display.prototype, "visible", {
        get: function () {
            return this._visible;
        },
        enumerable: true,
        configurable: true
    });
    Display.prototype.print = function (h) {
        var p = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            p[_i - 1] = arguments[_i];
        }
        var df = document.createDocumentFragment(), el;
        if (h) {
            el = document.createElement("h1");
            el.textContent = h;
            df.appendChild(el);
        }
        if (p) {
            p.forEach(function (s) {
                var el = document.createElement("p");
                el.textContent = s;
                df.appendChild(el);
            });
        }
        this._el.innerHTML = "";
        this._el.appendChild(df);
        if (!this.visible) {
            this.show();
        }
    };
    return Display;
}());

var display = new Display();
/* harmony default export */ __webpack_exports__["a"] = (display);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlzcGxheS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkRpc3BsYXkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSTtRQUNJLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQ3BCLEVBQUUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELHNCQUFJLEdBQUo7UUFDSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxzQkFBSSxHQUFKO1FBQ0ksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztRQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBRUQsc0JBQUksNEJBQU87YUFBWDtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3pCLENBQUM7OztPQUFBO0lBRUQsdUJBQUssR0FBTCxVQUFNLENBQUM7UUFBRSxXQUFJO2FBQUosVUFBSSxFQUFKLHFCQUFJLEVBQUosSUFBSTtZQUFKLDBCQUFJOztRQUNULElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxFQUN0QyxFQUFFLENBQUM7UUFDUCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ0osRUFBRSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsRUFBRSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7WUFDbkIsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNKLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO2dCQUNQLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3JDLEVBQUUsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNoQixDQUFDO0lBQ0wsQ0FBQztJQUNMLGNBQUM7QUFBRCxDQUFDLEFBN0NELElBNkNDOztBQUVELElBQUksT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDNUIsZUFBZSxPQUFPLENBQUMifQ==

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_three_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__vendor_three_loaders_MTLLoader_js__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vendor_three_loaders_OBJLoader_js__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Beat_js__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Delta_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Level_js__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Player_js__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__levels_js__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__textVariations_js__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__Display_js__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__AudioManager_js__ = __webpack_require__(1);
/* globals rStats, threeStats, glStats */



var MTLLoader = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__vendor_three_loaders_MTLLoader_js__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0_three_js__), OBJLoader = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__vendor_three_loaders_OBJLoader_js__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0_three_js__);








var DEBUG = false;
var TARGET_FPS = 60;
var MS_PER_SECOND = 1000;
var MS_PER_FRAME = MS_PER_SECOND / TARGET_FPS;
var PHYSICS_MODE_CONSTANT = 0;
var PHYSICS_MODE_TICK = 1;
var PHYSICS_MODE_DELTA = 2;
var PHYSICS_MODE = PHYSICS_MODE_TICK;
var SLOW_FACTOR = 1;
var WAITING_REASON = {
    NOT_WAITING: 0,
    NEW_GAME: 1,
    RETRY: 10,
    PAUSED: 20,
    DEMO: 30,
    DIED: 99,
};
var PERSON_VIEW = {
    FIRST: 1,
    THIRD: 3
};
var PLAYER_PERSON_VIEW = PERSON_VIEW.THIRD;
var USE_REAL_SHADOWS = false;
var Game = (function () {
    function Game(_a) {
        var _b = _a === void 0 ? {} : _a, controllers = _b.controllers, _c = _b.initialState, initialState = _c === void 0 ? "demo" : _c;
        this.state = initialState;
        this.camera = undefined;
        this.playerCamera = undefined;
        this.scene = undefined;
        this.playerScene = undefined;
        this.starScene = undefined;
        this.renderer = undefined;
        this.beat = new __WEBPACK_IMPORTED_MODULE_3__Beat_js__["a" /* default */]();
        this.musicStartPoints = [0];
        this.paused = false;
        this.waitingForInteraction = initialState === "demo" ? WAITING_REASON.DEMO : WAITING_REASON.NEW_GAME;
        this.controllers = controllers;
        this.delta = new __WEBPACK_IMPORTED_MODULE_4__Delta_js__["a" /* default */]();
        this.delta.log = 19;
        this._physicsAccumulator = 0;
        this._stats = null;
        this._animate = this.animate.bind(this);
        this.init();
    }
    Game.prototype.init = function () {
        var _this = this;
        this.controllers.init();
        this.camera = new __WEBPACK_IMPORTED_MODULE_0_three_js__["PerspectiveCamera"](120, window.innerWidth / window.innerHeight, 1, 5000);
        this.playerCamera = new __WEBPACK_IMPORTED_MODULE_0_three_js__["PerspectiveCamera"](120, window.innerWidth / window.innerHeight, 1, 5000);
        this.renderer = new __WEBPACK_IMPORTED_MODULE_0_three_js__["WebGLRenderer"]({
            antialias: navigator.userAgent.match(/iPad|iPhone/i),
        });
        this.renderer.setFaceCulling(__WEBPACK_IMPORTED_MODULE_0_three_js__["CullFaceBack"], __WEBPACK_IMPORTED_MODULE_0_three_js__["FrontFaceDirectionCCW"]);
        this.renderer.setPixelRatio(devicePixelRatio);
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.autoClear = false;
        if (USE_REAL_SHADOWS) {
            this.renderer.shadowMap.enabled = true;
            this.renderer.shadowMap.type = __WEBPACK_IMPORTED_MODULE_0_three_js__["BasicShadowMap"];
            this.renderer.shadowMap.renderReverseSided = false;
        }
        document.body.appendChild(this.renderer.domElement);
        window.addEventListener("resize", function (evt) { return _this.onResize(evt); });
        if (DEBUG) {
            this._gStats = new glStats();
            this._tStats = new threeStats(this.renderer);
            this._stats = new rStats({
                values: {
                    frame: { caption: "Total frame time (ms)", over: 16 },
                    raf: { caption: "Time since last rAF (ms)" },
                    fps: { caption: "Framerate (FPS)", below: 50 },
                    scene: { caption: "Scene Update (ms)", over: 16 },
                    camera: { caption: "Camera Update (ms)", over: 16 },
                    update: { caption: "Controls Update (ms)", over: 16 },
                    physics: { caption: "Physics Update (ms)", over: 16 },
                    render: { caption: "WebGL Render (ms)", over: 16 }
                },
                groups: [
                    { caption: "Framerate", values: ["fps", "raf"] },
                    { caption: "Budget", values: ["frame", "camera", "update", "physics", "scene", "render"] }
                ],
                fractions: [
                    { base: "frame", steps: ["camera", "update", "physics", "scene", "render"] }
                ],
                plugins: [
                    this._gStats,
                    this._tStats
                ]
            });
        }
    };
    Game.prototype.makeScene = function () {
        var _this = this;
        this.scene = new __WEBPACK_IMPORTED_MODULE_0_three_js__["Scene"]();
        this.playerScene = new __WEBPACK_IMPORTED_MODULE_0_three_js__["Scene"]();
        this.starScene = new __WEBPACK_IMPORTED_MODULE_0_three_js__["Scene"]();
        var scene = this.scene, playerScene = this.playerScene, starScene = this.starScene, level = this.currentLevelDefinition;
        [scene, playerScene, starScene].forEach(function (scene) {
            var hLight = new __WEBPACK_IMPORTED_MODULE_0_three_js__["HemisphereLight"](0xFFFFFF, 0x000000, 1);
            scene.add(hLight);
        });
        [scene, playerScene, starScene].forEach(function (scene) {
            var aLight = new __WEBPACK_IMPORTED_MODULE_0_three_js__["AmbientLight"](0x404040);
            scene.add(aLight);
        });
        [scene, playerScene, starScene].forEach(function (theScene) {
            var dLight = new __WEBPACK_IMPORTED_MODULE_0_three_js__["DirectionalLight"](0xFFFFFF, 0.25);
            dLight.position.set(0, 10, 3);
            if (theScene === scene) {
                _this._shadowLight = dLight;
            }
            //dLight.shadow = new THREE.LightShadow(new THREE.PerspectiveCamera(50, 1, 1200, 2500));
            dLight.castShadow = theScene === scene && USE_REAL_SHADOWS;
            theScene.add(dLight);
            if (USE_REAL_SHADOWS) {
                dLight.shadow.camera.left = -50;
                dLight.shadow.camera.right = 50;
                dLight.shadow.camera.top = 50;
                dLight.shadow.camera.bottom = -50;
                dLight.shadow.bias = -0.0001;
            }
        });
        var bgColor = level.options.bgColor || 0x000000;
        [scene, playerScene, starScene].forEach(function (scene) {
            scene.fog = new __WEBPACK_IMPORTED_MODULE_0_three_js__["Fog"](bgColor, 1, _this.camera.far);
        });
        this.renderer.setClearColor(bgColor);
        // add some stars to the level?
        var lineGeometry = new __WEBPACK_IMPORTED_MODULE_0_three_js__["Geometry"]();
        for (var i = 0; i < 20000; i++) {
            var v = new __WEBPACK_IMPORTED_MODULE_0_three_js__["Vector3"]();
            v.x = (Math.random() * 20000 / 2) - 10000 / 2;
            v.y = (Math.random() * 40000 / 2) - 20000 / 2;
            v.z = -(Math.random() * (this.level.level.length * this.level.blockSize)) - 1000;
            lineGeometry.vertices.push(v);
            v = v.clone();
            v.z -= 100 + (Math.random() * 1000);
            lineGeometry.vertices.push(v);
        }
        var lineMaterial = new __WEBPACK_IMPORTED_MODULE_0_three_js__["LineBasicMaterial"]({ color: 0xFFFFFF, opacity: 0.75, linewidth: 2, transparent: true });
        var lines = new __WEBPACK_IMPORTED_MODULE_0_three_js__["LineSegments"](lineGeometry, lineMaterial);
        lines.castShadow = false;
        lines.receiveShadow = false;
        this._lines = lines;
        starScene.add(lines);
        var planeColor = level.options.planeColor || 0x800000;
        var planeGeometry = new __WEBPACK_IMPORTED_MODULE_0_three_js__["PlaneGeometry"](100000, this.level.level.length * this.level.blockSize);
        var planeMaterial = new __WEBPACK_IMPORTED_MODULE_0_three_js__["MeshLambertMaterial"]({ color: planeColor });
        var planeMesh = new __WEBPACK_IMPORTED_MODULE_0_three_js__["Mesh"](planeGeometry, planeMaterial);
        planeMesh.rotation.x = -Math.PI / 2;
        planeMesh.position.y = -(this.level.stepSize * (__WEBPACK_IMPORTED_MODULE_5__Level_js__["a" /* default */].HALF_MAX_STEPS + 8));
        planeMesh.castShadow = false;
        planeMesh.receiveShadow = USE_REAL_SHADOWS;
        this.scene.add(planeMesh);
        this.level.addToScene(scene, USE_REAL_SHADOWS);
        /*
        let playerGeometry = new THREE.SphereBufferGeometry(this.level.blockSize / 4, 64, 64),
            playerMaterial = new THREE.MeshPhongMaterial({ color: 0x6090C0, shininess: 100, transparent: true }),
            playerMesh = new THREE.Mesh(playerGeometry, playerMaterial);
        playerScene.add(playerMesh);
        this._playerMesh = playerMesh;
        */
        var model = "car-kart-blue";
        var mtlLoader = new MTLLoader();
        mtlLoader.setPath("assets/");
        mtlLoader.load(model + ".mtl", function (materials) {
            materials.preload();
            var objLoader = new OBJLoader();
            objLoader.setMaterials(materials);
            objLoader.setPath("assets/");
            objLoader.load(model + ".obj", function (obj) {
                _this._playerMesh = obj;
                obj.scale.set(_this.level.blockSize / 1, _this.level.blockSize / 1, _this.level.blockSize / 1);
                obj.castShadow = USE_REAL_SHADOWS;
                obj.receiveShadow = USE_REAL_SHADOWS;
                _this._shadowLight.target = obj;
                if (USE_REAL_SHADOWS) {
                    _this.scene.add(obj);
                }
                else {
                    playerScene.add(obj);
                }
            });
        });
        if (!USE_REAL_SHADOWS) {
            var shadowGeometry = new __WEBPACK_IMPORTED_MODULE_0_three_js__["PlaneBufferGeometry"](this.level.blockSize / 2.33, this.level.blockSize / 1.33, 1, 1), shadowMaterial = new __WEBPACK_IMPORTED_MODULE_0_three_js__["MeshBasicMaterial"]({ color: 0x000000, transparent: true, opacity: 0.25 }), shadow = new __WEBPACK_IMPORTED_MODULE_0_three_js__["Mesh"](shadowGeometry, shadowMaterial);
            shadow.rotation.x = -Math.PI / 2;
            //this.scene.add(shadow);
            playerScene.add(shadow);
            this._shadow = shadow;
        }
        return scene;
    };
    Game.prototype.start = function (atLevel) {
        var _this = this;
        if (atLevel === void 0) { atLevel = 1; }
        var normalizedLevel = atLevel - 1, level = __WEBPACK_IMPORTED_MODULE_7__levels_js__["a" /* default */][normalizedLevel], beat = this.beat;
        this.currentLevelDefinition = level;
        var options = Object.assign({}, level.options);
        options.drawDistance = 15;
        this.level = __WEBPACK_IMPORTED_MODULE_5__Level_js__["a" /* default */].createLevel(level.level, options);
        if (level.options.music) {
            beat.bpm = level.options.bpm;
            __WEBPACK_IMPORTED_MODULE_10__AudioManager_js__["a" /* default */].add({ name: "level", url: "music/" + level.options.music.file, loop: true });
            this.musicStartPoints = level.options.music.startPoints;
        }
        this.camera.far = this.level.blockSize * (options.drawDistance - 2);
        this.playerCamera.far = this.camera.far;
        this.camera.updateProjectionMatrix();
        this.playerCamera.updateProjectionMatrix();
        this.scene = this.makeScene();
        this.player = new __WEBPACK_IMPORTED_MODULE_6__Player_js__["a" /* default */]({
            immortal: this.inDemoMode,
            level: this.level,
            restitution: 0,
            position: new __WEBPACK_IMPORTED_MODULE_0_three_js__["Vector3"](0, 200, 1500),
            velocity: new __WEBPACK_IMPORTED_MODULE_0_three_js__["Vector3"](0, 0, 25),
            rotation: new __WEBPACK_IMPORTED_MODULE_0_three_js__["Euler"](0, Math.PI, 0)
        });
        this._resetPhysics();
        requestAnimationFrame(function (t) { return _this.animate(t); });
    };
    Game.prototype.reset = function (state, waitReason) {
        var player = this.player;
        this.stopMusic();
        this._resetPhysics();
        this.delta.reset();
        this.state = state || this.state;
        player.reset();
        player.immortal = this.inDemoMode; // player becomes immortal if in demo
        // wait for interaction to start if in game
        if (waitReason !== undefined) {
            this.waitingForInteraction = waitReason;
        }
        this.pause(); // pause game
    };
    Game.prototype.update = function () {
        if (DEBUG) {
            this._stats("update").start();
        }
        var player = this.player, state = this.controllers.readState(), up = state.up, down = state.down, left = state.left, right = state.right, pause = state.pause; /*,
        exit = state.exit,
        retry = state.retry;*/
        // if we're waiting for something, or paused, take care of rendering that
        // to the screen
        this._renderMessage();
        if (up || down || left || right) {
            if (this.waitingForInteraction !== WAITING_REASON.NOT_WAITING) {
                if (this.controllers.timeSinceLastInput < 250) {
                    return;
                }
                __WEBPACK_IMPORTED_MODULE_9__Display_js__["a" /* default */].hide();
                this._resetPhysics();
            }
            this.waitingForInteraction = WAITING_REASON.NOT_WAITING;
            if (this.inDemoMode) {
                this.reset("game");
            }
        }
        if (pause) {
            this.waitingForInteraction = WAITING_REASON.PAUSED;
            this.pause();
        }
        else {
            if (this.waitingForInteraction !== WAITING_REASON.DEMO &&
                this.waitingForInteraction !== WAITING_REASON.DIED) {
                this.waitingForInteraction = WAITING_REASON.NOT_WAITING;
            }
            if (this.paused) {
                this.resume();
            }
        }
        player.velocity.x = 0;
        if (!(left && right)) {
            if (left) {
                player.velocity.x = player.velocity.z;
            }
            if (right) {
                player.velocity.x = -player.velocity.z;
            }
        }
        player.defyGravity = false;
        if (up) {
            if (player.grounded) {
                this.delta.logGroup = "JUMP";
                player.jump();
            }
            else {
                if (player.velocity.y > 0) {
                    player.defyGravity = true;
                }
            }
        }
        if (!up) {
            this.delta.logGroup = undefined;
        }
        player.crouch = false;
        if (down && player.grounded) {
            player.crouch = true;
        }
        if (DEBUG) {
            this._stats("update").end();
        }
    };
    Game.prototype.updateCamera = function () {
        if (DEBUG) {
            this._stats("camera").start();
        }
        var player = this.player, camera = this.camera, playerCamera = this.playerCamera;
        if (this.inGameMode) {
            // crouch
            camera.position.y -= (player.crouch ? 100 : 50);
            if (PLAYER_PERSON_VIEW === PERSON_VIEW.THIRD) {
                camera.position.z += this.level.blockSize; // / 2;
            }
            // camera bob
            if (player.grounded) {
                /*    camera.position.x += Math.cos((player.bob / 3) * (Math.PI / 180)) * 10;
                    camera.position.y += Math.abs(Math.sin((player.bob / 2) * (Math.PI / 180)) * 10);
                    */
            }
            // calculate fov to simulate speed
            camera.fov = Math.min(112.5 + (player.velocity.z / 2), 160);
            camera.updateProjectionMatrix();
            playerCamera.fov = 125;
            playerCamera.updateProjectionMatrix();
            /*if (PLAYER_PERSON_VIEW === PERSON_VIEW.THIRD) {
                camera.rotation.x = -Math.PI / 16; // looking down
            } else { */
            camera.rotation.x = 0;
            //}
        }
        else {
            camera.position.y += 400; // up high
            camera.rotation.x = -0.25; // looking down
        }
        playerCamera.position.copy(camera.position);
        playerCamera.quaternion.copy(camera.quaternion);
        playerCamera.rotation.copy(camera.rotation);
        if (DEBUG) {
            this._stats("camera").end();
        }
    };
    Game.prototype.requestFrame = function () {
        requestAnimationFrame(this._animate);
    };
    Game.prototype.beginFrame = function (t) {
        if (DEBUG) {
            var stats = this._stats;
            stats("frame").start();
            this._gStats.start();
            stats("rAF").tick();
            stats("FPS").frame();
        }
        this.requestFrame();
        var d = this.delta.update(t);
        if (SLOW_FACTOR !== 1) {
            d /= SLOW_FACTOR;
        }
        return (d / MS_PER_FRAME);
    };
    Game.prototype.endFrame = function () {
        if (DEBUG) {
            var stats = this._stats;
            stats("frame").end();
            stats().update();
        }
    };
    Game.prototype.animate = function (t) {
        var camera = this.camera, playerCamera = this.playerCamera, scene = this.scene, level = this.level, renderer = this.renderer, player = this.player, 
        //inDemo = this.inDemoMode,
        inGame = this.inGameMode, camPosition, camQuaternion, camRotation;
        // report fps and get delta
        var df = this.beginFrame(t);
        var force = df === 0 || player.dead; // force lets us determine when to redraw the entire level
        this._physicsAccumulator += df;
        this.update();
        if (this.paused || (this.waitingForInteraction !== WAITING_REASON.NOT_WAITING && this.waitingForInteraction !== WAITING_REASON.DEMO)) {
            this.endFrame();
            return;
        }
        if (player.position.z < 0 && !__WEBPACK_IMPORTED_MODULE_10__AudioManager_js__["a" /* default */].isPlaying("level") && inGame) {
            this.startMusic();
        }
        // detect if at end of level so we can restart
        if (player.dead || player.position.z < -(level.level.length * level.blockSize)) {
            var playerWasDead = player.dead;
            this.reset(player.dead ? "game" : this.state, playerWasDead ? WAITING_REASON.DIED : undefined);
            df = 0;
            force = true;
            if (playerWasDead) {
                if (DEBUG) {
                    this._stats("scene").start();
                }
                level.updateScene(player.position.z, force);
                if (DEBUG) {
                    this._stats("scene").end();
                }
                this.endFrame();
                return;
            }
        }
        if (DEBUG) {
            this._stats("physics").start();
        }
        switch (PHYSICS_MODE) {
            case PHYSICS_MODE_CONSTANT:
                this._physicsAccumulator = 0;
                player.applyPhysics(1);
                this.player.interpolate(1);
                camera.position.copy(this.player.position);
                camera.quaternion.copy(this.player.quaternion);
                break;
            case PHYSICS_MODE_TICK:
                while (this._physicsAccumulator >= 0) {
                    player.tick();
                    this._physicsAccumulator -= 1;
                    if (this._physicsAccumulator > 0) {
                        this.update(1);
                    }
                }
                _a = this.player.interpolate(1 + this._physicsAccumulator), camPosition = _a[0], camQuaternion = _a[1], camRotation = _a[2];
                camera.position.copy(camPosition);
                camera.quaternion.copy(camQuaternion);
                break;
            case PHYSICS_MODE_DELTA:
            default:
                this._physicsAccumulator = 0;
                player.applyPhysics(df);
                this.player.interpolate(1);
                camera.position.copy(this.player.position);
                camera.quaternion.copy(this.player.quaternion);
        }
        if (DEBUG) {
            this._stats("physics").end();
        }
        this.updateCamera(1);
        // blink lines
        this._lines.material.opacity = 0.75 - (this.beat.normalizedTimeSinceLastBeat / 2);
        this._lines.position.y = camera.position.y / 3;
        this._lines.position.x = camera.position.x / 3;
        if (this._playerMesh) {
            this._playerMesh.visible = PLAYER_PERSON_VIEW === PERSON_VIEW.THIRD;
            this._playerMesh.position.copy(player.camPosition);
            this._playerMesh.quaternion.copy(player.camQuaternion);
            this._playerMesh.rotation.copy(player.camRotation);
            this._playerMesh.position.y -= this.level.blockSize; // - 40;
        }
        if (!USE_REAL_SHADOWS && this._playerMesh) {
            this._shadow.visible = PLAYER_PERSON_VIEW === PERSON_VIEW.THIRD;
            var shadowHeight = this.level.heightAtPosition(player.camPosition);
            this._shadow.position.copy(this._playerMesh.position);
            //this._shadow.quaternion.copy(this._playerMesh.quaternion);
            //this._shadow.rotation.copy(this._playerMesh.rotation);
            this._shadow.rotation.x = -Math.PI / 2;
            this._shadow.rotation.z = this._playerMesh.rotation.y;
            if (shadowHeight === undefined) {
                shadowHeight = -(this.level.stepSize * (__WEBPACK_IMPORTED_MODULE_5__Level_js__["a" /* default */].HALF_MAX_STEPS + 8));
            }
            this._shadow.position.y = shadowHeight + 1; //20;
        }
        // refresh level rendering
        if (DEBUG) {
            this._stats("scene").start();
        }
        level.updateScene(player.position.z, force);
        if (DEBUG) {
            this._stats("scene").end();
        }
        if (DEBUG) {
            this._stats("render").start();
        }
        renderer.clear();
        renderer.render(this.starScene, camera);
        renderer.clear(false, true, true);
        renderer.render(scene, camera);
        if (PLAYER_PERSON_VIEW === PERSON_VIEW.THIRD) {
            renderer.clear(false, true, true);
            renderer.render(this.playerScene, playerCamera);
        }
        if (DEBUG) {
            this._stats("render").end();
        }
        this.endFrame();
        var _a;
    };
    /*
     * Private methods
     **************************************************************************/
    Game.prototype._resetPhysics = function () {
        this._physicsAccumulator = 0;
    };
    Game.prototype._renderMessage = function () {
        if (!__WEBPACK_IMPORTED_MODULE_9__Display_js__["a" /* default */].visible) {
            switch (this.waitingForInteraction) {
                case WAITING_REASON.NEW_GAME:
                case WAITING_REASON.RETRY:
                case WAITING_REASON.DEMO:
                    __WEBPACK_IMPORTED_MODULE_9__Display_js__["a" /* default */].print("Ready?", this.currentLevelDefinition.options.name);
                    break;
                case WAITING_REASON.PAUSED:
                    __WEBPACK_IMPORTED_MODULE_9__Display_js__["a" /* default */].print("Paused");
                    break;
                case WAITING_REASON.DIED:
                    __WEBPACK_IMPORTED_MODULE_9__Display_js__["a" /* default */].print(__WEBPACK_IMPORTED_MODULE_8__textVariations_js__["a" /* default */].getDeathTitle(), __WEBPACK_IMPORTED_MODULE_8__textVariations_js__["a" /* default */].getDeathText());
                    break;
                case WAITING_REASON.NOT_WAITING:
                default:
                    __WEBPACK_IMPORTED_MODULE_9__Display_js__["a" /* default */].hide();
            }
        }
        else {
            if (this.waitingForInteraction === WAITING_REASON.NOT_WAITING) {
                __WEBPACK_IMPORTED_MODULE_9__Display_js__["a" /* default */].hide();
            }
        }
    };
    /*
     * State management
     **************************************************************************/
    Game.prototype.pause = function () {
        this.paused = true;
        this.pauseMusic();
    };
    Game.prototype.resume = function () {
        this.resumeMusic();
        this.paused = false;
        this._resetPhysics();
    };
    /*
     * Music related functions
     **************************************************************************/
    Game.prototype.startMusic = function () {
        var startTime = this.musicStartPoints[Math.floor(Math.random() * this.musicStartPoints.length)];
        __WEBPACK_IMPORTED_MODULE_10__AudioManager_js__["a" /* default */].stop("bg");
        __WEBPACK_IMPORTED_MODULE_10__AudioManager_js__["a" /* default */].play("level", startTime);
        this.beat.start();
    };
    Game.prototype.pauseMusic = function () {
        if (__WEBPACK_IMPORTED_MODULE_10__AudioManager_js__["a" /* default */].isPlaying("level")) {
            __WEBPACK_IMPORTED_MODULE_10__AudioManager_js__["a" /* default */].stop("level");
            this.beat.stop();
        }
    };
    Game.prototype.resumeMusic = function () {
        if (__WEBPACK_IMPORTED_MODULE_10__AudioManager_js__["a" /* default */].isPlaying("level")) {
            this.startMusic();
        }
    };
    Game.prototype.stopMusic = function () {
        __WEBPACK_IMPORTED_MODULE_10__AudioManager_js__["a" /* default */].stop("level");
        this.beat.stop();
    };
    /*
     * Events
     **************************************************************************/
    Game.prototype.onResize = function () {
        var _this = this;
        if (this._resizeTimer) {
            clearTimeout(this._resizeTimer);
        }
        this._resizeTimer = setTimeout(function () {
            _this._resizeTimer = null;
            var camera = _this.camera, playerCamera = _this.playerCamera, renderer = _this.renderer;
            camera.aspect = window.innerWidth / window.innerHeight;
            playerCamera.aspect = camera.aspect;
            camera.updateProjectionMatrix();
            playerCamera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }, 250);
    };
    Object.defineProperty(Game.prototype, "inDemoMode", {
        /*
         * Properties
         **************************************************************************/
        get: function () {
            return this.state === "demo";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "inGameMode", {
        get: function () {
            return this.state !== "demo";
        },
        enumerable: true,
        configurable: true
    });
    return Game;
}());
/* harmony default export */ __webpack_exports__["a"] = (Game);
//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_three_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Level_js__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__flags_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_js__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AudioManager_js__ = __webpack_require__(1);





var Player = (function () {
    /* physics from https://www.burakkanber.com/blog/modeling-physics-javascript-gravity-and-drag/ */
    function Player(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.position, position = _c === void 0 ? (new __WEBPACK_IMPORTED_MODULE_0_three_js__["Vector3"]()) : _c, _d = _b.velocity, velocity = _d === void 0 ? (new __WEBPACK_IMPORTED_MODULE_0_three_js__["Vector3"]()) : _d, _e = _b.rotation, rotation = _e === void 0 ? (new __WEBPACK_IMPORTED_MODULE_0_three_js__["Euler"]()) : _e, level = _b.level, _f = _b.mass, mass = _f === void 0 ? 200 : _f, _g = _b.radius, radius = _g === void 0 ? 15 : _g, _h = _b.restitution, restitution = _h === void 0 ? 0.7 : _h, _j = _b.density, density = _j === void 0 ? 1.22 : _j, _k = _b.gravity, gravity = _k === void 0 ? 9.81 : _k, _l = _b.targetForwardVelocity, targetForwardVelocity = _l === void 0 ? 25 : _l, _m = _b.maxForwardVelocity, maxForwardVelocity = _m === void 0 ? 100 : _m, _o = _b.minForwardVelocity, minForwardVelocity = _o === void 0 ? 5 : _o, _p = _b.immortal, immortal = _p === void 0 ? false : _p;
        this.cd = 0.47;
        this.density = density.copy;
        this.mass = mass;
        this.radius = radius;
        this.restitution = restitution;
        this.gravity = gravity;
        this.immortal = immortal;
        this.level = level;
        this.targetForwardVelocity = targetForwardVelocity;
        this.maxForwardVelocity = maxForwardVelocity;
        this.minForwardVelocity = minForwardVelocity;
        this.initialPosition = position.clone();
        this.initialVelocity = velocity.clone();
        this.initialRotation = rotation.clone();
        this.initialVectors = [this.initialPosition, this.initialVelocity, this.initialRotation];
        this.reset();
    }
    Player.prototype.reset = function () {
        this.grounded = false;
        this.dead = false;
        this.crouch = false;
        this.defyGravity = false;
        this.bob = 0;
        this.position = this.initialPosition.clone();
        this.lastPosition = this.position.clone();
        this.camPosition = this.position.clone();
        this.velocity = this.initialVelocity.clone();
        this.rotation = this.initialRotation.clone();
        this.lastRotation = this.rotation.clone();
        this.camRotation = this.rotation.clone();
        this.quaternion = new __WEBPACK_IMPORTED_MODULE_0_three_js__["Vector4"]();
        this.lastQuaternion = this.quaternion.clone();
        this.camQuaternion = this.lastQuaternion.clone();
        this.lastVectors = [this.lastPosition, this.lastQuaternion, this.lastRotation];
        this.interpolatedVectors = [this.camPosition, this.camQuaternion, this.camRotation];
        this.vectors = [this.position, this.quaternion, this.rotation];
    };
    Player.prototype.interpolate = function (delta) {
        if (delta === void 0) { delta = 0; }
        var vectors = this.vectors, interpolatedVectors = this.interpolatedVectors, lastVectors = this.lastVectors, vector, interpolatedVector, lastVector, lx, ly, lz, nx, ny, nz, dx, dy, dz;
        if (delta > 0) {
            for (var i = 0; i < 3; i++) {
                vector = vectors[i];
                lastVector = lastVectors[i];
                interpolatedVector = interpolatedVectors[i];
                lx = lastVector.x;
                nx = vector.x;
                dx = nx - lx;
                ly = lastVector.y;
                ny = vector.y;
                dy = ny - ly;
                lz = lastVector.z;
                nz = vector.z;
                dz = nz - lz;
                interpolatedVector.x = lx + (dx * delta);
                interpolatedVector.y = ly + (dy * delta);
                interpolatedVector.z = lz + (dz * delta);
            }
        }
        return interpolatedVectors;
    };
    Player.prototype.tick = function () {
        this.lastPosition.copy(this.position);
        this.lastQuaternion.copy(this.quaternion);
        this.lastRotation.copy(this.rotation);
        this.applyPhysics();
    };
    Player.prototype.applyPhysics = function (delta) {
        if (delta === void 0) { delta = 1; }
        var cd = this.cd, rho = this.density, mass = this.mass, radius = this.radius, position = this.position, velocity = this.velocity, gravity = this.gravity, A = Math.PI * (radius * radius), immortal = this.immortal;
        var level = this.level, targetForwardVelocity = this.targetForwardVelocity, startingHeight = position.y, startingPlummet = velocity.y;
        // player can increase hang time by defying gravity
        if (this.defyGravity) {
            velocity.y -= (gravity / 1.33) * delta;
        }
        // calculate new position based on velocity and gravity
        for (var i = 0, v = velocity.getComponent(i); i < 3; i++) {
            v = -0.5 * cd * A * rho * (v * v * v) / Math.abs(v);
            v = isNaN(v) ? 0 : v;
            /*eslint-disable no-fallthrough*/
            switch (i) {
                case 1:
                    if (position.z < 0) {
                        v = (immortal ? 0.25 : gravity) + (v / mass);
                        break;
                    }
                case 2: // z
                case 0: // x
                default:
                    v /= mass;
            }
            /*eslint-enable no-fallthrough*/
            v *= delta;
            velocity.setComponent(i, velocity.getComponent(i) + v);
            position.setComponent(i, position.getComponent(i) - (velocity.getComponent(i) * delta));
        }
        this.grounded = false;
        // update the player's quaternion (head angle)
        var nqz = Math.min(10, velocity.x / 4) * (Math.PI / 180);
        var dqz = this.quaternion.z - nqz;
        if (dqz !== 0) {
            this.quaternion.z = __WEBPACK_IMPORTED_MODULE_3__util_js__["a" /* default */].clamp(this.quaternion.z - (((Math.abs(dqz) / 4) * __WEBPACK_IMPORTED_MODULE_3__util_js__["a" /* default */].sign(dqz)) * delta), -0.5, 0.5);
        }
        this.rotation.y = this.rotation.y + Math.PI;
        var qPI = Math.PI / 4;
        var nr = (velocity.x / level.stepSize) * qPI;
        var dr = this.rotation.y - nr;
        if (dr !== 0) {
            this.rotation.y = __WEBPACK_IMPORTED_MODULE_3__util_js__["a" /* default */].clamp(this.rotation.y - (((Math.abs(dr) / 4) * __WEBPACK_IMPORTED_MODULE_3__util_js__["a" /* default */].sign(dr)) * delta), -qPI, qPI);
        }
        this.rotation.y = this.rotation.y - Math.PI;
        // figure out our obstacles
        var neededHeight = level.heightAtPosition(position);
        var ceilingHeight = level.ceilingAtPosition(position);
        targetForwardVelocity = level.targetSpeedAtPosition(position);
        if (neededHeight !== undefined) {
            neededHeight += 200; // playerHeight
        }
        if (ceilingHeight !== undefined) {
            ceilingHeight += 200;
        }
        if (neededHeight !== undefined) {
            if (immortal) {
                if (position.y < neededHeight) {
                    position.y -= (position.y - neededHeight) / 4;
                }
            }
            if (startingHeight >= (neededHeight - 25) && startingPlummet >= 0) {
                // started out /above/ the floor, and was falling
                if (position.y < neededHeight) {
                    position.y = neededHeight; // can't fall /through/ the floor
                }
            }
            if (ceilingHeight && (startingHeight <= ceilingHeight) && (startingPlummet < 0)) {
                // lower than the ceiling, and going up
                if (position.y > ceilingHeight) {
                    position.y = ceilingHeight; // can't jump through the ceiling
                    velocity.y = 0;
                }
            }
            if (position.y <= neededHeight) {
                // we're below the needed height -- can we safely transition up
                // or are dead?
                var distance = neededHeight - position.y;
                if (distance > level.blockSize * 2) {
                    this.die();
                    return;
                }
                // if we can bounce, do so
                velocity.y = (-(Math.abs(velocity.y) * this.restitution));
                // slowly adjust to desired position
                position.y += (distance / 3) * delta;
                // we're on the ground, yay!
                this.grounded = true;
            }
            if (ceilingHeight && (position.y > ceilingHeight)) {
                // fell into a ceiling piece
                this.die();
                return;
            }
        }
        // too low!
        if (position.y < -((level.stepSize * (__WEBPACK_IMPORTED_MODULE_1__Level_js__["a" /* default */].HALF_MAX_STEPS + 1)))) {
            this.die();
        }
        // speed up / slow down
        if (velocity.z !== targetForwardVelocity) {
            if (velocity.z < targetForwardVelocity) {
                /* too slow; speed up */
                velocity.z += delta;
                if (velocity.z > targetForwardVelocity) {
                    velocity.z = targetForwardVelocity;
                }
            }
            else {
                /* too fast; slow down */
                velocity.z -= 2.5 * delta;
                if (velocity.z < targetForwardVelocity) {
                    velocity.z = targetForwardVelocity;
                }
            }
        }
        this.updateStatus();
        // cap forward/backward velocities
        if (velocity.z > this.maxForwardVelocity) {
            velocity.z = this.maxForwardVelocity;
        }
        else if (velocity.z < this.minForwardVelocity) {
            velocity.z = this.minForwardVelocity;
        }
        // let the camera bob if we're grounded
        if (this.grounded) {
            this.bob += 16 * delta;
        }
    };
    Player.prototype.updateStatus = function (delta) {
        if (delta === void 0) { delta = 1; }
        var position = this.position, velocity = this.velocity, targetForwardVelocity = this.targetForwardVelocity, level = this.level;
        // if we're out-of-z-bounds, this is all the further we can go
        // can't kill the player or anything like that
        if (position.z > 0) {
            return;
        }
        var flag = level.flagAtPosition(position);
        // process flags
        if (this.grounded && !this.immortal) {
            switch (flag.action) {
                case __WEBPACK_IMPORTED_MODULE_2__flags_js__["a" /* default */].ACTION.JUMP:
                    this.jump();
                    break;
                case __WEBPACK_IMPORTED_MODULE_2__flags_js__["a" /* default */].ACTION.SPEED_UP:
                    velocity.z += 10 * delta;
                    break;
                case __WEBPACK_IMPORTED_MODULE_2__flags_js__["a" /* default */].ACTION.REALLY_SLOW:
                    velocity.z -= 10 * delta;
                    break;
                case __WEBPACK_IMPORTED_MODULE_2__flags_js__["a" /* default */].ACTION.SLOW_DOWN:
                    velocity.z = Math.max(targetForwardVelocity, velocity.z - (10 * delta));
                    break;
                case __WEBPACK_IMPORTED_MODULE_2__flags_js__["a" /* default */].ACTION.DIE:
                    this.die();
                    break;
                case __WEBPACK_IMPORTED_MODULE_2__flags_js__["a" /* default */].ACTION.NONE:
                default:
            }
        }
    };
    Player.prototype.jump = function () {
        if (this.velocity.y >= 0) {
            this.velocity.y = -115;
            __WEBPACK_IMPORTED_MODULE_4__AudioManager_js__["a" /* default */].play("jump");
        }
    };
    Player.prototype.die = function () {
        this.dead = !this.immortal && true;
        this.grounded = false;
        if (this.dead) {
            __WEBPACK_IMPORTED_MODULE_4__AudioManager_js__["a" /* default */].play("explode");
        }
    };
    return Player;
}());
/* harmony default export */ __webpack_exports__["a"] = (Player);
//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__levels_level01_js__ = __webpack_require__(19);

/* harmony default export */ __webpack_exports__["a"] = ([
    __WEBPACK_IMPORTED_MODULE_0__levels_level01_js__["a" /* default */],
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGV2ZWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGV2ZWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FBTyxNQUFNLHFCQUFxQixDQUFDO0FBRTFDLGVBQWU7SUFDWCxPQUFPO0NBQ1YsQ0FBQyJ9

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__music_js__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__patterns_js__ = __webpack_require__(20);


var LEVEL_DATA = __WEBPACK_IMPORTED_MODULE_1__patterns_js__["a" /* default */].utils.series(__WEBPACK_IMPORTED_MODULE_1__patterns_js__["a" /* default */].ready(25), [
    ["80 80}80 80 80 80 80 80 80 80 80 80 80 80 80 80{80 ", 1],
    ["80 80 80}80 80 80 80 80 80 80 80 80 80 80 80{80 80 ", 1],
    ["80 80 80 80}80 80 80 80 80 80 80 80 80 80{80 80 80 ", 1],
    ["80 80 80 80 80}80 80 80 80 80 80 80 80{80 80 80 80 ", 1],
    ["80 80 80 80 80 80}80 80 80 80 80 80{80 80 80 80 80 ", 1],
    ["80 80 80 80 80 80 80}80 80 80 80{80 80 80 80 80 80 ", 1],
    ["80 80 80 80 80 80 80 80}80 80{80 80 80 80 80 80 80 ", 1],
    ["80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 ", 1],
    ["801802803804805806807808809808807806805804803802801", 1],
    ["801802803804805806807808809808807806805804803802801", 1],
    ["80 80}80 80 80 80 80 80 80 80 80 80 80 80 80 80{80 ", 1],
    ["80 80 80}80 80 80 80 80 80 80 80 80 80 80 80{80 80 ", 1],
    [".. 80!80 80}80 80 80 80 80 80 80 80 80 80{80 80!.. ", 1],
    [".. .. 80!80 80}80 80 80 80 80 80 80 80{80 80!.. .. ", 1],
    [".. .. .. 80!80 80}80 80 80 80 80 80{80 80!.. .. 00 ", 1],
    [".. .. .. .. 80!80 80}80 80 80 80{80 80!.. .. .. 00 ", 1],
    [".. .. .. .. .. 80!80 80}80 80{80 80!80 .. .. .. 00 ", 1],
    [".. .. .. .. .. FFXFFX802802802FFXFFX.. .. .. .. 00 ", 1],
    [".. .. .. .. .. FFXFFX802802802FFXFFX.. .. .. .. 00 ", 1],
    [".. .. .. .. .. FFXFFX802802802FFXFFX.. .. .. .. 00 ", 1],
    [".. .. .. .. .. FFXFFX802802802FFXFFX.. .. .. .. 00 ", 5],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. 00 ", 4],
    [".. .. .. .. .. .. .. 80#80#80#.. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 80#80#80#.. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 84#84#84#.. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 88#88#88#.. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 88#88#88#.. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 88#88#88#.. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 88#88#88#.. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 88#88#88#.. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 8C#8C#8C#.. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 80!80!80!.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 5],
    [".. .. .. .. .. .. .. 80!80!80!.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 80!80!80!.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 80!80!80!.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 80!80!80!.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 80^80^80^.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 80^80^80^.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 80^80^80^.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 80>80>80>.. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 80^80^80^.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 80<80<80<.. .. .. .. .. .. .. ", 12],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 80>80>80>.. .. .. .. .. .. .. ", 12],
    [".. .. .. .. .. .. .. 80!80!80!.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. 80<80<80<.. .. .. .. .. .. .. ", 20],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 12],
    [".. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. 80 80{80 .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. 80 80 80 .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. 80 80 80 .. .. .. .. .. .. .. .. .. .. .. ", 6],
    [".. .. .. 40 80 80 80 .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. 40 80 80}80 .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. 40 .. 80 80 80 .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. 40 .. .. 80 80 80 .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 88#88#88#.. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. ", 2],
    [".. .. .. 40 .. .. .. .. .. 80 80 80 .. .. .. .. .. ", 2],
    [".. .. .. 40 .. .. .. .. .. .. 80 80 80 .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. .. .. .. .. 80 80 80 .. .. .. ", 6],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. 50 .. .. .. .. .. .. .. 80 80 80 .. .. .. ", 1],
    [".. .. .. 50 .. .. .. .. .. .. .. 80 80{80 .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. 80 80 80 .. .. .. .. ", 2],
    [".. .. 60 .. .. .. .. .. .. 80 80 80 .. .. .. .. .. ", 2],
    [".. .. 60 .. .. .. .. .. 80 80 80 .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 2],
    [".. .. 70 .. .. .. .. 7F 7F 7F .. .. .. .. .. .. .. ", 2],
    [".. .. 70 .. .. .. .. 7E 7E 7E .. .. .. .. .. .. .. ", 2],
    [".. 70 70 70 .. .. .. 7D 7D 7D .. .. .. .. .. .. .. ", 2],
    [".. 70 70 70 .. .. .. 7C 7C 7C .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 7B 7B 7B .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 7A 7A 7A .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 79 79 79 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 78 78 78 .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 78!78!78!.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 76 76 76 .. .. .. .. .. .. .. ", 8],
    [".. .. .. .. .. .. .. 7B 7B 7B .. .. .. .. .. .. .. ", 8],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 7],
    [".. .. .. .. .. .. .. 80+80+80+.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 90X90X90X.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 90 90 90 .. .. .. .. .. .. .. ", 6],
    [".. .. .. .. .. .. .. 90+90+90+.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. A0XA0XA0X.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. A0 A0 A0 .. .. .. .. .. .. .. ", 6],
    [".. .. .. .. .. .. .. A0-A0-A0-.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 70 70 70 .. .. .. .. .. .. .. ", 8],
    [".. .. .. .. .. .. .. 80X80X80X.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 90X90X90X.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. 90 90 90 .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. A0XA0XA0X.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. A0 A0 A0 .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. B0XB0XB0X.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. B0 B0 B0 .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. C0XC0XC0X.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. C0 C0 C0 .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. D0XD0XD0X.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. D0 D0 D0 .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. E0XE0XE0X.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. E0 E0 E0 .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. F0XF0XF0X.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. F0 F0 F0 .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. FFXFFXFFX.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. FFXFFXFFX.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. FF2FF2FF2.. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. EF4EF4EF4.. .. .. .. .. .. .. ", 8],
    [".. .. .. .. .. .. .. EF6EF6EF6.. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. FF2FF2FF2.. .. .. .. .. .. .. ", 4],
    [".. .. .. .. .. .. .. FF FF FF .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. FF FF FF .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. F0 F0 F0 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. E0 E0 E0 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. D0 D0 D0 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. C0^C0^C0^.. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. B0 B0 B0 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. A0^A0 A0^.. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. A0 A0^A0 .. .. .. .. .. .. .. ", 1],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 90 90 90 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. 80 80 80 .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. 80 80 80 .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. 80 80 80 .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. 80 80 80 .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. 80 80 80 .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. 80 80 80 .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ", 2],
    [".. .. .. .. .. .. .. 80 80 80 .. .. .. .. .. .. .. ", 100],
]);
/* harmony default export */ __webpack_exports__["a"] = ({
    level: LEVEL_DATA,
    options: {
        name: "Doddle in the Park",
        bpm: __WEBPACK_IMPORTED_MODULE_0__music_js__["a" /* default */].roccow01.bpm,
        //colors: [0xC0A090, 0xA090C0, 0x90A0C0, 0xA0C090, 0xC090A0, 0x90A0C0],
        bgColor: 0x204080,
        colors: [0xFF8040, 0x8040FF, 0x40FF80, 0x80FF40, 0xFF4080, 0x4080FF],
        //colors: [0xFFFFFF, 0x404040, 0x804040, 0x408040],
        music: __WEBPACK_IMPORTED_MODULE_0__music_js__["a" /* default */].roccow01
    }
});
//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__patterns_ready_js__ = __webpack_require__(21);

/* harmony default export */ __webpack_exports__["a"] = ({
    ready: __WEBPACK_IMPORTED_MODULE_0__patterns_ready_js__["a" /* default */],
    utils: {
        series: function () {
            var patterns = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                patterns[_i] = arguments[_i];
            }
            return patterns.reduce(function (acc, pattern) { return acc.concat(pattern); }, []);
        }
    },
    guidance: {
        starting: {
            ready: __WEBPACK_IMPORTED_MODULE_0__patterns_ready_js__["a" /* default */],
        },
        middle: {},
        ending: {}
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0dGVybnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwYXR0ZXJucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxxQkFBcUIsQ0FBQztBQUN4QyxlQUFlO0lBQ1gsS0FBSyxPQUFBO0lBQ0wsS0FBSyxFQUFFO1FBQ0gsTUFBTTtZQUFFLGtCQUFXO2lCQUFYLFVBQVcsRUFBWCxxQkFBVyxFQUFYLElBQVc7Z0JBQVgsNkJBQVc7O1lBQ2YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQyxHQUFHLEVBQUUsT0FBTyxJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBbkIsQ0FBbUIsRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUNyRSxDQUFDO0tBQ0o7SUFDRCxRQUFRLEVBQUU7UUFDTixRQUFRLEVBQUU7WUFDTixLQUFLLE9BQUE7U0FDUjtRQUNELE1BQU0sRUFBRSxFQUVQO1FBQ0QsTUFBTSxFQUFFLEVBRVA7S0FDSjtDQUNKLENBQUEifQ==

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function (_a) {
    var speed = (_a === void 0 ? {} : _a).speed;
    return [
        ["80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 ", 10, speed],
        ["80 80 80 80 80 80 80r80e80a80d80y80 80 80 80 80 80 ", 1],
        ["80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 ", 9, speed],
    ];
});;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWFkeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlLFVBQUMsRUFBYztRQUFaLHVDQUFLO0lBQVksT0FBQTtRQUMvQixDQUFDLHFEQUFxRCxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUM7UUFDbEUsQ0FBQyxxREFBcUQsRUFBRSxDQUFDLENBQUM7UUFDMUQsQ0FBQyxxREFBcUQsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDO0tBQ3BFO0FBSmtDLENBSWxDLENBQUMifQ==

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ({
    "roccow01": {
        bpm: 128.005,
        file: "roccow-sweet-self-satisfaction.mp3",
        startPoints: [0, 59.95, 120.1]
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVzaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtdXNpYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlO0lBQ1gsVUFBVSxFQUFFO1FBQ1IsR0FBRyxFQUFFLE9BQU87UUFDWixJQUFJLEVBQUUsb0NBQW9DO1FBQzFDLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO0tBQ2pDO0NBQ0osQ0FBQSJ9

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var deathTitles = [
    "RIP",
    "DEAD",
    "OOPS!",
    "OUCH!",
    "SPLAT!",
    "WTF?",
    ":-(",
];
var deathTexts = [
    "Oh, that had to hurt!",
    "Why'd you do that?",
    "That'll leave a mark",
    "Pancakes, anyone?",
    "That was a smashing example of what not to do!",
    "Darwin award recipient!",
    "Stop doing that!",
    "Pretty sure I can do better than that.",
];
function getVariation(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}
/* harmony default export */ __webpack_exports__["a"] = ({
    getDeathTitle: function () {
        return getVariation(deathTitles);
    },
    getDeathText: function () {
        return getVariation(deathTexts);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dFZhcmlhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXh0VmFyaWF0aW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLFdBQVcsR0FBRztJQUNkLEtBQUs7SUFDTCxNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsTUFBTTtJQUNOLEtBQUs7Q0FDUixDQUFDO0FBRUYsSUFBSSxVQUFVLEdBQUc7SUFDYix1QkFBdUI7SUFDdkIsb0JBQW9CO0lBQ3BCLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsZ0RBQWdEO0lBQ2hELHlCQUF5QjtJQUN6QixrQkFBa0I7SUFDbEIsd0NBQXdDO0NBQzNDLENBQUM7QUFFRixzQkFBc0IsR0FBRztJQUNyQixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFHRCxlQUFlO0lBQ1gsYUFBYTtRQUNULE1BQU0sQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUNELFlBQVk7UUFDUixNQUFNLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDSixDQUFBIn0=

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_three_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__flags_js__ = __webpack_require__(3);


var textures = Object.keys(__WEBPACK_IMPORTED_MODULE_1__flags_js__["a" /* default */].flags).reduce(function (acc, flag) {
    var H = 8, W = 8;
    var t = __WEBPACK_IMPORTED_MODULE_1__flags_js__["a" /* default */].getFlag(flag).texture;
    var buf = new ArrayBuffer(H * W * 4);
    var arr = new Uint8Array(buf);
    for (var r = 0; r < t.length; r++) {
        var line = t[r].split("").reverse();
        for (var c = 0; c < line.length; c++) {
            var arrIdx = (((H * W) - 1) - (r * W + c)) * 4, tValue = line[c] === "X" ? 1 : 0;
            arr[arrIdx + 0] = (tValue * 255);
            arr[arrIdx + 1] = (tValue * 255);
            arr[arrIdx + 2] = (tValue * 255);
            arr[arrIdx + 3] = 255;
        }
    }
    var texture = new __WEBPACK_IMPORTED_MODULE_0_three_js__["DataTexture"](arr, W, H, __WEBPACK_IMPORTED_MODULE_0_three_js__["RGBAFormat"]);
    texture.wrapS = __WEBPACK_IMPORTED_MODULE_0_three_js__["RepeatWrapping"];
    texture.wrapT = __WEBPACK_IMPORTED_MODULE_0_three_js__["RepeatWrapping"];
    texture.repeat.set(1, 1);
    texture.needsUpdate = true;
    acc[flag] = texture;
    return acc;
}, {});
/* harmony default export */ __webpack_exports__["a"] = (textures);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dHVyZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXh0dXJlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLFVBQVUsQ0FBQztBQUVsQyxPQUFPLEtBQUssTUFBTSxZQUFZLENBQUM7QUFFL0IsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLElBQUk7SUFDckQsSUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkIsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDcEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyQyxJQUFJLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNoQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3BDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ25DLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQzFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztZQUNqQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDakMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDMUIsQ0FBQztJQUNMLENBQUM7SUFDRCxJQUFJLE9BQU8sR0FBRyxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pFLE9BQU8sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQztJQUNyQyxPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7SUFDckMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQzNCLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUM7SUFDcEIsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNmLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUVQLGVBQWUsUUFBUSxDQUFDIn0=

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = MTLLoader;
function MTLLoader(THREE) {
    /*eslint-disable*/
    /**
     * Loads a Wavefront .mtl file specifying materials
     *
     * @author angelxuanchang
     */
    THREE.MTLLoader = function (manager) {
        this.manager = (manager !== undefined) ? manager : THREE.DefaultLoadingManager;
    };
    THREE.MTLLoader.prototype = {
        constructor: THREE.MTLLoader,
        /**
         * Loads and parses a MTL asset from a URL.
         *
         * @param {String} url - URL to the MTL file.
         * @param {Function} [onLoad] - Callback invoked with the loaded object.
         * @param {Function} [onProgress] - Callback for download progress.
         * @param {Function} [onError] - Callback for download errors.
         *
         * @see setPath setTexturePath
         *
         * @note In order for relative texture references to resolve correctly
         * you must call setPath and/or setTexturePath explicitly prior to load.
         */
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(this.path);
            loader.load(url, function (text) {
                onLoad(scope.parse(text));
            }, onProgress, onError);
        },
        /**
         * Set base path for resolving references.
         * If set this path will be prepended to each loaded and found reference.
         *
         * @see setTexturePath
         * @param {String} path
         *
         * @example
         *     mtlLoader.setPath( 'assets/obj/' );
         *     mtlLoader.load( 'my.mtl', ... );
         */
        setPath: function (path) {
            this.path = path;
        },
        /**
         * Set base path for resolving texture references.
         * If set this path will be prepended found texture reference.
         * If not set and setPath is, it will be used as texture base path.
         *
         * @see setPath
         * @param {String} path
         *
         * @example
         *     mtlLoader.setPath( 'assets/obj/' );
         *     mtlLoader.setTexturePath( 'assets/textures/' );
         *     mtlLoader.load( 'my.mtl', ... );
         */
        setTexturePath: function (path) {
            this.texturePath = path;
        },
        setBaseUrl: function (path) {
            console.warn('THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.');
            this.setTexturePath(path);
        },
        setCrossOrigin: function (value) {
            this.crossOrigin = value;
        },
        setMaterialOptions: function (value) {
            this.materialOptions = value;
        },
        /**
         * Parses a MTL file.
         *
         * @param {String} text - Content of MTL file
         * @return {THREE.MTLLoader.MaterialCreator}
         *
         * @see setPath setTexturePath
         *
         * @note In order for relative texture references to resolve correctly
         * you must call setPath and/or setTexturePath explicitly prior to parse.
         */
        parse: function (text) {
            var lines = text.split('\n');
            var info = {};
            var delimiter_pattern = /\s+/;
            var materialsInfo = {};
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i];
                line = line.trim();
                if (line.length === 0 || line.charAt(0) === '#') {
                    // Blank line or comment ignore
                    continue;
                }
                var pos = line.indexOf(' ');
                var key = (pos >= 0) ? line.substring(0, pos) : line;
                key = key.toLowerCase();
                var value = (pos >= 0) ? line.substring(pos + 1) : '';
                value = value.trim();
                if (key === 'newmtl') {
                    // New material
                    info = { name: value };
                    materialsInfo[value] = info;
                }
                else if (info) {
                    if (key === 'ka' || key === 'kd' || key === 'ks') {
                        var ss = value.split(delimiter_pattern, 3);
                        info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];
                    }
                    else {
                        info[key] = value;
                    }
                }
            }
            var materialCreator = new THREE.MTLLoader.MaterialCreator(this.texturePath || this.path, this.materialOptions);
            materialCreator.setCrossOrigin(this.crossOrigin);
            materialCreator.setManager(this.manager);
            materialCreator.setMaterials(materialsInfo);
            return materialCreator;
        }
    };
    /**
     * Create a new THREE-MTLLoader.MaterialCreator
     * @param baseUrl - Url relative to which textures are loaded
     * @param options - Set of options on how to construct the materials
     *                  side: Which side to apply the material
     *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide
     *                  wrap: What type of wrapping to apply for textures
     *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping
     *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255
     *                                Default: false, assumed to be already normalized
     *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's
     *                                  Default: false
     * @constructor
     */
    THREE.MTLLoader.MaterialCreator = function (baseUrl, options) {
        this.baseUrl = baseUrl || '';
        this.options = options;
        this.materialsInfo = {};
        this.materials = {};
        this.materialsArray = [];
        this.nameLookup = {};
        this.side = (this.options && this.options.side) ? this.options.side : THREE.FrontSide;
        this.wrap = (this.options && this.options.wrap) ? this.options.wrap : THREE.RepeatWrapping;
    };
    THREE.MTLLoader.MaterialCreator.prototype = {
        constructor: THREE.MTLLoader.MaterialCreator,
        setCrossOrigin: function (value) {
            this.crossOrigin = value;
        },
        setManager: function (value) {
            this.manager = value;
        },
        setMaterials: function (materialsInfo) {
            this.materialsInfo = this.convert(materialsInfo);
            this.materials = {};
            this.materialsArray = [];
            this.nameLookup = {};
        },
        convert: function (materialsInfo) {
            if (!this.options)
                return materialsInfo;
            var converted = {};
            for (var mn in materialsInfo) {
                // Convert materials info into normalized form based on options
                var mat = materialsInfo[mn];
                var covmat = {};
                converted[mn] = covmat;
                for (var prop in mat) {
                    var save = true;
                    var value = mat[prop];
                    var lprop = prop.toLowerCase();
                    switch (lprop) {
                        case 'kd':
                        case 'ka':
                        case 'ks':
                            // Diffuse color (color under white light) using RGB values
                            if (this.options && this.options.normalizeRGB) {
                                value = [value[0] / 255, value[1] / 255, value[2] / 255];
                            }
                            if (this.options && this.options.ignoreZeroRGBs) {
                                if (value[0] === 0 && value[1] === 0 && value[2] === 0) {
                                    // ignore
                                    save = false;
                                }
                            }
                            break;
                        default:
                            break;
                    }
                    if (save) {
                        covmat[lprop] = value;
                    }
                }
            }
            return converted;
        },
        preload: function () {
            for (var mn in this.materialsInfo) {
                this.create(mn);
            }
        },
        getIndex: function (materialName) {
            return this.nameLookup[materialName];
        },
        getAsArray: function () {
            var index = 0;
            for (var mn in this.materialsInfo) {
                this.materialsArray[index] = this.create(mn);
                this.nameLookup[mn] = index;
                index++;
            }
            return this.materialsArray;
        },
        create: function (materialName) {
            if (this.materials[materialName] === undefined) {
                this.createMaterial_(materialName);
            }
            return this.materials[materialName];
        },
        createMaterial_: function (materialName) {
            // Create material
            var scope = this;
            var mat = this.materialsInfo[materialName];
            var params = {
                name: materialName,
                side: this.side
            };
            function resolveURL(baseUrl, url) {
                if (typeof url !== 'string' || url === '')
                    return '';
                // Absolute URL
                if (/^https?:\/\//i.test(url))
                    return url;
                return baseUrl + url;
            }
            function setMapForType(mapType, value) {
                if (params[mapType])
                    return; // Keep the first encountered texture
                var texParams = scope.getTextureParams(value, params);
                var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));
                map.repeat.copy(texParams.scale);
                map.offset.copy(texParams.offset);
                map.wrapS = scope.wrap;
                map.wrapT = scope.wrap;
                params[mapType] = map;
            }
            for (var prop in mat) {
                var value = mat[prop];
                if (value === '')
                    continue;
                switch (prop.toLowerCase()) {
                    // Ns is material specular exponent
                    case 'kd':
                        // Diffuse color (color under white light) using RGB values
                        params.color = new THREE.Color().fromArray(value);
                        break;
                    case 'ks':
                        // Specular color (color when light is reflected from shiny surface) using RGB values
                        params.specular = new THREE.Color().fromArray(value);
                        break;
                    case 'map_kd':
                        // Diffuse texture map
                        setMapForType("map", value);
                        break;
                    case 'map_ks':
                        // Specular map
                        setMapForType("specularMap", value);
                        break;
                    case 'map_bump':
                    case 'bump':
                        // Bump texture map
                        setMapForType("bumpMap", value);
                        break;
                    case 'ns':
                        // The specular exponent (defines the focus of the specular highlight)
                        // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.
                        params.shininess = parseFloat(value);
                        break;
                    case 'd':
                        if (value < 1) {
                            params.opacity = value;
                            params.transparent = true;
                        }
                        break;
                    case 'Tr':
                        if (value > 0) {
                            params.opacity = 1 - value;
                            params.transparent = true;
                        }
                        break;
                    default:
                        break;
                }
            }
            this.materials[materialName] = new THREE.MeshPhongMaterial(params);
            return this.materials[materialName];
        },
        getTextureParams: function (value, matParams) {
            var texParams = {
                scale: new THREE.Vector2(1, 1),
                offset: new THREE.Vector2(0, 0)
            };
            var items = value.split(/\s+/);
            var pos;
            pos = items.indexOf('-bm');
            if (pos >= 0) {
                matParams.bumpScale = parseFloat(items[pos + 1]);
                items.splice(pos, 2);
            }
            pos = items.indexOf('-s');
            if (pos >= 0) {
                texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));
                items.splice(pos, 4); // we expect 3 parameters here!
            }
            pos = items.indexOf('-o');
            if (pos >= 0) {
                texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));
                items.splice(pos, 4); // we expect 3 parameters here!
            }
            texParams.url = items.join(' ').trim();
            return texParams;
        },
        loadTexture: function (url, mapping, onLoad, onProgress, onError) {
            var texture;
            var loader = THREE.Loader.Handlers.get(url);
            var manager = (this.manager !== undefined) ? this.manager : THREE.DefaultLoadingManager;
            if (loader === null) {
                loader = new THREE.TextureLoader(manager);
            }
            if (loader.setCrossOrigin)
                loader.setCrossOrigin(this.crossOrigin);
            texture = loader.load(url, onLoad, onProgress, onError);
            if (mapping !== undefined)
                texture.mapping = mapping;
            return texture;
        }
    };
    /* eslint-enable */
    return THREE.MTLLoader;
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = OBJLoader;
function OBJLoader(THREE) {
    /*eslint-disable*/
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    THREE.OBJLoader = function (manager) {
        this.manager = (manager !== undefined) ? manager : THREE.DefaultLoadingManager;
        this.materials = null;
        this.regexp = {
            // v float float float
            vertex_pattern: /^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
            // vn float float float
            normal_pattern: /^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
            // vt float float
            uv_pattern: /^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
            // f vertex vertex vertex
            face_vertex: /^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,
            // f vertex/uv vertex/uv vertex/uv
            face_vertex_uv: /^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,
            // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
            face_vertex_uv_normal: /^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,
            // f vertex//normal vertex//normal vertex//normal
            face_vertex_normal: /^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,
            // o object_name | g group_name
            object_pattern: /^[og]\s*(.+)?/,
            // s boolean
            smoothing_pattern: /^s\s+(\d+|on|off)/,
            // mtllib file_reference
            material_library_pattern: /^mtllib /,
            // usemtl material_name
            material_use_pattern: /^usemtl /
        };
    };
    THREE.OBJLoader.prototype = {
        constructor: THREE.OBJLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(this.path);
            loader.load(url, function (text) {
                onLoad(scope.parse(text));
            }, onProgress, onError);
        },
        setPath: function (value) {
            this.path = value;
        },
        setMaterials: function (materials) {
            this.materials = materials;
        },
        _createParserState: function () {
            var state = {
                objects: [],
                object: {},
                vertices: [],
                normals: [],
                uvs: [],
                materialLibraries: [],
                startObject: function (name, fromDeclaration) {
                    // If the current object (initial from reset) is not from a g/o declaration in the parsed
                    // file. We need to use it for the first parsed g/o to keep things in sync.
                    if (this.object && this.object.fromDeclaration === false) {
                        this.object.name = name;
                        this.object.fromDeclaration = (fromDeclaration !== false);
                        return;
                    }
                    var previousMaterial = (this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined);
                    if (this.object && typeof this.object._finalize === 'function') {
                        this.object._finalize(true);
                    }
                    this.object = {
                        name: name || '',
                        fromDeclaration: (fromDeclaration !== false),
                        geometry: {
                            vertices: [],
                            normals: [],
                            uvs: []
                        },
                        materials: [],
                        smooth: true,
                        startMaterial: function (name, libraries) {
                            var previous = this._finalize(false);
                            // New usemtl declaration overwrites an inherited material, except if faces were declared
                            // after the material, then it must be preserved for proper MultiMaterial continuation.
                            if (previous && (previous.inherited || previous.groupCount <= 0)) {
                                this.materials.splice(previous.index, 1);
                            }
                            var material = {
                                index: this.materials.length,
                                name: name || '',
                                mtllib: (Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : ''),
                                smooth: (previous !== undefined ? previous.smooth : this.smooth),
                                groupStart: (previous !== undefined ? previous.groupEnd : 0),
                                groupEnd: -1,
                                groupCount: -1,
                                inherited: false,
                                clone: function (index) {
                                    var cloned = {
                                        index: (typeof index === 'number' ? index : this.index),
                                        name: this.name,
                                        mtllib: this.mtllib,
                                        smooth: this.smooth,
                                        groupStart: 0,
                                        groupEnd: -1,
                                        groupCount: -1,
                                        inherited: false
                                    };
                                    cloned.clone = this.clone.bind(cloned);
                                    return cloned;
                                }
                            };
                            this.materials.push(material);
                            return material;
                        },
                        currentMaterial: function () {
                            if (this.materials.length > 0) {
                                return this.materials[this.materials.length - 1];
                            }
                            return undefined;
                        },
                        _finalize: function (end) {
                            var lastMultiMaterial = this.currentMaterial();
                            if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {
                                lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;
                                lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;
                                lastMultiMaterial.inherited = false;
                            }
                            // Ignore objects tail materials if no face declarations followed them before a new o/g started.
                            if (end && this.materials.length > 1) {
                                for (var mi = this.materials.length - 1; mi >= 0; mi--) {
                                    if (this.materials[mi].groupCount <= 0) {
                                        this.materials.splice(mi, 1);
                                    }
                                }
                            }
                            // Guarantee at least one empty material, this makes the creation later more straight forward.
                            if (end && this.materials.length === 0) {
                                this.materials.push({
                                    name: '',
                                    smooth: this.smooth
                                });
                            }
                            return lastMultiMaterial;
                        }
                    };
                    // Inherit previous objects material.
                    // Spec tells us that a declared material must be set to all objects until a new material is declared.
                    // If a usemtl declaration is encountered while this new object is being parsed, it will
                    // overwrite the inherited material. Exception being that there was already face declarations
                    // to the inherited material, then it will be preserved for proper MultiMaterial continuation.
                    if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === "function") {
                        var declared = previousMaterial.clone(0);
                        declared.inherited = true;
                        this.object.materials.push(declared);
                    }
                    this.objects.push(this.object);
                },
                finalize: function () {
                    if (this.object && typeof this.object._finalize === 'function') {
                        this.object._finalize(true);
                    }
                },
                parseVertexIndex: function (value, len) {
                    var index = parseInt(value, 10);
                    return (index >= 0 ? index - 1 : index + len / 3) * 3;
                },
                parseNormalIndex: function (value, len) {
                    var index = parseInt(value, 10);
                    return (index >= 0 ? index - 1 : index + len / 3) * 3;
                },
                parseUVIndex: function (value, len) {
                    var index = parseInt(value, 10);
                    return (index >= 0 ? index - 1 : index + len / 2) * 2;
                },
                addVertex: function (a, b, c) {
                    var src = this.vertices;
                    var dst = this.object.geometry.vertices;
                    dst.push(src[a + 0]);
                    dst.push(src[a + 1]);
                    dst.push(src[a + 2]);
                    dst.push(src[b + 0]);
                    dst.push(src[b + 1]);
                    dst.push(src[b + 2]);
                    dst.push(src[c + 0]);
                    dst.push(src[c + 1]);
                    dst.push(src[c + 2]);
                },
                addVertexLine: function (a) {
                    var src = this.vertices;
                    var dst = this.object.geometry.vertices;
                    dst.push(src[a + 0]);
                    dst.push(src[a + 1]);
                    dst.push(src[a + 2]);
                },
                addNormal: function (a, b, c) {
                    var src = this.normals;
                    var dst = this.object.geometry.normals;
                    dst.push(src[a + 0]);
                    dst.push(src[a + 1]);
                    dst.push(src[a + 2]);
                    dst.push(src[b + 0]);
                    dst.push(src[b + 1]);
                    dst.push(src[b + 2]);
                    dst.push(src[c + 0]);
                    dst.push(src[c + 1]);
                    dst.push(src[c + 2]);
                },
                addUV: function (a, b, c) {
                    var src = this.uvs;
                    var dst = this.object.geometry.uvs;
                    dst.push(src[a + 0]);
                    dst.push(src[a + 1]);
                    dst.push(src[b + 0]);
                    dst.push(src[b + 1]);
                    dst.push(src[c + 0]);
                    dst.push(src[c + 1]);
                },
                addUVLine: function (a) {
                    var src = this.uvs;
                    var dst = this.object.geometry.uvs;
                    dst.push(src[a + 0]);
                    dst.push(src[a + 1]);
                },
                addFace: function (a, b, c, d, ua, ub, uc, ud, na, nb, nc, nd) {
                    var vLen = this.vertices.length;
                    var ia = this.parseVertexIndex(a, vLen);
                    var ib = this.parseVertexIndex(b, vLen);
                    var ic = this.parseVertexIndex(c, vLen);
                    var id;
                    if (d === undefined) {
                        this.addVertex(ia, ib, ic);
                    }
                    else {
                        id = this.parseVertexIndex(d, vLen);
                        this.addVertex(ia, ib, id);
                        this.addVertex(ib, ic, id);
                    }
                    if (ua !== undefined) {
                        var uvLen = this.uvs.length;
                        ia = this.parseUVIndex(ua, uvLen);
                        ib = this.parseUVIndex(ub, uvLen);
                        ic = this.parseUVIndex(uc, uvLen);
                        if (d === undefined) {
                            this.addUV(ia, ib, ic);
                        }
                        else {
                            id = this.parseUVIndex(ud, uvLen);
                            this.addUV(ia, ib, id);
                            this.addUV(ib, ic, id);
                        }
                    }
                    if (na !== undefined) {
                        // Normals are many times the same. If so, skip function call and parseInt.
                        var nLen = this.normals.length;
                        ia = this.parseNormalIndex(na, nLen);
                        ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);
                        ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);
                        if (d === undefined) {
                            this.addNormal(ia, ib, ic);
                        }
                        else {
                            id = this.parseNormalIndex(nd, nLen);
                            this.addNormal(ia, ib, id);
                            this.addNormal(ib, ic, id);
                        }
                    }
                },
                addLineGeometry: function (vertices, uvs) {
                    this.object.geometry.type = 'Line';
                    var vLen = this.vertices.length;
                    var uvLen = this.uvs.length;
                    for (var vi = 0, l = vertices.length; vi < l; vi++) {
                        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));
                    }
                    for (var uvi = 0, l = uvs.length; uvi < l; uvi++) {
                        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));
                    }
                }
            };
            state.startObject('', false);
            return state;
        },
        parse: function (text) {
            console.time('OBJLoader');
            var state = this._createParserState();
            if (text.indexOf('\r\n') !== -1) {
                // This is faster than String.split with regex that splits on both
                text = text.replace(/\r\n/g, '\n');
            }
            if (text.indexOf('\\\n') !== -1) {
                // join lines separated by a line continuation character (\)
                text = text.replace(/\\\n/g, '');
            }
            var lines = text.split('\n');
            var line = '', lineFirstChar = '', lineSecondChar = '';
            var lineLength = 0;
            var result = [];
            // Faster to just trim left side of the line. Use if available.
            var trimLeft = (typeof ''.trimLeft === 'function');
            for (var i = 0, l = lines.length; i < l; i++) {
                line = lines[i];
                line = trimLeft ? line.trimLeft() : line.trim();
                lineLength = line.length;
                if (lineLength === 0)
                    continue;
                lineFirstChar = line.charAt(0);
                // @todo invoke passed in handler if any
                if (lineFirstChar === '#')
                    continue;
                if (lineFirstChar === 'v') {
                    lineSecondChar = line.charAt(1);
                    if (lineSecondChar === ' ' && (result = this.regexp.vertex_pattern.exec(line)) !== null) {
                        // 0                  1      2      3
                        // ["v 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
                        state.vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
                    }
                    else if (lineSecondChar === 'n' && (result = this.regexp.normal_pattern.exec(line)) !== null) {
                        // 0                   1      2      3
                        // ["vn 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
                        state.normals.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
                    }
                    else if (lineSecondChar === 't' && (result = this.regexp.uv_pattern.exec(line)) !== null) {
                        // 0               1      2
                        // ["vt 0.1 0.2", "0.1", "0.2"]
                        state.uvs.push(parseFloat(result[1]), parseFloat(result[2]));
                    }
                    else {
                        throw new Error("Unexpected vertex/normal/uv line: '" + line + "'");
                    }
                }
                else if (lineFirstChar === "f") {
                    if ((result = this.regexp.face_vertex_uv_normal.exec(line)) !== null) {
                        // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
                        // 0                        1    2    3    4    5    6    7    8    9   10         11         12
                        // ["f 1/1/1 2/2/2 3/3/3", "1", "1", "1", "2", "2", "2", "3", "3", "3", undefined, undefined, undefined]
                        state.addFace(result[1], result[4], result[7], result[10], result[2], result[5], result[8], result[11], result[3], result[6], result[9], result[12]);
                    }
                    else if ((result = this.regexp.face_vertex_uv.exec(line)) !== null) {
                        // f vertex/uv vertex/uv vertex/uv
                        // 0                  1    2    3    4    5    6   7          8
                        // ["f 1/1 2/2 3/3", "1", "1", "2", "2", "3", "3", undefined, undefined]
                        state.addFace(result[1], result[3], result[5], result[7], result[2], result[4], result[6], result[8]);
                    }
                    else if ((result = this.regexp.face_vertex_normal.exec(line)) !== null) {
                        // f vertex//normal vertex//normal vertex//normal
                        // 0                     1    2    3    4    5    6   7          8
                        // ["f 1//1 2//2 3//3", "1", "1", "2", "2", "3", "3", undefined, undefined]
                        state.addFace(result[1], result[3], result[5], result[7], undefined, undefined, undefined, undefined, result[2], result[4], result[6], result[8]);
                    }
                    else if ((result = this.regexp.face_vertex.exec(line)) !== null) {
                        // f vertex vertex vertex
                        // 0            1    2    3   4
                        // ["f 1 2 3", "1", "2", "3", undefined]
                        state.addFace(result[1], result[2], result[3], result[4]);
                    }
                    else {
                        throw new Error("Unexpected face line: '" + line + "'");
                    }
                }
                else if (lineFirstChar === "l") {
                    var lineParts = line.substring(1).trim().split(" ");
                    var lineVertices = [], lineUVs = [];
                    if (line.indexOf("/") === -1) {
                        lineVertices = lineParts;
                    }
                    else {
                        for (var li = 0, llen = lineParts.length; li < llen; li++) {
                            var parts = lineParts[li].split("/");
                            if (parts[0] !== "")
                                lineVertices.push(parts[0]);
                            if (parts[1] !== "")
                                lineUVs.push(parts[1]);
                        }
                    }
                    state.addLineGeometry(lineVertices, lineUVs);
                }
                else if ((result = this.regexp.object_pattern.exec(line)) !== null) {
                    // o object_name
                    // or
                    // g group_name
                    // WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869
                    // var name = result[ 0 ].substr( 1 ).trim();
                    var name = (" " + result[0].substr(1).trim()).substr(1);
                    state.startObject(name);
                }
                else if (this.regexp.material_use_pattern.test(line)) {
                    // material
                    state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);
                }
                else if (this.regexp.material_library_pattern.test(line)) {
                    // mtl file
                    state.materialLibraries.push(line.substring(7).trim());
                }
                else if ((result = this.regexp.smoothing_pattern.exec(line)) !== null) {
                    // smooth shading
                    // @todo Handle files that have varying smooth values for a set of faces inside one geometry,
                    // but does not define a usemtl for each face set.
                    // This should be detected and a dummy material created (later MultiMaterial and geometry groups).
                    // This requires some care to not create extra material on each smooth value for "normal" obj files.
                    // where explicit usemtl defines geometry groups.
                    // Example asset: examples/models/obj/cerberus/Cerberus.obj
                    var value = result[1].trim().toLowerCase();
                    state.object.smooth = (value === '1' || value === 'on');
                    var material = state.object.currentMaterial();
                    if (material) {
                        material.smooth = state.object.smooth;
                    }
                }
                else {
                    // Handle null terminated files without exception
                    if (line === '\0')
                        continue;
                    throw new Error("Unexpected line: '" + line + "'");
                }
            }
            state.finalize();
            var container = new THREE.Group();
            container.materialLibraries = [].concat(state.materialLibraries);
            for (var i = 0, l = state.objects.length; i < l; i++) {
                var object = state.objects[i];
                var geometry = object.geometry;
                var materials = object.materials;
                var isLine = (geometry.type === 'Line');
                // Skip o/g line declarations that did not follow with any faces
                if (geometry.vertices.length === 0)
                    continue;
                var buffergeometry = new THREE.BufferGeometry();
                buffergeometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(geometry.vertices), 3));
                if (geometry.normals.length > 0) {
                    buffergeometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(geometry.normals), 3));
                }
                else {
                    buffergeometry.computeVertexNormals();
                }
                if (geometry.uvs.length > 0) {
                    buffergeometry.addAttribute('uv', new THREE.BufferAttribute(new Float32Array(geometry.uvs), 2));
                }
                // Create materials
                var createdMaterials = [];
                for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {
                    var sourceMaterial = materials[mi];
                    var material = undefined;
                    if (this.materials !== null) {
                        material = this.materials.create(sourceMaterial.name);
                        // mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.
                        if (isLine && material && !(material instanceof THREE.LineBasicMaterial)) {
                            var materialLine = new THREE.LineBasicMaterial();
                            materialLine.copy(material);
                            material = materialLine;
                        }
                    }
                    if (!material) {
                        material = (!isLine ? new THREE.MeshPhongMaterial() : new THREE.LineBasicMaterial());
                        material.name = sourceMaterial.name;
                    }
                    material.shading = sourceMaterial.smooth ? THREE.SmoothShading : THREE.FlatShading;
                    createdMaterials.push(material);
                }
                // Create mesh
                var mesh;
                if (createdMaterials.length > 1) {
                    for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {
                        var sourceMaterial = materials[mi];
                        buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);
                    }
                    mesh = (!isLine ? new THREE.Mesh(buffergeometry, createdMaterials) : new THREE.LineSegments(buffergeometry, createdMaterials));
                }
                else {
                    mesh = (!isLine ? new THREE.Mesh(buffergeometry, createdMaterials[0]) : new THREE.LineSegments(buffergeometry, createdMaterials[0]));
                }
                mesh.name = object.name;
                container.add(mesh);
            }
            console.timeEnd('OBJLoader');
            return container;
        }
    };
    /* eslint-enable */
    return THREE.OBJLoader;
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 27 */,
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(9);


/***/ })
],[28]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93d3cvanMvQXVkaW9NYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3d3dy9qcy9Db250cm9sbGVycy9Db250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3d3dy9qcy9mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi93d3cvanMvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi93d3cvanMvRGVsdGEuanMiLCJ3ZWJwYWNrOi8vLy4vd3d3L2pzL0xldmVsLmpzIiwid2VicGFjazovLy8uL3d3dy9qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi93d3cvanMvQmVhdC5qcyIsIndlYnBhY2s6Ly8vLi93d3cvanMvQ29udHJvbGxlcnMvQ29udHJvbGxlckNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vd3d3L2pzL0NvbnRyb2xsZXJzL0tleWJvYXJkQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi93d3cvanMvQ29udHJvbGxlcnMvTWV0YUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vd3d3L2pzL0NvbnRyb2xsZXJzL1RvdWNoQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi93d3cvanMvRGlzcGxheS5qcyIsIndlYnBhY2s6Ly8vLi93d3cvanMvR2FtZS5qcyIsIndlYnBhY2s6Ly8vLi93d3cvanMvUGxheWVyLmpzIiwid2VicGFjazovLy8uL3d3dy9qcy9sZXZlbHMuanMiLCJ3ZWJwYWNrOi8vLy4vd3d3L2pzL2xldmVscy9sZXZlbDAxLmpzIiwid2VicGFjazovLy8uL3d3dy9qcy9sZXZlbHMvcGF0dGVybnMuanMiLCJ3ZWJwYWNrOi8vLy4vd3d3L2pzL2xldmVscy9wYXR0ZXJucy9yZWFkeS5qcyIsIndlYnBhY2s6Ly8vLi93d3cvanMvbXVzaWMuanMiLCJ3ZWJwYWNrOi8vLy4vd3d3L2pzL3RleHRWYXJpYXRpb25zLmpzIiwid2VicGFjazovLy8uL3d3dy9qcy90ZXh0dXJlcy5qcyIsIndlYnBhY2s6Ly8vLi93d3cvdmVuZG9yL3RocmVlL2xvYWRlcnMvTVRMTG9hZGVyLmpzIiwid2VicGFjazovLy8uL3d3dy92ZW5kb3IvdGhyZWUvbG9hZGVycy9PQkpMb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUZBQTRDLGdDQUFnQyxFQUFFO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ087QUFDUjtBQUNBO0FBQ0EsMkNBQTJDLG1nSTs7Ozs7OztBQ2hIM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwyQ0FBMkMsbWpCOzs7Ozs7O0FDZjNDO0FBQ0EsSUFBSTtBQUNKLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQywrcUs7Ozs7Ozs7QUNuUzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLCtCQUErQixZQUFZO0FBQzNDLGtDQUFrQyxjQUFjO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLCtCQUErQixXQUFXO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsMm5GOzs7Ozs7Ozs7QUNsRDNDO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLE9BQU87QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDJDQUEyQywyeUQ7Ozs7Ozs7Ozs7O0FDN0MzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsUUFBUTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixRQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQSx1QkFBdUIsa0JBQWtCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFNBQVM7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGtCQUFrQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxXQUFXO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxpQkFBaUIsRUFBRTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsMkRBQTJELGFBQWEsRUFBRTtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELG9CQUFvQixFQUFFO0FBQzdFLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esb0NBQW9DLG9CQUFvQjtBQUN4RDtBQUNBLCtEQUErRCxvQ0FBb0M7QUFDbkc7QUFDQTtBQUNBO0FBQ0EsU0FBUyxFQUFFLEVBQUUsRUFBRSxFQUFFO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsZUFBZTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFdBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxnREFBZ0Q7QUFDbEg7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsZ0RBQWdEO0FBQ2hGO0FBQ0EsMENBQTBDLFFBQVE7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsK3FvQjs7Ozs7Ozs7Ozs7Ozs7OztBQy9VM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQWtCLDBFQUEwRTtBQUM1Rix1RUFBa0IsaURBQWlEO0FBQ25FLHVFQUFrQiw0Q0FBNEM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUFxQiwyQkFBMkI7QUFDaEQ7QUFDQSwyQ0FBMkMsdS9DOzs7Ozs7O0FDdEIzQztBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwyQ0FBMkMsMndFOzs7Ozs7OztBQzFFM0M7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGtCQUFrQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxzRkFBaUMsaURBQWlEO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELCtCQUErQixFQUFFO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsUUFBUTtBQUNuQztBQUNBO0FBQ0Esd0NBQXdDLFFBQVE7QUFDaEQ7QUFDQSxtQ0FBbUMsUUFBUTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDJDQUEyQyx1bkc7Ozs7Ozs7QUM1RDNDO0FBQUE7QUFDQTtBQUNBLFVBQVUsZ0JBQWdCLHNDQUFzQyxpQkFBaUIsRUFBRTtBQUNuRix5QkFBeUIsdURBQXVEO0FBQ2hGO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRiw2QkFBNkIsRUFBRTtBQUNySCxrRkFBa0YsMkJBQTJCLEVBQUU7QUFDL0csa0VBQWtFLGdDQUFnQyxFQUFFO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMkNBQTJDLHVpRjs7Ozs7Ozs7QUNsRTNDO0FBQUE7QUFDQTtBQUNBLFVBQVUsZ0JBQWdCLHNDQUFzQyxpQkFBaUIsRUFBRTtBQUNuRix5QkFBeUIsdURBQXVEO0FBQ2hGO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGdDQUFnQyxFQUFFO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMkNBQTJDLDJxSDs7Ozs7Ozs7QUMxRjNDO0FBQUE7QUFDQTtBQUNBLFVBQVUsZ0JBQWdCLHNDQUFzQyxpQkFBaUIsRUFBRTtBQUNuRix5QkFBeUIsdURBQXVEO0FBQ2hGO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLGdDQUFnQyxFQUFFO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMkNBQTJDLG0xSDs7Ozs7OztBQ3BHM0M7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ087QUFDUjtBQUNBO0FBQ0EsMkNBQTJDLCsvRDs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcEQzQztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCw0QkFBNEIsRUFBRTtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDZDQUE2QztBQUN6RSwwQkFBMEIsc0NBQXNDO0FBQ2hFLDBCQUEwQix3Q0FBd0M7QUFDbEUsNEJBQTRCLHlDQUF5QztBQUNyRSw2QkFBNkIsMENBQTBDO0FBQ3ZFLDZCQUE2Qiw0Q0FBNEM7QUFDekUsOEJBQThCLDJDQUEyQztBQUN6RSw2QkFBNkI7QUFDN0IsaUJBQWlCO0FBQ2pCO0FBQ0EscUJBQXFCLCtDQUErQztBQUNwRSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsV0FBVztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RkFBd0Qsa0VBQWtFO0FBQzFIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0ZBQTJELG9CQUFvQjtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQscURBQXFEO0FBQy9HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQSxzUEFBOEssb0RBQW9EO0FBQ2xPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxhQUFhO0FBQzlDO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBOEIsc0VBQXNFO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw0Q0FBNEMseUJBQXlCLEVBQUU7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0tBQXNLO0FBQ3RLO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xELGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwyQ0FBMkMsMjYrQjs7Ozs7Ozs7Ozs7OztBQzdsQjNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixXQUFXO0FBQzFDO0FBQ0E7QUFDQSwyQkFBMkIsT0FBTztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFdBQVc7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsT0FBTztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixXQUFXO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwyQ0FBMkMsK2hkOzs7Ozs7OztBQzVQM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsMk47Ozs7Ozs7OztBQ0ozQztBQUNBO0FBQ0E7QUFDQSxZQUFZLDBDQUEwQztBQUN0RCxlQUFlLG9DQUFvQztBQUNuRCxrQkFBa0IsOEJBQThCO0FBQ2hELHFCQUFxQix3QkFBd0I7QUFDN0Msd0JBQXdCLGtCQUFrQjtBQUMxQywyQkFBMkIsWUFBWTtBQUN2Qyw4QkFBOEIsTUFBTTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxZQUFZLDBDQUEwQztBQUN0RCxlQUFlLG9DQUFvQztBQUNuRCxrQkFBa0IsOEJBQThCO0FBQ2hELHFCQUFxQix3QkFBd0I7QUFDN0Msd0JBQXdCLGtCQUFrQjtBQUMxQywyQkFBMkIsWUFBWTtBQUN2Qyw4QkFBOEIsTUFBTTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQywreVI7Ozs7Ozs7O0FDNU0zQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsdUJBQXVCO0FBQ25EO0FBQ0E7QUFDQSw0REFBNEQsNEJBQTRCLEVBQUU7QUFDMUY7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsbXBCOzs7Ozs7O0FDcEIzQztBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsMlg7Ozs7Ozs7QUNSM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsdVQ7Ozs7Ozs7QUNQM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLDJDQUEyQywrekI7Ozs7Ozs7Ozs7QUM5QjNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGNBQWM7QUFDakM7QUFDQSx1QkFBdUIsaUJBQWlCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLElBQUk7QUFDTDtBQUNBLDJDQUEyQyx1ckU7Ozs7Ozs7O0FDMUIzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQixtQkFBbUIsU0FBUztBQUM1QixtQkFBbUIsU0FBUztBQUM1QixtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUIsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsa0JBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQywyeGI7Ozs7Ozs7O0FDdlYzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSxTQUFTO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxRQUFRO0FBQ2pFO0FBQ0E7QUFDQSxxREFBcUQsU0FBUztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxPQUFPO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxXQUFXO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxPQUFPO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsWUFBWTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsWUFBWTtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsbW00QiIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXYXVkLCBXYXVkU291bmQgfSBmcm9tIFwid2F1ZC5qc1wiO1xudmFyIEF1ZGlvTWFuYWdlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXVkaW9NYW5hZ2VyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9zb3VuZHMgPSB7fTtcbiAgICAgICAgdGhpcy5fYXV0b1BsYXlTb3VuZHMgPSBbXTtcbiAgICAgICAgdGhpcy5fbXV0ZWQgPSBmYWxzZTtcbiAgICAgICAgV2F1ZC5pbml0KCk7XG4gICAgICAgIFdhdWQuZW5hYmxlVG91Y2hVbmxvY2soZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMub25Ub3VjaFVubG9ja2VkKCk7IH0pO1xuICAgICAgICBXYXVkLmF1dG9NdXRlKCk7XG4gICAgfVxuICAgIEF1ZGlvTWFuYWdlci5wcm90b3R5cGUub25Ub3VjaFVubG9ja2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9hdXRvUGxheVNvdW5kcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VuZCkge1xuICAgICAgICAgICAgdmFyIHRoZVNvdW5kID0gX3RoaXMuX3NvdW5kc1tzb3VuZF07XG4gICAgICAgICAgICBpZiAoIXRoZVNvdW5kLmlzUGxheWluZygpKSB7XG4gICAgICAgICAgICAgICAgdGhlU291bmQucGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdWRpb01hbmFnZXIucHJvdG90eXBlLCBcInZvbHVtZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFdhdWQuZ2V0Vm9sdW1lKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgIFdhdWQuc2V0Vm9sdW1lKHYpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXVkaW9NYW5hZ2VyLnByb3RvdHlwZSwgXCJtdXRlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbXV0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgdGhpcy5fbXV0ZSA9IHY7XG4gICAgICAgICAgICBXYXVkLm11dGUodik7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEF1ZGlvTWFuYWdlci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoc291bmQpIHtcbiAgICAgICAgaWYgKCFzb3VuZCkge1xuICAgICAgICAgICAgV2F1ZC5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRoZVNvdW5kID0gdGhpcy5fc291bmRzW3NvdW5kXTtcbiAgICAgICAgICAgIGlmICh0aGVTb3VuZCkge1xuICAgICAgICAgICAgICAgIHRoZVNvdW5kLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEF1ZGlvTWFuYWdlci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIChzb3VuZCkge1xuICAgICAgICBpZiAoIXNvdW5kKSB7XG4gICAgICAgICAgICBXYXVkLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0aGVTb3VuZCA9IHRoaXMuX3NvdW5kc1tzb3VuZF07XG4gICAgICAgICAgICBpZiAodGhlU291bmQpIHtcbiAgICAgICAgICAgICAgICB0aGVTb3VuZC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEF1ZGlvTWFuYWdlci5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uIChzb3VuZCwgYXQpIHtcbiAgICAgICAgaWYgKGF0ID09PSB2b2lkIDApIHsgYXQgPSAwOyB9XG4gICAgICAgIHZhciB0aGVTb3VuZCA9IHRoaXMuX3NvdW5kc1tzb3VuZF07XG4gICAgICAgIGlmICh0aGVTb3VuZCkge1xuICAgICAgICAgICAgdGhlU291bmQuc2V0VGltZShhdCk7XG4gICAgICAgICAgICB0aGVTb3VuZC5wbGF5KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEF1ZGlvTWFuYWdlci5wcm90b3R5cGUuaXNQbGF5aW5nID0gZnVuY3Rpb24gKHNvdW5kKSB7XG4gICAgICAgIHZhciB0aGVTb3VuZCA9IHRoaXMuX3NvdW5kc1tzb3VuZF07XG4gICAgICAgIGlmICh0aGVTb3VuZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoZVNvdW5kLmlzUGxheWluZygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBdWRpb01hbmFnZXIucHJvdG90eXBlLmlzUmVhZHkgPSBmdW5jdGlvbiAoc291bmQpIHtcbiAgICAgICAgdmFyIHRoZVNvdW5kID0gdGhpcy5fc291bmRzW3NvdW5kXTtcbiAgICAgICAgaWYgKHRoZVNvdW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhlU291bmQuaXNSZWFkeSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBdWRpb01hbmFnZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgbmFtZSA9IF9iLm5hbWUsIHVybCA9IF9iLnVybCwgX2MgPSBfYi5hdXRvcGxheSwgYXV0b3BsYXkgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYywgX2QgPSBfYi5sb29wLCBsb29wID0gX2QgPT09IHZvaWQgMCA/IGZhbHNlIDogX2QsIF9lID0gX2Iudm9sdW1lLCB2b2x1bWUgPSBfZSA9PT0gdm9pZCAwID8gMS4wIDogX2U7XG4gICAgICAgIHZhciBzb3VuZCA9IG5ldyBXYXVkU291bmQodXJsLCB7XG4gICAgICAgICAgICBhdXRvcGxheTogYXV0b3BsYXksXG4gICAgICAgICAgICBsb29wOiBsb29wLFxuICAgICAgICAgICAgdm9sdW1lOiB2b2x1bWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLl9zb3VuZHNbbmFtZV0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zb3VuZHNbbmFtZV0uaXNQbGF5aW5nKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zb3VuZHNbbmFtZV0uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NvdW5kc1tuYW1lXSA9IHNvdW5kO1xuICAgICAgICBpZiAoYXV0b3BsYXkpIHtcbiAgICAgICAgICAgIHRoaXMuX2F1dG9QbGF5U291bmRzLnB1c2gobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdW5kO1xuICAgIH07XG4gICAgcmV0dXJuIEF1ZGlvTWFuYWdlcjtcbn0oKSk7XG5leHBvcnQgeyBBdWRpb01hbmFnZXIgfTtcbnZhciBhdWRpb01hbmFnZXIgPSBuZXcgQXVkaW9NYW5hZ2VyKCk7XG5leHBvcnQgZGVmYXVsdCBhdWRpb01hbmFnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lRWFZrYVc5TllXNWhaMlZ5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lRWFZrYVc5TllXNWhaMlZ5TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVVVzVTBGQlV5eEZRVUZGTEUxQlFVMHNVMEZCVXl4RFFVRkRPMEZCUlRGRE8wbEJRMGs3VVVGQlFTeHBRa0ZSUXp0UlFWQkhMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzUlVGQlJTeERRVUZETzFGQlEyeENMRWxCUVVrc1EwRkJReXhsUVVGbExFZEJRVWNzUlVGQlJTeERRVUZETzFGQlF6RkNMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETzFGQlJYQkNMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU5hTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eGpRVUZOTEU5QlFVRXNTMEZCU1N4RFFVRkRMR1ZCUVdVc1JVRkJSU3hGUVVGMFFpeERRVUZ6UWl4RFFVRkRMRU5CUVVNN1VVRkRja1FzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMGxCUTNCQ0xFTkJRVU03U1VGRlJDeHpRMEZCWlN4SFFVRm1PMUZCUVVFc2FVSkJUME03VVVGT1J5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFdEJRVXM3V1VGRE9VSXNTVUZCU1N4UlFVRlJMRWRCUVVjc1MwRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0WlFVTnVReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEzaENMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dFpRVU53UWl4RFFVRkRPMUZCUTB3c1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFVDeERRVUZETzBsQlJVUXNjMEpCUVVrc1owTkJRVTA3WVVGSFZqdFpRVU5KTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU03VVVGRE5VSXNRMEZCUXp0aFFVeEVMRlZCUVZjc1EwRkJRenRaUVVOU0xFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRkRUlzUTBGQlF6czdPMDlCUVVFN1NVRkxSQ3h6UWtGQlNTdzRRa0ZCU1R0aFFVbFNPMWxCUTBrc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTTdVVUZEZEVJc1EwRkJRenRoUVU1RUxGVkJRVk1zUTBGQlF6dFpRVU5PTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJRMllzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOcVFpeERRVUZET3pzN1QwRkJRVHRKUVV0RUxEUkNRVUZMTEVkQlFVd3NWVUZCVFN4TFFVRkxPMUZCUTFBc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTFRc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzFGQlEycENMRU5CUVVNN1VVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU5LTEVsQlFVa3NVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdXVUZEYmtNc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRXQ3hSUVVGUkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdXVUZEY2tJc1EwRkJRenRSUVVOTUxFTkJRVU03U1VGRFRDeERRVUZETzBsQlJVUXNNa0pCUVVrc1IwRkJTaXhWUVVGTExFdEJRVXM3VVVGRFRpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRFZDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1VVRkRhRUlzUTBGQlF6dFJRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUTBvc1NVRkJTU3hSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRaUVVOdVF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU5ZTEZGQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenRaUVVOd1FpeERRVUZETzFGQlEwd3NRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkZSQ3d5UWtGQlNTeEhRVUZLTEZWQlFVc3NTMEZCU3l4RlFVRkZMRVZCUVUwN1VVRkJUaXh0UWtGQlFTeEZRVUZCTEUxQlFVMDdVVUZEWkN4SlFVRkpMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUTI1RExFVkJRVVVzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRXQ3hSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMWxCUTNKQ0xGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0UlFVTndRaXhEUVVGRE8wbEJRMHdzUTBGQlF6dEpRVVZFTEdkRFFVRlRMRWRCUVZRc1ZVRkJWU3hMUVVGTE8xRkJRMWdzU1VGQlNTeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dFJRVU51UXl4RlFVRkZMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlExZ3NUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF6dFJRVU5vUXl4RFFVRkRPMUZCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRFNpeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRPMUZCUTJwQ0xFTkJRVU03U1VGRFRDeERRVUZETzBsQlJVUXNPRUpCUVU4c1IwRkJVQ3hWUVVGUkxFdEJRVXM3VVVGRFZDeEpRVUZKTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFGQlEyNURMRVZCUVVVc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEV0N4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzFGQlF6bENMRU5CUVVNN1VVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU5LTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkRha0lzUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZGUkN3d1FrRkJSeXhIUVVGSUxGVkJRVWtzUlVGQlowVTdXVUZCYUVVc05FSkJRV2RGTEVWQlFUbEVMR05CUVVrc1JVRkJSU3haUVVGSExFVkJRVVVzWjBKQlFXZENMRVZCUVdoQ0xIRkRRVUZuUWl4RlFVRkZMRmxCUVZrc1JVRkJXaXhwUTBGQldTeEZRVUZGTEdOQlFWa3NSVUZCV2l4cFEwRkJXVHRSUVVONlJDeEpRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpMRk5CUVZNc1EwRkJReXhIUVVGSExFVkJRVVU3V1VGRE0wSXNVVUZCVVN4VlFVRkJPMWxCUTFJc1NVRkJTU3hOUVVGQk8xbEJRMG9zVFVGQlRTeFJRVUZCTzFOQlExUXNRMEZCUXl4RFFVRkRPMUZCUTBnc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGNrSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEycERMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1dVRkRPVUlzUTBGQlF6dFJRVU5NTEVOQlFVTTdVVUZEUkN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXp0UlFVTXpRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTFnc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRjRU1zUTBGQlF6dFJRVU5FTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNN1NVRkRha0lzUTBGQlF6dEpRVVZNTEcxQ1FVRkRPMEZCUVVRc1EwRkJReXhCUVhKSFJDeEpRWEZIUXpzN1FVRkZSQ3hKUVVGSkxGbEJRVmtzUjBGQlJ5eEpRVUZKTEZsQlFWa3NSVUZCUlN4RFFVRkRPMEZCUTNSRExHVkJRV1VzV1VGQldTeERRVUZESW4wPVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vd3d3L2pzL0F1ZGlvTWFuYWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29udHJvbGxlcigpIHtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChvd25lcikge1xuICAgICAgICBpZiAoIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl9vd25lciA9IG93bmVyO1xuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgcmV0dXJuIENvbnRyb2xsZXI7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVEyOXVkSEp2Ykd4bGNpNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWtOdmJuUnliMnhzWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRMEU3U1VGRFNUdFJRVU5KTEVsQlFVa3NRMEZCUXl4WlFVRlpMRWRCUVVjc1MwRkJTeXhEUVVGRE8wbEJRemxDTEVOQlFVTTdTVUZGUkN4NVFrRkJTU3hIUVVGS0xGVkJRVXNzUzBGQlN6dFJRVU5PTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEY2tJc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTTdXVUZEY0VJc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdXVUZEZWtJc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF6dFJRVU5vUWl4RFFVRkRPMUZCUTBRc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dEpRVU5xUWl4RFFVRkRPMGxCUTB3c2FVSkJRVU03UVVGQlJDeERRVUZETEVGQllrUXNTVUZoUXlKOVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vd3d3L2pzL0NvbnRyb2xsZXJzL0NvbnRyb2xsZXIuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLypcbiAqIH0gICAgIGFycm93IHRvIHRoZSByaWdodFxuICogeyAgICAgYXJyb3cgdG8gdGhlIGxlZnRcbiAqICEgICAgIHdhcm5pbmcgKGV4Y2xhbWF0aW9uIHBvaW50KVxuICogWCAgICAgcmVhbGx5IGJpZyB3YXJuaW5nIVxuICogIyAgICAgVGhpcyBpcyBnb2luZyB0byBodXJ0LiBKdW1wIGl0IVxuICogXiAgICAgQXV0byBKdW1wXG4gKiArICAgICBUZXJyYWluIHJpc2VzXG4gKiAtICAgICBUZXJyYWluIGxvd2Vyc1xuICogPiAgICAgQXV0byBzcGVlZCB1cFxuICogPCAgICAgQXV0byBzbG93IGRvd25cbiAqIF8gICAgIHN0aWNrLWluLXRoZS1tdWQgKHJlYWxseSBzbG93KVxuICogcmVhZHkgUkVBRFlcbiovXG52YXIgQUNUSU9OID0ge1xuICAgIE5PTkU6IDAsXG4gICAgSlVNUDogMTAsXG4gICAgU1BFRURfVVA6IDIwLFxuICAgIFNMT1dfRE9XTjogMzAsXG4gICAgUkVBTExZX1NMT1c6IDMxLFxuICAgIERJRTogOTksXG59O1xudmFyIGZsYWdzID0ge1xuICAgIFwiI1wiOiB7XG4gICAgICAgIGFjdGlvbjogQUNUSU9OLkRJRSxcbiAgICAgICAgY29sb3JzOiBbMHhmZjAwMDAsIDB4ZTAwMDAwXSxcbiAgICAgICAgbmFtZTogXCJkaWUhXCIsXG4gICAgICAgIHRleHR1cmU6IFtcbiAgICAgICAgICAgIFwiX19fX19fX19cIixcbiAgICAgICAgICAgIFwiX1hfX19fWF9cIixcbiAgICAgICAgICAgIFwiX19YX19YX19cIixcbiAgICAgICAgICAgIFwiX19fWFhfX19cIixcbiAgICAgICAgICAgIFwiX19fWFhfX19cIixcbiAgICAgICAgICAgIFwiX19YX19YX19cIixcbiAgICAgICAgICAgIFwiX1hfX19fWF9cIixcbiAgICAgICAgICAgIFwiX19fX19fX19cIixcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIFwiWFwiOiB7XG4gICAgICAgIGFjdGlvbjogQUNUSU9OLk5PTkUsXG4gICAgICAgIGNvbG9yczogWzB4QzA0MDAwLCAweEIwMzAwMF0sXG4gICAgICAgIG5hbWU6IFwibG9vayBvdXQhXCIsXG4gICAgICAgIHRleHR1cmU6IFtcbiAgICAgICAgICAgIFwiX19fX19fX19cIixcbiAgICAgICAgICAgIFwiX19fWFhfX19cIixcbiAgICAgICAgICAgIFwiX19fWFhfX19cIixcbiAgICAgICAgICAgIFwiX19fWFhfX19cIixcbiAgICAgICAgICAgIFwiX19fWFhfX19cIixcbiAgICAgICAgICAgIFwiX19fX19fX19cIixcbiAgICAgICAgICAgIFwiX19fWFhfX19cIixcbiAgICAgICAgICAgIFwiX19fX19fX19cIixcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIFwiIVwiOiB7XG4gICAgICAgIGFjdGlvbjogQUNUSU9OLk5PTkUsXG4gICAgICAgIGNvbG9yczogWzB4QzBDMDAwLCAweEIwQjAwMF0sXG4gICAgICAgIG5hbWU6IFwid2FybmluZ1wiLFxuICAgICAgICB0ZXh0dXJlOiBbXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgICAgICBcIl9fX1hYX19fXCIsXG4gICAgICAgICAgICBcIl9fX1hYX19fXCIsXG4gICAgICAgICAgICBcIl9fX1hYX19fXCIsXG4gICAgICAgICAgICBcIl9fX1hYX19fXCIsXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgICAgICBcIl9fX1hYX19fXCIsXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBcIl5cIjoge1xuICAgICAgICBhY3Rpb246IEFDVElPTi5KVU1QLFxuICAgICAgICBjb2xvcnM6IFsweDgwMDBmZiwgMHg3MDAwZTBdLFxuICAgICAgICBuYW1lOiBcImp1bXBcIixcbiAgICAgICAgdGV4dHVyZTogW1xuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfWFhYWFhYX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfWFhYWFhYX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfWFhYWFhYX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfWFhYWFhYX1wiLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgXCI+XCI6IHtcbiAgICAgICAgYWN0aW9uOiBBQ1RJT04uU1BFRURfVVAsXG4gICAgICAgIGNvbG9yczogWzB4ODBmZjAwLCAweDcwZTAwMF0sXG4gICAgICAgIG5hbWU6IFwic3BlZWQgdXBcIixcbiAgICAgICAgdGV4dHVyZTogW1xuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfX19YWF9fX1wiLFxuICAgICAgICAgICAgXCJfX1hfX1hfX1wiLFxuICAgICAgICAgICAgXCJfWF9fX19YX1wiLFxuICAgICAgICAgICAgXCJfX19YWF9fX1wiLFxuICAgICAgICAgICAgXCJfX1hfX1hfX1wiLFxuICAgICAgICAgICAgXCJfWF9fX19YX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgXCI8XCI6IHtcbiAgICAgICAgYWN0aW9uOiBBQ1RJT04uU0xPV19ET1dOLFxuICAgICAgICBjb2xvcnM6IFsweDgwODA0MCwgMHg3MDcwMzhdLFxuICAgICAgICBuYW1lOiBcInNsb3cgZG93blwiLFxuICAgICAgICB0ZXh0dXJlOiBbXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgICAgICBcIl9YX19fX1hfXCIsXG4gICAgICAgICAgICBcIl9fWF9fWF9fXCIsXG4gICAgICAgICAgICBcIl9fX1hYX19fXCIsXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBfOiB7XG4gICAgICAgIGFjdGlvbjogQUNUSU9OLlJFQUxMWV9TTE9XLFxuICAgICAgICBjb2xvcnM6IFsweGFhNzg0OSwgMHg4YTU4MzldLFxuICAgICAgICBuYW1lOiBcInF1aWNrc2FuZFwiLFxuICAgICAgICB0ZXh0dXJlOiBbXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgICAgICBcIl9YX19fX1hfXCIsXG4gICAgICAgICAgICBcIl9fWF9fWF9fXCIsXG4gICAgICAgICAgICBcIl9fX1hYX19fXCIsXG4gICAgICAgICAgICBcIl9YX19fX1hfXCIsXG4gICAgICAgICAgICBcIl9fWF9fWF9fXCIsXG4gICAgICAgICAgICBcIl9fX1hYX19fXCIsXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBcIntcIjoge1xuICAgICAgICBhY3Rpb246IEFDVElPTi5OT05FLFxuICAgICAgICBjb2xvcnM6IG51bGwsXG4gICAgICAgIG5hbWU6IFwiYXJyb3cgbGVmdFwiLFxuICAgICAgICB0ZXh0dXJlOiBbXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgICAgICBcIl9YWFhYWFhfXCIsXG4gICAgICAgICAgICBcIl9YWF9fX19fXCIsXG4gICAgICAgICAgICBcIl9YX1hfX19fXCIsXG4gICAgICAgICAgICBcIl9YX19YX19fXCIsXG4gICAgICAgICAgICBcIl9YX19fWF9fXCIsXG4gICAgICAgICAgICBcIl9YX19fX1hfXCIsXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBcIn1cIjoge1xuICAgICAgICBhY3Rpb246IEFDVElPTi5OT05FLFxuICAgICAgICBjb2xvcnM6IG51bGwsXG4gICAgICAgIG5hbWU6IFwiYXJyb3cgcmlnaHRcIixcbiAgICAgICAgdGV4dHVyZTogW1xuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfWFhYWFhYX1wiLFxuICAgICAgICAgICAgXCJfX19fX1hYX1wiLFxuICAgICAgICAgICAgXCJfX19fWF9YX1wiLFxuICAgICAgICAgICAgXCJfX19YX19YX1wiLFxuICAgICAgICAgICAgXCJfX1hfX19YX1wiLFxuICAgICAgICAgICAgXCJfWF9fX19YX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgXCIrXCI6IHtcbiAgICAgICAgYWN0aW9uOiBBQ1RJT04uTk9ORSxcbiAgICAgICAgY29sb3JzOiBudWxsLFxuICAgICAgICBuYW1lOiBcInRlcnJhaW4gdXBcIixcbiAgICAgICAgdGV4dHVyZTogW1xuICAgICAgICAgICAgXCJfX19YWF9fX1wiLFxuICAgICAgICAgICAgXCJfX1hYWFhfX1wiLFxuICAgICAgICAgICAgXCJfWFhYWFhYX1wiLFxuICAgICAgICAgICAgXCJfX19YWF9fX1wiLFxuICAgICAgICAgICAgXCJfX19YWF9fX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfWFhYWFhYX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgXCItXCI6IHtcbiAgICAgICAgYWN0aW9uOiBBQ1RJT04uTk9ORSxcbiAgICAgICAgY29sb3JzOiBudWxsLFxuICAgICAgICBuYW1lOiBcImNsaWZmXCIsXG4gICAgICAgIHRleHR1cmU6IFtcbiAgICAgICAgICAgIFwiX1hYWFhYWF9cIixcbiAgICAgICAgICAgIFwiX19fX19fX19cIixcbiAgICAgICAgICAgIFwiX19fWFhfX19cIixcbiAgICAgICAgICAgIFwiX19fWFhfX19cIixcbiAgICAgICAgICAgIFwiX1hYWFhYWF9cIixcbiAgICAgICAgICAgIFwiX19YWFhYX19cIixcbiAgICAgICAgICAgIFwiX19fWFhfX19cIixcbiAgICAgICAgICAgIFwiX19fX19fX19cIixcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHI6IHtcbiAgICAgICAgYWN0aW9uOiBBQ1RJT04uTk9ORSxcbiAgICAgICAgY29sb3JzOiBudWxsLFxuICAgICAgICBuYW1lOiBcIlJcIixcbiAgICAgICAgdGV4dHVyZTogW1xuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfWFhYWFhfX1wiLFxuICAgICAgICAgICAgXCJfWFhfX1hYX1wiLFxuICAgICAgICAgICAgXCJfWFhYWFhfX1wiLFxuICAgICAgICAgICAgXCJfWFhfX1hYX1wiLFxuICAgICAgICAgICAgXCJfWFhfX1hYX1wiLFxuICAgICAgICAgICAgXCJfWFhfX1hYX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgZToge1xuICAgICAgICBhY3Rpb246IEFDVElPTi5OT05FLFxuICAgICAgICBjb2xvcnM6IG51bGwsXG4gICAgICAgIG5hbWU6IFwiRVwiLFxuICAgICAgICB0ZXh0dXJlOiBbXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgICAgICBcIl9YWFhYWFhfXCIsXG4gICAgICAgICAgICBcIl9YWF9fX19fXCIsXG4gICAgICAgICAgICBcIl9YWFhYX19fXCIsXG4gICAgICAgICAgICBcIl9YWF9fX19fXCIsXG4gICAgICAgICAgICBcIl9YWF9fX19fXCIsXG4gICAgICAgICAgICBcIl9YWFhYWFhfXCIsXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBhOiB7XG4gICAgICAgIGFjdGlvbjogQUNUSU9OLk5PTkUsXG4gICAgICAgIGNvbG9yczogbnVsbCxcbiAgICAgICAgbmFtZTogXCJBXCIsXG4gICAgICAgIHRleHR1cmU6IFtcbiAgICAgICAgICAgIFwiX19fX19fX19cIixcbiAgICAgICAgICAgIFwiX19YWFhYX19cIixcbiAgICAgICAgICAgIFwiX1hYX19YWF9cIixcbiAgICAgICAgICAgIFwiX1hYWFhYWF9cIixcbiAgICAgICAgICAgIFwiX1hYX19YWF9cIixcbiAgICAgICAgICAgIFwiX1hYX19YWF9cIixcbiAgICAgICAgICAgIFwiX1hYX19YWF9cIixcbiAgICAgICAgICAgIFwiX19fX19fX19cIixcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIGQ6IHtcbiAgICAgICAgYWN0aW9uOiBBQ1RJT04uTk9ORSxcbiAgICAgICAgY29sb3JzOiBudWxsLFxuICAgICAgICBuYW1lOiBcIkRcIixcbiAgICAgICAgdGV4dHVyZTogW1xuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfWFhYWFhfX1wiLFxuICAgICAgICAgICAgXCJfWFhfX1hYX1wiLFxuICAgICAgICAgICAgXCJfWFhfX1hYX1wiLFxuICAgICAgICAgICAgXCJfWFhfX1hYX1wiLFxuICAgICAgICAgICAgXCJfWFhfX1hYX1wiLFxuICAgICAgICAgICAgXCJfWFhYWFhfX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgeToge1xuICAgICAgICBhY3Rpb246IEFDVElPTi5OT05FLFxuICAgICAgICBjb2xvcnM6IG51bGwsXG4gICAgICAgIG5hbWU6IFwiWVwiLFxuICAgICAgICB0ZXh0dXJlOiBbXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgICAgICBcIl9YWF9fWFhfXCIsXG4gICAgICAgICAgICBcIl9YWF9fWFhfXCIsXG4gICAgICAgICAgICBcIl9fWFhYWF9fXCIsXG4gICAgICAgICAgICBcIl9fX1hYX19fXCIsXG4gICAgICAgICAgICBcIl9fX1hYX19fXCIsXG4gICAgICAgICAgICBcIl9fX1hYX19fXCIsXG4gICAgICAgICAgICBcIl9fX19fX19fXCIsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBcIiBcIjoge1xuICAgICAgICBhY3Rpb246IEFDVElPTi5OT05FLFxuICAgICAgICBjb2xvcnM6IG51bGwsXG4gICAgICAgIG5hbWU6IFwiYmxhbmtcIixcbiAgICAgICAgdGV4dHVyZTogW1xuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICAgICAgXCJfX19fX19fX1wiLFxuICAgICAgICBdLFxuICAgIH0sXG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICAgIEFDVElPTjogQUNUSU9OLFxuICAgIGZsYWdzOiBmbGFncyxcbiAgICBnZXRGbGFnOiBmdW5jdGlvbiAoZmxhZykge1xuICAgICAgICBpZiAoZmxhZ3NbZmxhZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZsYWdzW1wiIFwiXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmbGFnc1tmbGFnXTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2labXhoWjNNdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUptYkdGbmN5NXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVRzN096czdPenM3T3pzN096dEZRV0ZGTzBGQlJVWXNTVUZCVFN4TlFVRk5MRWRCUVVjN1NVRkRXQ3hKUVVGSkxFVkJRVVVzUTBGQlF6dEpRVU5RTEVsQlFVa3NSVUZCUlN4RlFVRkZPMGxCUTFJc1VVRkJVU3hGUVVGRkxFVkJRVVU3U1VGRFdpeFRRVUZUTEVWQlFVVXNSVUZCUlR0SlFVTmlMRmRCUVZjc1JVRkJSU3hGUVVGRk8wbEJRMllzUjBGQlJ5eEZRVUZGTEVWQlFVVTdRMEZEVml4RFFVRkRPMEZCUlVZc1NVRkJTU3hMUVVGTExFZEJRVWM3U1VGRFVpeEhRVUZITEVWQlFVVTdVVUZEUkN4TlFVRk5MRVZCUVVVc1RVRkJUU3hEUVVGRExFZEJRVWM3VVVGRGJFSXNUVUZCVFN4RlFVRkZMRU5CUVVNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF6dFJRVU0xUWl4SlFVRkpMRVZCUVVVc1RVRkJUVHRSUVVOYUxFOUJRVThzUlVGQlJUdFpRVU5NTEZWQlFWVTdXVUZEVml4VlFVRlZPMWxCUTFZc1ZVRkJWVHRaUVVOV0xGVkJRVlU3V1VGRFZpeFZRVUZWTzFsQlExWXNWVUZCVlR0WlFVTldMRlZCUVZVN1dVRkRWaXhWUVVGVk8xTkJRMkk3UzBGRFNqdEpRVU5FTEVkQlFVY3NSVUZCUlR0UlFVTkVMRTFCUVUwc1JVRkJSU3hOUVVGTkxFTkJRVU1zU1VGQlNUdFJRVU51UWl4TlFVRk5MRVZCUVVVc1EwRkJReXhSUVVGUkxFVkJRVVVzVVVGQlVTeERRVUZETzFGQlF6VkNMRWxCUVVrc1JVRkJSU3hYUVVGWE8xRkJRMnBDTEU5QlFVOHNSVUZCUlR0WlFVTk1MRlZCUVZVN1dVRkRWaXhWUVVGVk8xbEJRMVlzVlVGQlZUdFpRVU5XTEZWQlFWVTdXVUZEVml4VlFVRlZPMWxCUTFZc1ZVRkJWVHRaUVVOV0xGVkJRVlU3V1VGRFZpeFZRVUZWTzFOQlEySTdTMEZEU2p0SlFVTkVMRWRCUVVjc1JVRkJSVHRSUVVORUxFMUJRVTBzUlVGQlJTeE5RVUZOTEVOQlFVTXNTVUZCU1R0UlFVTnVRaXhOUVVGTkxFVkJRVVVzUTBGQlF5eFJRVUZSTEVWQlFVVXNVVUZCVVN4RFFVRkRPMUZCUXpWQ0xFbEJRVWtzUlVGQlJTeFRRVUZUTzFGQlEyWXNUMEZCVHl4RlFVRkZPMWxCUTB3c1ZVRkJWVHRaUVVOV0xGVkJRVlU3V1VGRFZpeFZRVUZWTzFsQlExWXNWVUZCVlR0WlFVTldMRlZCUVZVN1dVRkRWaXhWUVVGVk8xbEJRMVlzVlVGQlZUdFpRVU5XTEZWQlFWVTdVMEZEWWp0TFFVTktPMGxCUTBRc1IwRkJSeXhGUVVGRk8xRkJRMFFzVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXl4SlFVRkpPMUZCUTI1Q0xFMUJRVTBzUlVGQlJTeERRVUZETEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNN1VVRkROVUlzU1VGQlNTeEZRVUZGTEUxQlFVMDdVVUZEV2l4UFFVRlBMRVZCUVVVN1dVRkRUQ3hWUVVGVk8xbEJRMVlzVlVGQlZUdFpRVU5XTEZWQlFWVTdXVUZEVml4VlFVRlZPMWxCUTFZc1ZVRkJWVHRaUVVOV0xGVkJRVlU3V1VGRFZpeFZRVUZWTzFsQlExWXNWVUZCVlR0VFFVTmlPMHRCUTBvN1NVRkRSQ3hIUVVGSExFVkJRVVU3VVVGRFJDeE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRMRkZCUVZFN1VVRkRka0lzVFVGQlRTeEZRVUZGTEVOQlFVTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJRenRSUVVNMVFpeEpRVUZKTEVWQlFVVXNWVUZCVlR0UlFVTm9RaXhQUVVGUExFVkJRVVU3V1VGRFRDeFZRVUZWTzFsQlExWXNWVUZCVlR0WlFVTldMRlZCUVZVN1dVRkRWaXhWUVVGVk8xbEJRMVlzVlVGQlZUdFpRVU5XTEZWQlFWVTdXVUZEVml4VlFVRlZPMWxCUTFZc1ZVRkJWVHRUUVVOaU8wdEJRMG83U1VGRFJDeEhRVUZITEVWQlFVVTdVVUZEUkN4TlFVRk5MRVZCUVVVc1RVRkJUU3hEUVVGRExGTkJRVk03VVVGRGVFSXNUVUZCVFN4RlFVRkZMRU5CUVVNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF6dFJRVU0xUWl4SlFVRkpMRVZCUVVVc1YwRkJWenRSUVVOcVFpeFBRVUZQTEVWQlFVVTdXVUZEVEN4VlFVRlZPMWxCUTFZc1ZVRkJWVHRaUVVOV0xGVkJRVlU3V1VGRFZpeFZRVUZWTzFsQlExWXNWVUZCVlR0WlFVTldMRlZCUVZVN1dVRkRWaXhWUVVGVk8xbEJRMVlzVlVGQlZUdFRRVU5pTzB0QlEwbzdTVUZEUkN4RFFVRkRMRVZCUVVVN1VVRkRReXhOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZETEZkQlFWYzdVVUZETVVJc1RVRkJUU3hGUVVGRkxFTkJRVU1zVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXp0UlFVTTFRaXhKUVVGSkxFVkJRVVVzVjBGQlZ6dFJRVU5xUWl4UFFVRlBMRVZCUVVVN1dVRkRUQ3hWUVVGVk8xbEJRMVlzVlVGQlZUdFpRVU5XTEZWQlFWVTdXVUZEVml4VlFVRlZPMWxCUTFZc1ZVRkJWVHRaUVVOV0xGVkJRVlU3V1VGRFZpeFZRVUZWTzFsQlExWXNWVUZCVlR0VFFVTmlPMHRCUTBvN1NVRkRSQ3hIUVVGSExFVkJRVVU3VVVGRFJDeE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRMRWxCUVVrN1VVRkRia0lzVFVGQlRTeEZRVUZGTEVsQlFVazdVVUZEV2l4SlFVRkpMRVZCUVVVc1dVRkJXVHRSUVVOc1FpeFBRVUZQTEVWQlFVVTdXVUZEVEN4VlFVRlZPMWxCUTFZc1ZVRkJWVHRaUVVOV0xGVkJRVlU3V1VGRFZpeFZRVUZWTzFsQlExWXNWVUZCVlR0WlFVTldMRlZCUVZVN1dVRkRWaXhWUVVGVk8xbEJRMVlzVlVGQlZUdFRRVU5pTzB0QlEwbzdTVUZEUkN4SFFVRkhMRVZCUVVVN1VVRkRSQ3hOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZETEVsQlFVazdVVUZEYmtJc1RVRkJUU3hGUVVGRkxFbEJRVWs3VVVGRFdpeEpRVUZKTEVWQlFVVXNZVUZCWVR0UlFVTnVRaXhQUVVGUExFVkJRVVU3V1VGRFRDeFZRVUZWTzFsQlExWXNWVUZCVlR0WlFVTldMRlZCUVZVN1dVRkRWaXhWUVVGVk8xbEJRMVlzVlVGQlZUdFpRVU5XTEZWQlFWVTdXVUZEVml4VlFVRlZPMWxCUTFZc1ZVRkJWVHRUUVVOaU8wdEJRMG83U1VGRFJDeEhRVUZITEVWQlFVVTdVVUZEUkN4TlFVRk5MRVZCUVVVc1RVRkJUU3hEUVVGRExFbEJRVWs3VVVGRGJrSXNUVUZCVFN4RlFVRkZMRWxCUVVrN1VVRkRXaXhKUVVGSkxFVkJRVVVzV1VGQldUdFJRVU5zUWl4UFFVRlBMRVZCUVVVN1dVRkRUQ3hWUVVGVk8xbEJRMVlzVlVGQlZUdFpRVU5XTEZWQlFWVTdXVUZEVml4VlFVRlZPMWxCUTFZc1ZVRkJWVHRaUVVOV0xGVkJRVlU3V1VGRFZpeFZRVUZWTzFsQlExWXNWVUZCVlR0VFFVTmlPMHRCUTBvN1NVRkRSQ3hIUVVGSExFVkJRVVU3VVVGRFJDeE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRMRWxCUVVrN1VVRkRia0lzVFVGQlRTeEZRVUZGTEVsQlFVazdVVUZEV2l4SlFVRkpMRVZCUVVVc1QwRkJUenRSUVVOaUxFOUJRVThzUlVGQlJUdFpRVU5NTEZWQlFWVTdXVUZEVml4VlFVRlZPMWxCUTFZc1ZVRkJWVHRaUVVOV0xGVkJRVlU3V1VGRFZpeFZRVUZWTzFsQlExWXNWVUZCVlR0WlFVTldMRlZCUVZVN1dVRkRWaXhWUVVGVk8xTkJRMkk3UzBGRFNqdEpRVU5FTEVOQlFVTXNSVUZCUlR0UlFVTkRMRTFCUVUwc1JVRkJSU3hOUVVGTkxFTkJRVU1zU1VGQlNUdFJRVU51UWl4TlFVRk5MRVZCUVVVc1NVRkJTVHRSUVVOYUxFbEJRVWtzUlVGQlJTeEhRVUZITzFGQlExUXNUMEZCVHl4RlFVRkZPMWxCUTB3c1ZVRkJWVHRaUVVOV0xGVkJRVlU3V1VGRFZpeFZRVUZWTzFsQlExWXNWVUZCVlR0WlFVTldMRlZCUVZVN1dVRkRWaXhWUVVGVk8xbEJRMVlzVlVGQlZUdFpRVU5XTEZWQlFWVTdVMEZEWWp0TFFVTktPMGxCUTBRc1EwRkJReXhGUVVGRk8xRkJRME1zVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXl4SlFVRkpPMUZCUTI1Q0xFMUJRVTBzUlVGQlJTeEpRVUZKTzFGQlExb3NTVUZCU1N4RlFVRkZMRWRCUVVjN1VVRkRWQ3hQUVVGUExFVkJRVVU3V1VGRFRDeFZRVUZWTzFsQlExWXNWVUZCVlR0WlFVTldMRlZCUVZVN1dVRkRWaXhWUVVGVk8xbEJRMVlzVlVGQlZUdFpRVU5XTEZWQlFWVTdXVUZEVml4VlFVRlZPMWxCUTFZc1ZVRkJWVHRUUVVOaU8wdEJRMG83U1VGRFJDeERRVUZETEVWQlFVVTdVVUZEUXl4TlFVRk5MRVZCUVVVc1RVRkJUU3hEUVVGRExFbEJRVWs3VVVGRGJrSXNUVUZCVFN4RlFVRkZMRWxCUVVrN1VVRkRXaXhKUVVGSkxFVkJRVVVzUjBGQlJ6dFJRVU5VTEU5QlFVOHNSVUZCUlR0WlFVTk1MRlZCUVZVN1dVRkRWaXhWUVVGVk8xbEJRMVlzVlVGQlZUdFpRVU5XTEZWQlFWVTdXVUZEVml4VlFVRlZPMWxCUTFZc1ZVRkJWVHRaUVVOV0xGVkJRVlU3V1VGRFZpeFZRVUZWTzFOQlEySTdTMEZEU2p0SlFVTkVMRU5CUVVNc1JVRkJSVHRSUVVORExFMUJRVTBzUlVGQlJTeE5RVUZOTEVOQlFVTXNTVUZCU1R0UlFVTnVRaXhOUVVGTkxFVkJRVVVzU1VGQlNUdFJRVU5hTEVsQlFVa3NSVUZCUlN4SFFVRkhPMUZCUTFRc1QwRkJUeXhGUVVGRk8xbEJRMHdzVlVGQlZUdFpRVU5XTEZWQlFWVTdXVUZEVml4VlFVRlZPMWxCUTFZc1ZVRkJWVHRaUVVOV0xGVkJRVlU3V1VGRFZpeFZRVUZWTzFsQlExWXNWVUZCVlR0WlFVTldMRlZCUVZVN1UwRkRZanRMUVVOS08wbEJRMFFzUTBGQlF5eEZRVUZGTzFGQlEwTXNUVUZCVFN4RlFVRkZMRTFCUVUwc1EwRkJReXhKUVVGSk8xRkJRMjVDTEUxQlFVMHNSVUZCUlN4SlFVRkpPMUZCUTFvc1NVRkJTU3hGUVVGRkxFZEJRVWM3VVVGRFZDeFBRVUZQTEVWQlFVVTdXVUZEVEN4VlFVRlZPMWxCUTFZc1ZVRkJWVHRaUVVOV0xGVkJRVlU3V1VGRFZpeFZRVUZWTzFsQlExWXNWVUZCVlR0WlFVTldMRlZCUVZVN1dVRkRWaXhWUVVGVk8xbEJRMVlzVlVGQlZUdFRRVU5pTzB0QlEwbzdTVUZEUkN4SFFVRkhMRVZCUVVVN1VVRkRSQ3hOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZETEVsQlFVazdVVUZEYmtJc1RVRkJUU3hGUVVGRkxFbEJRVWs3VVVGRFdpeEpRVUZKTEVWQlFVVXNUMEZCVHp0UlFVTmlMRTlCUVU4c1JVRkJSVHRaUVVOTUxGVkJRVlU3V1VGRFZpeFZRVUZWTzFsQlExWXNWVUZCVlR0WlFVTldMRlZCUVZVN1dVRkRWaXhWUVVGVk8xbEJRMVlzVlVGQlZUdFpRVU5XTEZWQlFWVTdXVUZEVml4VlFVRlZPMU5CUTJJN1MwRkRTanREUVVOS0xFTkJRVU03UVVGRlJpeGxRVUZsTzBsQlExZ3NUVUZCVFN4UlFVRkJPMGxCUTA0c1MwRkJTeXhQUVVGQk8wbEJRMHdzVDBGQlR5eFpRVUZETEVsQlFVazdVVUZEVWl4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNMVFpeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRM1JDTEVOQlFVTTdVVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVOS0xFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRka0lzUTBGQlF6dEpRVU5NTEVOQlFVTTdRMEZEU2l4RFFVRkJJbjA9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi93d3cvanMvZmxhZ3MuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIFNWR19OUyA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgWExJTktfTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIjtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjbGFtcDogZnVuY3Rpb24gKHYsIG1pbiwgbWF4KSB7XG4gICAgICAgIGlmICh2IDwgbWluKSB7XG4gICAgICAgICAgICByZXR1cm4gbWluO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2ID4gbWF4KSB7XG4gICAgICAgICAgICByZXR1cm4gbWF4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2O1xuICAgIH0sXG4gICAgZm10MjogZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobiAqIDEwMCkgLyAxMDA7XG4gICAgfSxcbiAgICBzaWduOiBmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gdiA8IDAgPyAtMSA6IDE7XG4gICAgfSxcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uIChuLCB3aWR0aCwgZGVjaW1hbHMpIHtcbiAgICAgICAgaWYgKHdpZHRoID09PSB2b2lkIDApIHsgd2lkdGggPSAxMDsgfVxuICAgICAgICBpZiAoZGVjaW1hbHMgPT09IHZvaWQgMCkgeyBkZWNpbWFscyA9IDI7IH1cbiAgICAgICAgaWYgKHR5cGVvZiBuICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG4gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5wYWRTdGFydCh3aWR0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbnVtID0gbjtcbiAgICAgICAgdmFyIGludCA9IE1hdGguZmxvb3IobnVtKTtcbiAgICAgICAgdmFyIGZyYWN0aW9uID0gKG51bSAtIGludCkudG9GaXhlZChkZWNpbWFscyk7XG4gICAgICAgIHJldHVybiAoaW50LnRvU3RyaW5nKCkgKyBcIi5cIiArIGZyYWN0aW9uLnRvU3RyaW5nKCkuc3Vic3RyKDIpLnBhZEVuZChkZWNpbWFscywgXCIwXCIpKS5wYWRTdGFydCh3aWR0aCk7XG4gICAgfSxcbiAgICBzdmdFbDogZnVuY3Rpb24gKGljb24pIHtcbiAgICAgICAgdmFyIHN2Z1dyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05TLCBcInN2Z1wiKTtcbiAgICAgICAgdmFyIHN2Z0ljb25FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTlMsIFwidXNlXCIpO1xuICAgICAgICBzdmdJY29uRWwuc2V0QXR0cmlidXRlTlMoWExJTktfTlMsIFwieGxpbms6aHJlZlwiLCBcIiNcIiArIGljb24pO1xuICAgICAgICBzdmdXcmFwcGVyLmFwcGVuZENoaWxkKHN2Z0ljb25FbCk7XG4gICAgICAgIHJldHVybiBzdmdXcmFwcGVyO1xuICAgIH0sXG4gICAgYnV0dG9uRnJvbVRhcmdldDogZnVuY3Rpb24gKHRhcmdldCwgbGltaXQpIHtcbiAgICAgICAgaWYgKGxpbWl0ID09PSB2b2lkIDApIHsgbGltaXQgPSA1OyB9XG4gICAgICAgIHZhciBidG4gPSB0YXJnZXQsIG51bVRyaWVzID0gMDtcbiAgICAgICAgd2hpbGUgKCEoYnRuIGluc3RhbmNlb2YgSFRNTEJ1dHRvbkVsZW1lbnQpICYmIGJ0biAmJiAobnVtVHJpZXMrKyA8IGxpbWl0KSkge1xuICAgICAgICAgICAgYnRuID0gYnRuLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChidG4gaW5zdGFuY2VvZiBIVE1MQnV0dG9uRWxlbWVudCkgPyBidG4gOiBudWxsO1xuICAgIH0sXG4gICAgc2ltcGxlUHJvcGVyQ2FzZTogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyID8gc3RyWzBdLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyKDEpIDogXCJcIjtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZFhScGJDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSW5WMGFXd3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJUU3hOUVVGTkxFZEJRVWNzTkVKQlFUUkNMRVZCUTNKRExGRkJRVkVzUjBGQlJ5dzRRa0ZCT0VJc1EwRkJRenRCUVVWb1JDeGxRVUZsTzBsQlExZ3NTMEZCU3l4WlFVRkRMRU5CUVVNc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ6dFJRVU5pTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlExWXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJRenRSUVVObUxFTkJRVU03VVVGRFJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5XTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNN1VVRkRaaXhEUVVGRE8xRkJRMFFzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTmlMRU5CUVVNN1NVRkRSQ3hKUVVGSkxGbEJRVU1zUTBGQlF6dFJRVU5HTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNN1NVRkRja01zUTBGQlF6dEpRVU5FTEVsQlFVa3NXVUZCUXl4RFFVRkRPMUZCUTBZc1RVRkJUU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRekZDTEVOQlFVTTdTVUZEUkN4TlFVRk5MRmxCUVVNc1EwRkJReXhGUVVGRkxFdEJRVlVzUlVGQlJTeFJRVUZaTzFGQlFYaENMSE5DUVVGQkxFVkJRVUVzVlVGQlZUdFJRVUZGTEhsQ1FVRkJMRVZCUVVFc1dVRkJXVHRSUVVNNVFpeEZRVUZGTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzaENMRVZCUVVVc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM2hDTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFsQlF6ZENMRU5CUVVNN1dVRkRSQ3hOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEySXNRMEZCUXp0UlFVVkVMRWxCUVVrc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU5hTEVsQlFVa3NSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZETVVJc1NVRkJTU3hSUVVGUkxFZEJRVWNzUTBGQlF5eEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzFGQlJUZERMRTFCUVUwc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVWQlFVVXNSMEZCUnl4SFFVRkhMRWRCUVVjc1VVRkJVU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBsQlJYaEhMRU5CUVVNN1NVRkRSQ3hMUVVGTExGbEJRVU1zU1VGQlNUdFJRVU5PTEVsQlFVa3NWVUZCVlN4SFFVRkhMRkZCUVZFc1EwRkJReXhsUVVGbExFTkJRVU1zVFVGQlRTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUTNwRUxFbEJRVWtzVTBGQlV5eEhRVUZITEZGQlFWRXNRMEZCUXl4bFFVRmxMRU5CUVVNc1RVRkJUU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzFGQlEzaEVMRk5CUVZNc1EwRkJReXhqUVVGakxFTkJRVU1zVVVGQlVTeEZRVUZGTEZsQlFWa3NSVUZCUlN4TlFVRkpMRWxCUVUwc1EwRkJReXhEUVVGRE8xRkJRemRFTEZWQlFWVXNRMEZCUXl4WFFVRlhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03VVVGRGJFTXNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJRenRKUVVOMFFpeERRVUZETzBsQlEwUXNaMEpCUVdkQ0xGbEJRVU1zVFVGQlRTeEZRVUZGTEV0QlFWTTdVVUZCVkN4elFrRkJRU3hGUVVGQkxGTkJRVk03VVVGRE9VSXNTVUZCU1N4SFFVRkhMRWRCUVVjc1RVRkJUU3hGUVVOYUxGRkJRVkVzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEYWtJc1QwRkJUeXhEUVVGRExFTkJRVU1zUjBGQlJ5eFpRVUZaTEdsQ1FVRnBRaXhEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRWRCUVVjc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF6dFpRVU40UlN4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExHRkJRV0VzUTBGQlF6dFJRVU0xUWl4RFFVRkRPMUZCUTBRc1RVRkJUU3hEUVVGRExFTkJRVU1zUjBGQlJ5eFpRVUZaTEdsQ1FVRnBRaXhEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXp0SlFVTXpSQ3hEUVVGRE8wbEJRMFFzWjBKQlFXZENMRmxCUVVNc1IwRkJSenRSUVVOb1FpeE5RVUZOTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFhRVUZYTEVWQlFVVXNSMEZCUnl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0SlFVTXpSQ3hEUVVGRE8wTkJRMG9zUTBGQlFTSjlcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3d3dy9qcy91dGlsLmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBEZWx0YSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVsdGEoX2EpIHtcbiAgICAgICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIF9jID0gX2IudCwgdCA9IF9jID09PSB2b2lkIDAgPyAtMSA6IF9jLCBfZCA9IF9iLm1heEFjY2VwdGFibGVEZWx0YSwgbWF4QWNjZXB0YWJsZURlbHRhID0gX2QgPT09IHZvaWQgMCA/IDY3IDogX2Q7XG4gICAgICAgIHRoaXMuX3QgPSB0O1xuICAgICAgICB0aGlzLm1heEFjY2VwdGFibGVEZWx0YSA9IG1heEFjY2VwdGFibGVEZWx0YTtcbiAgICAgICAgdGhpcy5sb2cgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbG9nR3JvdXAgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZWx0YS5wcm90b3R5cGUsIFwibG9nR3JvdXBcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChnKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dHcm91cCA9IGc7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMubG9nID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICAgICAgICAgIGlmIChnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXAoZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBEZWx0YS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3QgPSAtMTtcbiAgICB9O1xuICAgIERlbHRhLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICBpZiAodCA9PT0gdm9pZCAwKSB7IHQgPSAwOyB9XG4gICAgICAgIHZhciBkZWx0YSA9IHQgLSB0aGlzLl90O1xuICAgICAgICBpZiAodGhpcy5fdCA8IDApIHtcbiAgICAgICAgICAgIGRlbHRhID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ID0gdDtcbiAgICAgICAgaWYgKGRlbHRhIDwgMCkge1xuICAgICAgICAgICAgZGVsdGEgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5sb2cgPT09IFwibnVtYmVyXCIgJiYgZGVsdGEgPiB0aGlzLmxvZyAmJiB0aGlzLl9sb2dHcm91cCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocGVyZm9ybWFuY2Uubm93KCkgKyBcIjogXCIgKyBkZWx0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbHRhID4gdGhpcy5tYXhBY2NlcHRhYmxlRGVsdGEpIHtcbiAgICAgICAgICAgIGRlbHRhID0gdGhpcy5tYXhBY2NlcHRhYmxlRGVsdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlbHRhO1xuICAgIH07XG4gICAgcmV0dXJuIERlbHRhO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IERlbHRhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pUkdWc2RHRXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKRVpXeDBZUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEpRVU5KTEdWQlFWa3NSVUZCZDBNN1dVRkJlRU1zTkVKQlFYZERMRVZCUVhSRExGTkJRVTBzUlVGQlRpd3lRa0ZCVFN4RlFVRkZMREJDUVVGMVFpeEZRVUYyUWl3MFEwRkJkVUk3VVVGRGVrTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRFdpeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFZEJRVWNzYTBKQlFXdENMRU5CUVVNN1VVRkROME1zU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4TFFVRkxMRU5CUVVNN1VVRkRha0lzU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4VFFVRlRMRU5CUVVNN1NVRkRMMElzUTBGQlF6dEpRVU5FTEhOQ1FVRkpMREpDUVVGUk8yRkJRVm9zVlVGQllTeERRVUZETzFsQlExWXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRGJrSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eExRVUZMTEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJReTlDTEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenRuUWtGRGJrSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEU2l4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTnlRaXhEUVVGRE8xbEJRMHdzUTBGQlF6dFJRVU5NTEVOQlFVTTdPenRQUVVGQk8wbEJRMFFzY1VKQlFVc3NSMEZCVER0UlFVTkpMRWxCUVVrc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEYWtJc1EwRkJRenRKUVVORUxITkNRVUZOTEVkQlFVNHNWVUZCVHl4RFFVRkxPMUZCUVV3c2EwSkJRVUVzUlVGQlFTeExRVUZMTzFGQlExSXNTVUZCU1N4TFFVRkxMRWRCUVVjc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTTdVVUZEZUVJc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMlFzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTmtMRU5CUVVNN1VVRkRSQ3hKUVVGSkxFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTmFMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTFvc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU5rTEVOQlFVTTdVVUZGUkN4RlFVRkZMRU5CUVVNc1EwRkJReXhQUVVGUExFbEJRVWtzUTBGQlF5eEhRVUZITEV0QlFVc3NVVUZCVVN4SlFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM0pGTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVrc1YwRkJWeXhEUVVGRExFZEJRVWNzUlVGQlJTeFZRVUZMTEV0QlFVOHNRMEZCUXl4RFFVRkRPMUZCUTJ4RUxFTkJRVU03VVVGRlJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOc1F5eExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETzFGQlEzQkRMRU5CUVVNN1VVRkZSQ3hOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETzBsQlEycENMRU5CUVVNN1NVRkRUQ3haUVVGRE8wRkJRVVFzUTBGQlF5eEJRWFpEUkN4SlFYVkRReUo5XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi93d3cvanMvRGVsdGEuanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlLmpzXCI7XG5pbXBvcnQgZmxhZ3MgZnJvbSBcIi4vZmxhZ3MuanNcIjtcbmltcG9ydCB0ZXh0dXJlcyBmcm9tIFwiLi90ZXh0dXJlcy5qc1wiO1xudmFyIE1BWF9TVEVQUyA9IDI1NjtcbnZhciBIQUxGX01BWF9TVEVQUyA9IDEyODtcbnZhciBGTE9PUiA9IDE7XG52YXIgQ0VJTElORyA9IDI7XG5mdW5jdGlvbiBfY3JlYXRlTWF0ZXJpYWwoX2EpIHtcbiAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgX2MgPSBfYi5tdWx0aSwgbXVsdGkgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYywgX2QgPSBfYi53aXRoVGV4dHVyZSwgd2l0aFRleHR1cmUgPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kLCBjb2xvciA9IF9iLmNvbG9yLCBfZSA9IF9iLnZpc2libGUsIHZpc2libGUgPSBfZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9lO1xuICAgIHZhciBtYXRlcmlhbDtcbiAgICBpZiAobXVsdGkpIHtcbiAgICAgICAgbWF0ZXJpYWwgPSBbXCJyaWdodFwiLCBcImxlZnRcIiwgXCJ0b3BcIiwgXCJib3R0b21cIiwgXCJiYWNrXCIsIFwiZnJvbnRcIl0ubWFwKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NyZWF0ZU1hdGVyaWFsKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgdmlzaWJsZTogdmlzaWJsZSxcbiAgICAgICAgICAgICAgICB3aXRoVGV4dHVyZTogc2lkZSA9PT0gXCJ0b3BcIiB8fCBzaWRlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL21hdGVyaWFsLm5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtcbiAgICAgICAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgICAgICAgIGVtaXNzaXZlOiB3aXRoVGV4dHVyZSA/IG5ldyBUSFJFRS5Db2xvcigweEZGRkZGRikgOiBuZXcgVEhSRUUuQ29sb3IoMHgwMDAwMDApLFxuICAgICAgICAgICAgZW1pc3NpdmVNYXA6IHdpdGhUZXh0dXJlID8gdGV4dHVyZXNbXCIgXCJdIDogbnVsbCxcbiAgICAgICAgICAgIHdpcmVmcmFtZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIG1hdGVyaWFsLnZpc2libGUgPSB2aXNpYmxlO1xuICAgICAgICBtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbWF0ZXJpYWw7XG59XG5mdW5jdGlvbiBfc2V0VmlzaWJpbGl0eShtYXRlcmlhbCwgdmlzaWJpbGl0eSkge1xuICAgIGlmIChtYXRlcmlhbCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHZhciBtYXRlcmlhbHMgPSBtYXRlcmlhbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDU7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICB2YXIgZmFjZVZpc2libGUgPSAodmlzaWJpbGl0eSAmICgxIDw8IGkpKSA+IDA7XG4gICAgICAgICAgICBtYXRlcmlhbHNbaV0udmlzaWJsZSA9IGZhY2VWaXNpYmxlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtYXRlcmlhbC52aXNpYmxlID0gQm9vbGVhbih2aXNpYmlsaXR5KTtcbiAgICB9XG59XG5mdW5jdGlvbiBfc2V0VGV4dHVyZShtYXRlcmlhbCwgZmxhZykge1xuICAgIGlmIChtYXRlcmlhbCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIF9zZXRUZXh0dXJlKG1hdGVyaWFsWzJdLCBmbGFnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1hdGVyaWFsLmVtaXNzaXZlTWFwID0gdGV4dHVyZXNbZmxhZ107XG4gICAgfVxufVxuZnVuY3Rpb24gX3NldENvbG9yKG1hdGVyaWFsLCBjb2xvcikge1xuICAgIGlmIChtYXRlcmlhbCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHZhciBtYXRlcmlhbHMgPSBtYXRlcmlhbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDU7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBtYXRlcmlhbHNbaV0uY29sb3Iuc2V0KGNvbG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbWF0ZXJpYWwuY29sb3Iuc2V0KGNvbG9yKTtcbiAgICB9XG59XG52YXIgTGV2ZWwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExldmVsKGxldmVsLCBfYSkge1xuICAgICAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgX2MgPSBfYi5ibG9ja1NpemUsIGJsb2NrU2l6ZSA9IF9jID09PSB2b2lkIDAgPyAyMDAgOiBfYywgX2QgPSBfYi5zdGVwU2l6ZSwgc3RlcFNpemUgPSBfZCA9PT0gdm9pZCAwID8gMjUgOiBfZCwgX2UgPSBfYi5kcmF3RGlzdGFuY2UsIGRyYXdEaXN0YW5jZSA9IF9lID09PSB2b2lkIDAgPyAxNSA6IF9lLCBfZiA9IF9iLmNvbG9ycywgY29sb3JzID0gX2YgPT09IHZvaWQgMCA/IFsweEZGODAyMCwgMHg4MDIwRkZdIDogX2YsIF9nID0gX2IuaW5pdGlhbFNwZWVkLCBpbml0aWFsU3BlZWQgPSBfZyA9PT0gdm9pZCAwID8gMjUgOiBfZztcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSBibG9ja1NpemU7XG4gICAgICAgIHRoaXMuc3RlcFNpemUgPSBzdGVwU2l6ZTtcbiAgICAgICAgdGhpcy5kcmF3RGlzdGFuY2UgPSBkcmF3RGlzdGFuY2U7XG4gICAgICAgIHRoaXMuX2luaXRpYWxTcGVlZCA9IGluaXRpYWxTcGVlZDtcbiAgICAgICAgdGhpcy5sZXZlbCA9IHRoaXMuX3BhcnNlTGV2ZWwobGV2ZWwpO1xuICAgICAgICB0aGlzLmN1clJvdyA9IDA7XG4gICAgICAgIHRoaXMubWF4VmlzaWJsZVJvdyA9IGRyYXdEaXN0YW5jZSAtIDE7XG4gICAgICAgIHRoaXMuY29sb3JzID0gY29sb3JzO1xuICAgICAgICB0aGlzLl9mbG9vciA9IFtdO1xuICAgICAgICB0aGlzLl9jZWlsaW5nID0gW107XG4gICAgICAgIHRoaXMuX3NwZWVkcyA9IFtdO1xuICAgICAgICB0aGlzLl9pbml0Qm94QXJyYXkoKTtcbiAgICB9XG4gICAgTGV2ZWwucHJvdG90eXBlLl9pbml0Qm94QXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBibG9ja1NpemUgPSB0aGlzLmJsb2NrU2l6ZSwgc3RlcFNpemUgPSB0aGlzLnN0ZXBTaXplLCBkcmF3RGlzdGFuY2UgPSB0aGlzLmRyYXdEaXN0YW5jZSwgbGV2ZWwgPSB0aGlzLmxldmVsLCBfZmxvb3IgPSB0aGlzLl9mbG9vciwgX2NlaWxpbmcgPSB0aGlzLl9jZWlsaW5nO1xuICAgICAgICB2YXIgYm94ID0gbmV3IFRIUkVFLkJveEJ1ZmZlckdlb21ldHJ5KGJsb2NrU2l6ZSwgTUFYX1NURVBTICogc3RlcFNpemUsIGJsb2NrU2l6ZSwgMSwgMSwgMSk7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKHopIHtcbiAgICAgICAgICAgIFtfZmxvb3IsIF9jZWlsaW5nXS5mb3JFYWNoKGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgICAgICAgICBhcnIucHVzaChsZXZlbC5oZWlnaHRbMF0ubWFwKGZ1bmN0aW9uIChfLCBpZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsID0gX2NyZWF0ZU1hdGVyaWFsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBfdGhpcy5jb2xvcnNbKHogKyBpZHgpICUgX3RoaXMuY29sb3JzLmxlbmd0aF0sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aXRoVGV4dHVyZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGJveCwgbWF0ZXJpYWwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVzaDtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgeiA9IDA7IHogPCBkcmF3RGlzdGFuY2U7IHorKykge1xuICAgICAgICAgICAgX2xvb3BfMSh6KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGV2ZWwucHJvdG90eXBlLl9wYXJzZUxldmVsID0gZnVuY3Rpb24gKGxldmVsLCBsZW4pIHtcbiAgICAgICAgaWYgKGxlbiA9PT0gdm9pZCAwKSB7IGxlbiA9IDA7IH1cbiAgICAgICAgdmFyIHBhcnNlZExldmVsID0ge1xuICAgICAgICAgICAgX2N1clNwZWVkOiB0aGlzLl9pbml0aWFsU3BlZWQsXG4gICAgICAgICAgICBmbGFnczogW10sXG4gICAgICAgICAgICBoZWlnaHQ6IFtdLFxuICAgICAgICAgICAgc3BlZWRzOiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZXZlbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHIgPSBsZXZlbFtpXTtcbiAgICAgICAgICAgIGlmIChyIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcnB0ID0gclsxXTtcbiAgICAgICAgICAgICAgICBpZiAoclsyXSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZWRMZXZlbC5fY3VyU3BlZWQgPSByWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByID0gdGhpcy5fcGFyc2VMZXZlbChbclswXV0sIHBhcnNlZExldmVsLmhlaWdodC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGlfMSA9IDA7IGlfMSA8IHJwdDsgaV8xKyspIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkTGV2ZWwuaGVpZ2h0LnB1c2goci5oZWlnaHRbMF0pO1xuICAgICAgICAgICAgICAgICAgICBwYXJzZWRMZXZlbC5mbGFncy5wdXNoKHIuZmxhZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICBwYXJzZWRMZXZlbC5zcGVlZHMucHVzaChwYXJzZWRMZXZlbC5fY3VyU3BlZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHIgPSByLnNwbGl0KC8oLi4uKS8pLmZpbHRlcihmdW5jdGlvbiAoaSkgeyByZXR1cm4gaSAhPT0gXCJcIjsgfSk7XG4gICAgICAgICAgICAgICAgcGFyc2VkTGV2ZWwuaGVpZ2h0LnB1c2goci5tYXAoZnVuY3Rpb24gKGMsIGlkeCkge1xuICAgICAgICAgICAgICAgICAgICBjID0gYy5zdWJzdHIoMCwgMik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbGdzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJyclwiOiBNYXRoLnJhbmRvbSgpICogMjU2LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzc1wiOiAyNTYgKiBNYXRoLnNpbigobGVuICsgaWR4KSAqIChNYXRoLlBJIC8gMTgwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNjXCI6IDI1NiAqIE1hdGguY29zKChsZW4gKyBpZHgpICogKE1hdGguUEkgLyAxODApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2NcIjogMjU2ICogKE1hdGguY29zKGxlbikgKiAoTWF0aC5QSSAvIDE4MCkgKyBNYXRoLnNpbihpZHgpICogKE1hdGguUEkgLyAxODApKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlci5pc05hTihwYXJzZUludChjLCAxNikpID8gYWxnc1tjXSA6IHBhcnNlSW50KGMsIDE2KTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgcGFyc2VkTGV2ZWwuZmxhZ3MucHVzaChyLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gY1syXTsgfSkpO1xuICAgICAgICAgICAgICAgIHBhcnNlZExldmVsLnNwZWVkcy5wdXNoKHBhcnNlZExldmVsLl9jdXJTcGVlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VkTGV2ZWwubGVuZ3RoID0gcGFyc2VkTGV2ZWwuaGVpZ2h0Lmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHBhcnNlZExldmVsO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExldmVsLnByb3RvdHlwZSwgXCJkZXNjcmlwdGlvblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWwuaGVpZ2h0Lm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gci5qb2luKFwiIFwiKTsgfSkuam9pbihTdHJpbmcuZnJvbUNoYXJDb2RlKDEwKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIExldmVsLnByb3RvdHlwZS5hZGRUb1NjZW5lID0gZnVuY3Rpb24gKHNjZW5lLCB1c2VTaGFkb3dzKSB7XG4gICAgICAgIGlmICh1c2VTaGFkb3dzID09PSB2b2lkIDApIHsgdXNlU2hhZG93cyA9IGZhbHNlOyB9XG4gICAgICAgIHRoaXMudXBkYXRlU2NlbmUoMCwgdHJ1ZSk7XG4gICAgICAgIFt0aGlzLl9mbG9vciwgdGhpcy5fY2VpbGluZ10uZm9yRWFjaChmdW5jdGlvbiAocGxhbmUpIHsgcmV0dXJuIHBsYW5lLmZvckVhY2goZnVuY3Rpb24gKHopIHsgcmV0dXJuIHouZm9yRWFjaChmdW5jdGlvbiAobWVzaCkge1xuICAgICAgICAgICAgbWVzaC5jYXN0U2hhZG93ID0gdXNlU2hhZG93cztcbiAgICAgICAgICAgIG1lc2gucmVjZWl2ZVNoYWRvdyA9IHVzZVNoYWRvd3M7XG4gICAgICAgICAgICBzY2VuZS5hZGQobWVzaCk7XG4gICAgICAgIH0pOyB9KTsgfSk7XG4gICAgICAgIHJldHVybiBzY2VuZTtcbiAgICB9O1xuICAgIExldmVsLnByb3RvdHlwZS5nZXRGYWNlVmlzaWJpbGl0eSA9IGZ1bmN0aW9uICh3aGljaCwgeiwgeCkge1xuICAgICAgICB2YXIgY3VyLCBsZWZ0LCByaWdodCwgZnJvbnQsIHRvcFZpc2libGUgPSBmYWxzZSwgYm90dG9tVmlzaWJsZSA9IGZhbHNlLCBsZWZ0VmlzaWJsZSA9IGZhbHNlLCByaWdodFZpc2libGUgPSBmYWxzZSwgZnJvbnRWaXNpYmxlID0gZmFsc2UsIG90aGVyd2lzZSA9IHdoaWNoID09PSBGTE9PUiA/IDk5OTk5OSA6IC05OTk5OTk7XG4gICAgICAgIGlmICh3aGljaCA9PT0gRkxPT1IpIHtcbiAgICAgICAgICAgIGN1ciA9IHRoaXMuaGVpZ2h0QXRDb29yZGluYXRlcyh6LCB4KTtcbiAgICAgICAgICAgIGxlZnQgPSB0aGlzLmhlaWdodEF0Q29vcmRpbmF0ZXMoeiwgeCAtIDEpO1xuICAgICAgICAgICAgcmlnaHQgPSB0aGlzLmhlaWdodEF0Q29vcmRpbmF0ZXMoeiwgeCArIDEpO1xuICAgICAgICAgICAgZnJvbnQgPSB0aGlzLmhlaWdodEF0Q29vcmRpbmF0ZXMoeiAtIDEsIHgpO1xuICAgICAgICAgICAgdG9wVmlzaWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjdXIgPSB0aGlzLmNlaWxpbmdBdENvb3JkaW5hdGVzKHosIHgpO1xuICAgICAgICAgICAgbGVmdCA9IHRoaXMuY2VpbGluZ0F0Q29vcmRpbmF0ZXMoeiwgeCAtIDEpO1xuICAgICAgICAgICAgcmlnaHQgPSB0aGlzLmNlaWxpbmdBdENvb3JkaW5hdGVzKHosIHggKyAxKTtcbiAgICAgICAgICAgIGZyb250ID0gdGhpcy5jZWlsaW5nQXRDb29yZGluYXRlcyh6IC0gMSwgeCk7XG4gICAgICAgICAgICBib3R0b21WaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjdXIgPSBjdXIgIT09IHVuZGVmaW5lZCA/IGN1ciA6IG90aGVyd2lzZTtcbiAgICAgICAgbGVmdCA9IGxlZnQgIT09IHVuZGVmaW5lZCA/IGxlZnQgOiBvdGhlcndpc2U7XG4gICAgICAgIHJpZ2h0ID0gcmlnaHQgIT09IHVuZGVmaW5lZCA/IHJpZ2h0IDogb3RoZXJ3aXNlO1xuICAgICAgICBmcm9udCA9IGZyb250ICE9PSB1bmRlZmluZWQgPyBmcm9udCA6IG90aGVyd2lzZTtcbiAgICAgICAgaWYgKGxlZnQgIT09IGN1cikge1xuICAgICAgICAgICAgbGVmdFZpc2libGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyaWdodCAhPT0gY3VyKSB7XG4gICAgICAgICAgICByaWdodFZpc2libGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmcm9udCAhPT0gY3VyKSB7XG4gICAgICAgICAgICBmcm9udFZpc2libGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKGZyb250VmlzaWJsZSA/IDEgOiAwKSA8PCA0KSB8XG4gICAgICAgICAgICAoKGJvdHRvbVZpc2libGUgPyAxIDogMCkgPDwgMykgfFxuICAgICAgICAgICAgKCh0b3BWaXNpYmxlID8gMSA6IDApIDw8IDIpIHxcbiAgICAgICAgICAgICgobGVmdFZpc2libGUgPyAxIDogMCkgPDwgMSkgfFxuICAgICAgICAgICAgKChyaWdodFZpc2libGUgPyAxIDogMCkgPDwgMCk7XG4gICAgfTtcbiAgICBMZXZlbC5wcm90b3R5cGUudXBkYXRlU2NlbmUgPSBmdW5jdGlvbiAoY2FtZXJhWiwgZm9yY2UpIHtcbiAgICAgICAgaWYgKGZvcmNlID09PSB2b2lkIDApIHsgZm9yY2UgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgc3RlcFNpemUgPSB0aGlzLnN0ZXBTaXplLCBibG9ja1NpemUgPSB0aGlzLmJsb2NrU2l6ZSwgbGV2ZWwgPSB0aGlzLmxldmVsLCBkcmF3RGlzdGFuY2UgPSB0aGlzLmRyYXdEaXN0YW5jZSwgX2Zsb29yID0gdGhpcy5fZmxvb3IsIF9jZWlsaW5nID0gdGhpcy5fY2VpbGluZztcbiAgICAgICAgdmFyIGN1clJvdyA9IE1hdGgubWF4KE1hdGguZmxvb3IoLShjYW1lcmFaKSAvIGJsb2NrU2l6ZSksIDApIC0gMTtcbiAgICAgICAgaWYgKGN1clJvdyA8IDApIHtcbiAgICAgICAgICAgIGN1clJvdyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1heFZpc2libGVSb3cgPSBjdXJSb3cgKyBkcmF3RGlzdGFuY2UgLSAxO1xuICAgICAgICB2YXIgZGVsdGEgPSBjdXJSb3cgLSB0aGlzLmN1clJvdztcbiAgICAgICAgdmFyIGNvbG9ycyA9IHRoaXMuY29sb3JzO1xuICAgICAgICAvLyBtb3ZlIGZsb29yIGFzIG5lZWRlZCB0byB0aGUgZW5kIG9mIHRoZSBsZXZlbFxuICAgICAgICBpZiAoZm9yY2UgfHwgZGVsdGEgPiAwKSB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0WSA9IEhBTEZfTUFYX1NURVBTICogc3RlcFNpemUsIGhhbGZIZWlnaHQgPSBIQUxGX01BWF9TVEVQUyAqIHN0ZXBTaXplO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWx0YTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJvdyA9IF9mbG9vci5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIF9mbG9vci5wdXNoKHJvdyk7XG4gICAgICAgICAgICAgICAgcm93ID0gX2NlaWxpbmcuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICBfY2VpbGluZy5wdXNoKHJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciB6ID0gZm9yY2UgPyBjdXJSb3cgOiAobWF4VmlzaWJsZVJvdyAtIGRlbHRhKTsgeiA8PSBNYXRoLm1pbihsZXZlbC5sZW5ndGggLSAxLCBtYXhWaXNpYmxlUm93KTsgeisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJfMSA9IGxldmVsLmhlaWdodFt6XSwgZmxhZ3NJblJvd18xID0gbGV2ZWwuZmxhZ3Nbel07XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldFggPSAocl8xLmxlbmd0aCAvIDIpICogYmxvY2tTaXplIC0gKGJsb2NrU2l6ZSAvIDIpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSByXzEubGVuZ3RoIC0gMTsgeCA+IC0xOyB4LS0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSByXzFbeF0sIGZsYWdfMSA9IGZsYWdzSW5Sb3dfMVt4XSB8fCBcIiBcIiwgZmxvb3JfMSA9IF9mbG9vclt6IC0gY3VyUm93XVt4XSwgY2VpbGluZ18xID0gX2NlaWxpbmdbeiAtIGN1clJvd11beF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoID0gYyAqIHN0ZXBTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxvb3JfMS52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlaWxpbmdfMS52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9vcl8xLnBvc2l0aW9uLnNldCh4ICogYmxvY2tTaXplIC0gb2Zmc2V0WCwgLShoYWxmSGVpZ2h0ICsgb2Zmc2V0WSkgKyBoLCAteiAqIGJsb2NrU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZXNbZmxhZ18xXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRUZXh0dXJlKGZsb29yXzEubWF0ZXJpYWwsIGZsYWdfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0VGV4dHVyZShmbG9vcl8xLm1hdGVyaWFsLCBcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc05hTihwYXJzZUludChmbGFnXzEsIDE2KSkgJiYgZmxhZ18xLnRvVXBwZXJDYXNlKCkgPT09IGZsYWdfMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlaWxpbmdfMS5wb3NpdGlvbi5zZXQoeCAqIGJsb2NrU2l6ZSAtIG9mZnNldFgsIGggKyBwYXJzZUludChmbGFnXzEsIDE2KSAqIGJsb2NrU2l6ZSwgLXogKiBibG9ja1NpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlaWxpbmdfMS52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRldGVybWluZSBmYWNlIHZpc2liaWxpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRWaXNpYmlsaXR5KGZsb29yXzEubWF0ZXJpYWwsIHRoaXMuZ2V0RmFjZVZpc2liaWxpdHkoRkxPT1IsIHosIHgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRWaXNpYmlsaXR5KGNlaWxpbmdfMS5tYXRlcmlhbCwgdGhpcy5nZXRGYWNlVmlzaWJpbGl0eShDRUlMSU5HLCB6LCB4KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWlsaW5nXzEudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxvb3JfMS52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcmNlIHx8IChkZWx0YSA+IDApKSB7XG4gICAgICAgICAgICAvLyBjb2xvcnMgZ2V0IGNoYW5nZSBpcnJlc3BlY3RpdmUgb2YgYWRqdXN0aW5nIHZpc2libGUgZmxvb3JcbiAgICAgICAgICAgIGZvciAodmFyIHogPSBjdXJSb3c7IHogPD0gTWF0aC5taW4obGV2ZWwubGVuZ3RoIC0gMSwgbWF4VmlzaWJsZVJvdyk7IHorKykge1xuICAgICAgICAgICAgICAgIHZhciByID0gbGV2ZWwuaGVpZ2h0W3pdLCBmbGFnc0luUm93ID0gbGV2ZWwuZmxhZ3Nbel0sIGR6ID0geiAtIGN1clJvdztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gci5sZW5ndGggLSAxOyB4ID4gLTE7IHgtLSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmxvb3IgPSBfZmxvb3JbZHpdW3hdLCBjZWlsaW5nID0gX2NlaWxpbmdbZHpdW3hdLCBmbGFnID0gZmxhZ3MuZ2V0RmxhZyhmbGFnc0luUm93W3hdKSwgY29sb3JQaWNrcyA9IGZsYWcuY29sb3JzID8gZmxhZy5jb2xvcnMgOiBjb2xvcnMsIGNvbG9yID0gY29sb3JQaWNrc1soeiArIHgpICUgY29sb3JQaWNrcy5sZW5ndGhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmxvb3IudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NldENvbG9yKGZsb29yLm1hdGVyaWFsLCBjb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNlaWxpbmcudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NldENvbG9yKGNlaWxpbmcubWF0ZXJpYWwsIGNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1clJvdyA9IGN1clJvdztcbiAgICAgICAgdGhpcy5tYXhWaXNpYmxlUm93ID0gbWF4VmlzaWJsZVJvdztcbiAgICB9O1xuICAgIExldmVsLnByb3RvdHlwZS50YXJnZXRTcGVlZEF0Q29vcmRpbmF0ZXMgPSBmdW5jdGlvbiAoeikge1xuICAgICAgICB2YXIgciA9IHRoaXMubGV2ZWwuc3BlZWRzW3pdO1xuICAgICAgICBpZiAociAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbml0aWFsU3BlZWQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExldmVsLnByb3RvdHlwZS5oZWlnaHRBdENvb3JkaW5hdGVzID0gZnVuY3Rpb24gKHosIHgpIHtcbiAgICAgICAgdmFyIG9mZnNldFkgPSBIQUxGX01BWF9TVEVQUyAqIHRoaXMuc3RlcFNpemU7XG4gICAgICAgIHZhciByID0gdGhpcy5sZXZlbC5oZWlnaHRbel07XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHJbeF07XG4gICAgICAgICAgICBpZiAoYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoID0gLW9mZnNldFkgKyAoYyAqIHRoaXMuc3RlcFNpemUpO1xuICAgICAgICAgICAgcmV0dXJuIGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMZXZlbC5wcm90b3R5cGUuZmxhZ0F0Q29vcmRpbmF0ZXMgPSBmdW5jdGlvbiAoeiwgeCkge1xuICAgICAgICB2YXIgciA9IHRoaXMubGV2ZWwuZmxhZ3Nbel07XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICB2YXIgZmxhZyA9IHJbeF07XG4gICAgICAgICAgICByZXR1cm4gZmxhZ3MuZ2V0RmxhZyhmbGFnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExldmVsLnByb3RvdHlwZS5jZWlsaW5nQXRDb29yZGluYXRlcyA9IGZ1bmN0aW9uICh6LCB4KSB7XG4gICAgICAgIHZhciByID0gdGhpcy5sZXZlbC5oZWlnaHRbel0sIGZsYWdzID0gdGhpcy5sZXZlbC5mbGFnc1t6XTtcbiAgICAgICAgaWYgKHIgJiYgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciBjZWlsaW5nID0gcGFyc2VJbnQoZmxhZ3NbeF0sIDE2KTtcbiAgICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKGNlaWxpbmcpICYmIGZsYWdzW3hdLnRvVXBwZXJDYXNlKCkgPT0gZmxhZ3NbeF0pIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IHJbeF07XG4gICAgICAgICAgICAgICAgaWYgKGMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaCA9IHRoaXMuaGVpZ2h0QXRDb29yZGluYXRlcyh6LCB4KSArIChjZWlsaW5nICogdGhpcy5ibG9ja1NpemUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBMZXZlbC5wcm90b3R5cGUuX3Byb3BlcnR5QXRQb3NpdGlvbiA9IGZ1bmN0aW9uIChwb3NpdGlvbiwgZm4pIHtcbiAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuYmxvY2tTaXplO1xuICAgICAgICB2YXIgb2Zmc2V0WCA9ICh0aGlzLmxldmVsLmhlaWdodFswXS5sZW5ndGggLyAyKSAqIGJsb2NrU2l6ZTtcbiAgICAgICAgcmV0dXJuIGZuKE1hdGguZmxvb3IoLSgocG9zaXRpb24ueiAtIDEwMCkgLyBibG9ja1NpemUpKSwgTWF0aC5mbG9vcigocG9zaXRpb24ueCArIG9mZnNldFgpIC8gYmxvY2tTaXplKSk7XG4gICAgfTtcbiAgICBMZXZlbC5wcm90b3R5cGUuZmxhZ0F0UG9zaXRpb24gPSBmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3BlcnR5QXRQb3NpdGlvbihwb3NpdGlvbiwgdGhpcy5mbGFnQXRDb29yZGluYXRlcy5iaW5kKHRoaXMpKTtcbiAgICB9O1xuICAgIExldmVsLnByb3RvdHlwZS5oZWlnaHRBdFBvc2l0aW9uID0gZnVuY3Rpb24gKHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0eUF0UG9zaXRpb24ocG9zaXRpb24sIHRoaXMuaGVpZ2h0QXRDb29yZGluYXRlcy5iaW5kKHRoaXMpKTtcbiAgICB9O1xuICAgIExldmVsLnByb3RvdHlwZS5jZWlsaW5nQXRQb3NpdGlvbiA9IGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvcGVydHlBdFBvc2l0aW9uKHBvc2l0aW9uLCB0aGlzLmNlaWxpbmdBdENvb3JkaW5hdGVzLmJpbmQodGhpcykpO1xuICAgIH07XG4gICAgTGV2ZWwucHJvdG90eXBlLnRhcmdldFNwZWVkQXRQb3NpdGlvbiA9IGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvcGVydHlBdFBvc2l0aW9uKHBvc2l0aW9uLCB0aGlzLnRhcmdldFNwZWVkQXRDb29yZGluYXRlcy5iaW5kKHRoaXMpKTtcbiAgICB9O1xuICAgIExldmVsLmNyZWF0ZUxldmVsID0gZnVuY3Rpb24gKGxldmVsLCBvcHRzKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGV2ZWwobGV2ZWwsIG9wdHMpO1xuICAgIH07XG4gICAgcmV0dXJuIExldmVsO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IExldmVsO1xuTGV2ZWwuTUFYX1NURVBTID0gTUFYX1NURVBTO1xuTGV2ZWwuSEFMRl9NQVhfU1RFUFMgPSBIQUxGX01BWF9TVEVQUztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVRHVjJaV3d1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5Sk1aWFpsYkM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hQUVVGUExFdEJRVXNzUzBGQlN5eE5RVUZOTEZWQlFWVXNRMEZCUXp0QlFVVnNReXhQUVVGUExFdEJRVXNzVFVGQlRTeFpRVUZaTEVOQlFVTTdRVUZETDBJc1QwRkJUeXhSUVVGUkxFMUJRVTBzWlVGQlpTeERRVUZETzBGQlJYSkRMRWxCUVUwc1UwRkJVeXhIUVVGSExFZEJRVWNzUTBGQlF6dEJRVU4wUWl4SlFVRk5MR05CUVdNc1IwRkJSeXhIUVVGSExFTkJRVU03UVVGRk0wSXNTVUZCVFN4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMmhDTEVsQlFVMHNUMEZCVHl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVWc1FpeDVRa0ZCZVVJc1JVRkJhVVU3VVVGQmFrVXNORUpCUVdsRkxFVkJRUzlFTEdGQlFXRXNSVUZCWWl4clEwRkJZU3hGUVVGRkxHMUNRVUZyUWl4RlFVRnNRaXgxUTBGQmEwSXNSVUZCUlN4blFrRkJTeXhGUVVGRkxHVkJRV01zUlVGQlpDeHRRMEZCWXp0SlFVTXZSU3hKUVVGSkxGRkJRVkVzUTBGQlF6dEpRVU5pTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFVpeFJRVUZSTEVkQlFVY3NRMEZCUXl4UFFVRlBMRVZCUVVVc1RVRkJUU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFJRVUZSTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZCTEVsQlFVazdXVUZEYmtVc1QwRkJRU3hsUVVGbExFTkJRVU03WjBKQlExb3NTMEZCU3l4UFFVRkJPMmRDUVVOTUxFOUJRVThzVTBGQlFUdG5Ra0ZEVUN4WFFVRlhMRVZCUVVVc1NVRkJTU3hMUVVGTExFdEJRVXNzU1VGQlNTeEpRVUZKTzJGQlEzUkRMRU5CUVVNN1VVRktSaXhEUVVsRkxFTkJRVU1zUTBGQlF6dFJRVU5TTEN0Q1FVRXJRanRKUVVOdVF5eERRVUZETzBsQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRTaXhSUVVGUkxFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU03V1VGRGNrTXNTMEZCU3l4UFFVRkJPMWxCUTB3c1VVRkJVU3hGUVVGRkxGZEJRVmNzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJRenRaUVVNM1JTeFhRVUZYTEVWQlFVVXNWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEpRVUZKTzFsQlF5OURMRk5CUVZNc1JVRkJSU3hMUVVGTE8xTkJRMjVDTEVOQlFVTXNRMEZCUXp0UlFVTklMRkZCUVZFc1EwRkJReXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETzFGQlF6TkNMRkZCUVZFc1EwRkJReXhYUVVGWExFZEJRVWNzUzBGQlN5eERRVUZETzBsQlEycERMRU5CUVVNN1NVRkRSQ3hOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETzBGQlEzQkNMRU5CUVVNN1FVRkZSQ3gzUWtGQmQwSXNVVUZCVVN4RlFVRkZMRlZCUVZVN1NVRkRlRU1zUlVGQlJTeERRVUZETEVOQlFVTXNVVUZCVVN4WlFVRlpMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE5VSXNTVUZCU1N4VFFVRlRMRWRCUVVjc1VVRkJVU3hEUVVGRE8xRkJRM3BDTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03V1VGRE1VSXNTVUZCU1N4WFFVRlhMRWRCUVVjc1EwRkJReXhWUVVGVkxFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRE9VTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUjBGQlJ5eFhRVUZYTEVOQlFVTTdVVUZEZGtNc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTktMRkZCUVZFc1EwRkJReXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMGxCUXpORExFTkJRVU03UVVGRFRDeERRVUZETzBGQlJVUXNjVUpCUVhGQ0xGRkJRVkVzUlVGQlJTeEpRVUZKTzBsQlF5OUNMRVZCUVVVc1EwRkJReXhEUVVGRExGRkJRVkVzV1VGQldTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXpWQ0xGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRGJrTXNRMEZCUXp0SlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRMG9zVVVGQlVTeERRVUZETEZkQlFWY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRE1VTXNRMEZCUXp0QlFVTk1MRU5CUVVNN1FVRkZSQ3h0UWtGQmJVSXNVVUZCVVN4RlFVRkZMRXRCUVVzN1NVRkRPVUlzUlVGQlJTeERRVUZETEVOQlFVTXNVVUZCVVN4WlFVRlpMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE5VSXNTVUZCU1N4VFFVRlRMRWRCUVVjc1VVRkJVU3hEUVVGRE8xRkJRM3BDTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03V1VGRE1VSXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkRiRU1zUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVOS0xGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wbEJRemxDTEVOQlFVTTdRVUZEVEN4RFFVRkRPMEZCUlVRN1NVRkRTU3hsUVVGWkxFdEJRVXNzUlVGQlJTeEZRVU4zUXp0WlFVUjRReXcwUWtGRGQwTXNSVUZFZEVNc2FVSkJRV1VzUlVGQlppeHZRMEZCWlN4RlFVRkZMR2RDUVVGaExFVkJRV0lzYTBOQlFXRXNSVUZCUlN4dlFrRkJhVUlzUlVGQmFrSXNjME5CUVdsQ0xFVkJRMnhGTEdOQlFUWkNMRVZCUVRkQ0xHdEVRVUUyUWl4RlFVRkZMRzlDUVVGcFFpeEZRVUZxUWl4elEwRkJhVUk3VVVGRGFFUXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhUUVVGVExFTkJRVU03VVVGRE0wSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhSUVVGUkxFTkJRVU03VVVGRGVrSXNTVUZCU1N4RFFVRkRMRmxCUVZrc1IwRkJSeXhaUVVGWkxFTkJRVU03VVVGRGFrTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSeXhaUVVGWkxFTkJRVU03VVVGRmJFTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUTNKRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTJoQ0xFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NXVUZCV1N4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVWMFF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJRenRSUVVWeVFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOcVFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOdVFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOc1FpeEpRVUZKTEVOQlFVTXNZVUZCWVN4RlFVRkZMRU5CUVVNN1NVRkRla0lzUTBGQlF6dEpRVVZFTERaQ1FVRmhMRWRCUVdJN1VVRkJRU3hwUWtGMVFrTTdVVUYwUWtjc1NVRkJTU3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNSVUZETVVJc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlEzaENMRmxCUVZrc1IwRkJSeXhKUVVGSkxFTkJRVU1zV1VGQldTeEZRVU5vUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGRGJFSXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRM0JDTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8xRkJSVGRDTEVsQlFVa3NSMEZCUnl4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRk5CUVZNc1JVRkJSU3hUUVVGVExFZEJRVWNzVVVGQlVTeEZRVUZGTEZOQlFWTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzJkRFFVVnNSaXhEUVVGRE8xbEJRMDRzUTBGQlF5eE5RVUZOTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzUjBGQlJ6dG5Ra0ZETVVJc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZETEVOQlFVTXNSVUZCUlN4SFFVRkhPMjlDUVVOb1F5eEpRVUZKTEZGQlFWRXNSMEZCUnl4bFFVRmxMRU5CUVVNN2QwSkJRek5DTEV0QlFVc3NSVUZCUlN4TFFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETzNkQ1FVTnNSQ3hYUVVGWExFVkJRVVVzU1VGQlNUdDNRa0ZEYWtJc1MwRkJTeXhGUVVGRkxFbEJRVWs3Y1VKQlEyUXNRMEZCUXl4RFFVRkRPMjlDUVVOSUxFbEJRVWtzU1VGQlNTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdiMEpCUTNwRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTTdaMEpCUTJoQ0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEVWl4RFFVRkRMRU5CUVVNc1EwRkJRVHRSUVVOT0xFTkJRVU03VVVGYVJDeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEZsQlFWa3NSVUZCUlN4RFFVRkRMRVZCUVVVN2IwSkJRVFZDTEVOQlFVTTdVMEZaVkR0SlFVTk1MRU5CUVVNN1NVRkZSQ3d5UWtGQlZ5eEhRVUZZTEZWQlFWa3NTMEZCU3l4RlFVRkZMRWRCUVU4N1VVRkJVQ3h2UWtGQlFTeEZRVUZCTEU5QlFVODdVVUZEZEVJc1NVRkJTU3hYUVVGWExFZEJRVWM3V1VGRFpDeFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMR0ZCUVdFN1dVRkROMElzUzBGQlN5eEZRVUZGTEVWQlFVVTdXVUZEVkN4TlFVRk5MRVZCUVVVc1JVRkJSVHRaUVVOV0xFMUJRVTBzUlVGQlJTeEZRVUZGTzFOQlEySXNRMEZCUXp0UlFVTkdMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMWxCUTNCRExFbEJRVWtzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOcVFpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRmxCUVZrc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEY2tJc1NVRkJTU3hIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVObUxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlExQXNWMEZCVnl4RFFVRkRMRk5CUVZNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTJwRExFTkJRVU03WjBKQlEwUXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hYUVVGWExFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMmRDUVVONFJDeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRWRCUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUjBGQlF5eEhRVUZITEVkQlFVY3NSVUZCUlN4SFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRE8yOUNRVU16UWl4WFFVRlhMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlEzSkRMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEYmtNc1YwRkJWeXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8yZENRVU51UkN4RFFVRkRPMWxCUTB3c1EwRkJRenRaUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzJkQ1FVTktMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGQkxFTkJRVU1zU1VGQlNTeFBRVUZCTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVZJc1EwRkJVU3hEUVVGRExFTkJRVU03WjBKQlF6TkRMRmRCUVZjc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJReXhEUVVGRExFVkJRVVVzUjBGQlJ6dHZRa0ZEYWtNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU51UWl4SlFVRkpMRWxCUVVrc1IwRkJSenQzUWtGRFVDeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFZEJRVWM3ZDBKQlEzcENMRWxCUVVrc1JVRkJSU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU03ZDBKQlEyNUVMRWxCUVVrc1JVRkJSU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU03ZDBKQlEyNUVMRWxCUVVrc1JVRkJSU3hIUVVGSExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNSMEZCUnl4SFFVRkhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUXp0eFFrRkRiRVlzUTBGQlF6dHZRa0ZEUml4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRkZCUVZFc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdaMEpCUTNKRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTBvc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGQkxFTkJRVU1zU1VGQlNTeFBRVUZCTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJTaXhEUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTjZReXhYUVVGWExFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03V1VGRGJrUXNRMEZCUXp0UlFVTk1MRU5CUVVNN1VVRkRSQ3hYUVVGWExFTkJRVU1zVFVGQlRTeEhRVUZITEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJReTlETEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNN1NVRkRka0lzUTBGQlF6dEpRVVZFTEhOQ1FVRkpMRGhDUVVGWE8yRkJRV1k3V1VGRFNTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEZWQlFVRXNRMEZCUXl4SlFVRkpMRTlCUVVFc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCV0N4RFFVRlhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMnBHTEVOQlFVTTdPenRQUVVGQk8wbEJSVVFzTUVKQlFWVXNSMEZCVml4VlFVRlhMRXRCUVVzc1JVRkJSU3hWUVVGclFqdFJRVUZzUWl3eVFrRkJRU3hGUVVGQkxHdENRVUZyUWp0UlFVVm9ReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVNeFFpeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkJMRXRCUVVzc1NVRkJTU3hQUVVGQkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4RFFVRkRMRWxCUVVrc1QwRkJRU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNTVUZCU1R0WlFVTXpSU3hKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEZWQlFWVXNRMEZCUXp0WlFVTTNRaXhKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEZWQlFWVXNRMEZCUXp0WlFVTm9ReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTNCQ0xFTkJRVU1zUTBGQlF5eEZRVW9yUkN4RFFVa3ZSQ3hEUVVGRExFVkJTakpETEVOQlNUTkRMRU5CUVVNc1EwRkJRenRSUVVWTUxFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTTdTVUZEYWtJc1EwRkJRenRKUVVWRUxHbERRVUZwUWl4SFFVRnFRaXhWUVVGclFpeExRVUZMTEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNN1VVRkRla0lzU1VGQlNTeEhRVUZITEVWQlEwZ3NTVUZCU1N4RlFVTktMRXRCUVVzc1JVRkRUQ3hMUVVGTExFVkJRMHdzVlVGQlZTeEhRVUZITEV0QlFVc3NSVUZCUlN4aFFVRmhMRWRCUVVjc1MwRkJTeXhGUVVONlF5eFhRVUZYTEVkQlFVY3NTMEZCU3l4RlFVRkZMRmxCUVZrc1IwRkJSeXhMUVVGTExFVkJRM3BETEZsQlFWa3NSMEZCUnl4TFFVRkxMRVZCUTNCQ0xGTkJRVk1zUjBGQlJ5eExRVUZMTEV0QlFVc3NTMEZCU3l4SFFVRkhMRTFCUVUwc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF6dFJRVVZ1UkN4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFdEJRVXNzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnNRaXhIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnlReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRNVU1zUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRek5ETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU16UXl4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJRM1JDTEVOQlFVTTdVVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVOS0xFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNSRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNelF5eExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRE5VTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6VkRMR0ZCUVdFc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRGVrSXNRMEZCUXp0UlFVTkVMRWRCUVVjc1IwRkJSeXhIUVVGSExFdEJRVXNzVTBGQlV5eEhRVUZITEVkQlFVY3NSMEZCUnl4VFFVRlRMRU5CUVVNN1VVRkRNVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NTMEZCU3l4VFFVRlRMRWRCUVVjc1NVRkJTU3hIUVVGSExGTkJRVk1zUTBGQlF6dFJRVU0zUXl4TFFVRkxMRWRCUVVjc1MwRkJTeXhMUVVGTExGTkJRVk1zUjBGQlJ5eExRVUZMTEVkQlFVY3NVMEZCVXl4RFFVRkRPMUZCUTJoRUxFdEJRVXNzUjBGQlJ5eExRVUZMTEV0QlFVc3NVMEZCVXl4SFFVRkhMRXRCUVVzc1IwRkJSeXhUUVVGVExFTkJRVU03VVVGRmFFUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEWml4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJRM1pDTEVOQlFVTTdVVUZEUkN4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTm9RaXhaUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETzFGQlEzaENMRU5CUVVNN1VVRkRSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOb1FpeFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTNoQ0xFTkJRVU03VVVGRlJDeE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRmxCUVZrc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUXpkQ0xFTkJRVU1zUTBGQlF5eGhRVUZoTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU01UWl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkRNMElzUTBGQlF5eERRVUZETEZkQlFWY3NSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFsQlF6VkNMRU5CUVVNc1EwRkJReXhaUVVGWkxFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJSWHBETEVOQlFVTTdTVUZGUkN3eVFrRkJWeXhIUVVGWUxGVkJRVmtzVDBGQlR5eEZRVUZGTEV0QlFXRTdVVUZCWWl4elFrRkJRU3hGUVVGQkxHRkJRV0U3VVVGRE9VSXNTVUZCU1N4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGRGVFSXNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRekZDTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVOc1FpeFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrc1JVRkRhRU1zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUTNCQ0xGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMUZCUlRkQ0xFbEJRVWtzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1UwRkJVeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTJ4RkxFVkJRVVVzUTBGQlF5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMklzVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTm1MRU5CUVVNN1VVRkRSQ3hKUVVGSkxHRkJRV0VzUjBGQlJ5eE5RVUZOTEVkQlFVY3NXVUZCV1N4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVNNVF5eEpRVUZKTEV0QlFVc3NSMEZCUnl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF6dFJRVVZxUXl4SlFVRkpMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETzFGQlJYcENMQ3REUVVFclF6dFJRVU12UXl4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFbEJRVWtzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRja0lzU1VGQlNTeFBRVUZQTEVkQlFVY3NZMEZCWXl4SFFVRkhMRkZCUVZFc1JVRkJSU3hWUVVGVkxFZEJRVWNzWTBGQll5eEhRVUZITEZGQlFWRXNRMEZCUXp0WlFVVm9SaXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFdEJRVXNzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMmRDUVVNM1FpeEpRVUZKTEVkQlFVY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03WjBKQlEzcENMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdaMEpCUTJwQ0xFZEJRVWNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1owSkJRM1pDTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRGRrSXNRMEZCUXp0WlFVVkVMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEV0QlFVc3NSMEZCUnl4TlFVRk5MRWRCUVVjc1EwRkJReXhoUVVGaExFZEJRVWNzUzBGQlN5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRVZCUVVVc1lVRkJZU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0blFrRkRla2NzU1VGQlNTeEhRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGRGJrSXNXVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTJoRExFbEJRVWtzVDBGQlR5eEhRVUZITEVOQlFVTXNSMEZCUXl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eFRRVUZUTEVkQlFVY3NRMEZCUXl4VFFVRlRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlF6TkVMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRE8yOUNRVU55UXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlExSXNUVUZCU1N4SFFVRkhMRmxCUVZVc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeEhRVUZITEVWQlF6TkNMRTlCUVVzc1IwRkJSeXhOUVVGTkxFTkJRVU1zUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVNM1FpeFRRVUZQTEVkQlFVY3NVVUZCVVN4RFFVRkRMRU5CUVVNc1IwRkJSeXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkRkRU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU03ZDBKQlEyeENMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTTdkMEpCUTNKQ0xFOUJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRPM2RDUVVOeVFpeFRRVUZQTEVOQlFVTXNUMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJRenQzUWtGRGVFSXNUMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEZOQlFWTXNSMEZCUnl4UFFVRlBMRVZCUVVVc1EwRkJReXhEUVVGRExGVkJRVlVzUjBGQlJ5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEVOQlFVTTdkMEpCUTNwR0xFVkJRVVVzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03TkVKQlEycENMRmRCUVZjc1EwRkJReXhQUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTEUxQlFVa3NRMEZCUXl4RFFVRkRPM2RDUVVOMFF5eERRVUZETzNkQ1FVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE96UkNRVU5LTEZkQlFWY3NRMEZCUXl4UFFVRkxMRU5CUVVNc1VVRkJVU3hGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzNkQ1FVTnlReXhEUVVGRE8zZENRVU5FTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWtzVFVGQlNTeERRVUZETEZkQlFWY3NSVUZCUlN4TFFVRkxMRTFCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03TkVKQlEyNUZMRk5CUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4VFFVRlRMRWRCUVVjc1QwRkJUeXhGUVVGRkxFTkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNUVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhIUVVGSExGTkJRVk1zUlVGQlJTeERRVUZETEVOQlFVTXNSMEZCUnl4VFFVRlRMRU5CUVVNc1EwRkJRenMwUWtGRGJFY3NVMEZCVHl4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU03ZDBKQlF6TkNMRU5CUVVNN2QwSkJSVVFzTkVKQlFUUkNPM2RDUVVNMVFpeGpRVUZqTEVOQlFVTXNUMEZCU3l4RFFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPM2RDUVVOd1JTeGpRVUZqTEVOQlFVTXNVMEZCVHl4RFFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVVMVJTeERRVUZETzI5Q1FVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8zZENRVU5LTEZOQlFVOHNRMEZCUXl4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRE8zZENRVU40UWl4UFFVRkxMRU5CUVVNc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlF6dHZRa0ZETVVJc1EwRkJRenRuUWtGRFRDeERRVUZETzFsQlEwd3NRMEZCUXp0UlFVTk1MRU5CUVVNN1VVRkZSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzWkNMRFJFUVVFMFJEdFpRVU0xUkN4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRVZCUVVVc1lVRkJZU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0blFrRkRka1VzU1VGQlNTeERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGRGJrSXNWVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlF6TkNMRVZCUVVVc1IwRkJSeXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETzJkQ1FVTndRaXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF6dHZRa0ZEY2tNc1NVRkJTU3hMUVVGTExFZEJRVWNzVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVOeVFpeFBRVUZQTEVkQlFVY3NVVUZCVVN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVU42UWl4SlFVRkpMRWRCUVVjc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkRia01zVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eE5RVUZOTEVWQlF5OURMRXRCUVVzc1IwRkJSeXhWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzI5Q1FVTndSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJRenQzUWtGRGFFSXNVMEZCVXl4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdiMEpCUTNKRExFTkJRVU03YjBKQlEwUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUTJ4Q0xGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8yOUNRVU4yUXl4RFFVRkRPMmRDUVVOTUxFTkJRVU03V1VGRFRDeERRVUZETzFGQlEwd3NRMEZCUXp0UlFVVkVMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETzFGQlEzSkNMRWxCUVVrc1EwRkJReXhoUVVGaExFZEJRVWNzWVVGQllTeERRVUZETzBsQlEzWkRMRU5CUVVNN1NVRkZSQ3gzUTBGQmQwSXNSMEZCZUVJc1ZVRkJlVUlzUTBGQlF6dFJRVU4wUWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNM1FpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5zUWl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMklzUTBGQlF6dFJRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUTBvc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTTdVVUZET1VJc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRlJDeHRRMEZCYlVJc1IwRkJia0lzVlVGQmIwSXNRMEZCUXl4RlFVRkZMRU5CUVVNN1VVRkRjRUlzU1VGQlNTeFBRVUZQTEVkQlFVY3NZMEZCWXl4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU03VVVGRE4wTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkROMElzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOS0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOaUxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU5zUWl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRE8xbEJRM0pDTEVOQlFVTTdXVUZEUkN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFOUJRVThzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03V1VGRGRrTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOaUxFTkJRVU03VVVGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTktMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU03VVVGRGNrSXNRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkZSQ3hwUTBGQmFVSXNSMEZCYWtJc1ZVRkJhMElzUTBGQlF5eEZRVUZGTEVOQlFVTTdVVUZEYkVJc1NVRkJTU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE5VSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5LTEVsQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5vUWl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTXZRaXhEUVVGRE8xRkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdXVUZEU2l4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRE8xRkJRM0pDTEVOQlFVTTdTVUZEVEN4RFFVRkRPMGxCUlVRc2IwTkJRVzlDTEVkQlFYQkNMRlZCUVhGQ0xFTkJRVU1zUlVGQlJTeERRVUZETzFGQlEzSkNMRWxCUVVrc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVONFFpeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYUVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRZaXhKUVVGSkxFOUJRVThzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzFsQlEzSkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNWMEZCVnl4RlFVRkZMRWxCUVVrc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRMMFFzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU5pTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTnNRaXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETzJkQ1FVTnlRaXhEUVVGRE8yZENRVU5FTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8yZENRVU53UlN4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMklzUTBGQlF6dFJRVU5NTEVOQlFVTTdVVUZEUkN4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRE8wbEJRM0pDTEVOQlFVTTdTVUZGUkN4dFEwRkJiVUlzUjBGQmJrSXNWVUZCYjBJc1VVRkJVU3hGUVVGRkxFVkJRVVU3VVVGRE5VSXNTVUZCU1N4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF6dFJRVU12UWl4SlFVRkpMRTlCUVU4c1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4VFFVRlRMRU5CUVVNN1VVRkROVVFzVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1IwRkJSeXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlF6ZEhMRU5CUVVNN1NVRkZSQ3c0UWtGQll5eEhRVUZrTEZWQlFXVXNVVUZCVVR0UlFVTnVRaXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRha1lzUTBGQlF6dEpRVVZFTEdkRFFVRm5RaXhIUVVGb1FpeFZRVUZwUWl4UlFVRlJPMUZCUTNKQ0xFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOdVJpeERRVUZETzBsQlJVUXNhVU5CUVdsQ0xFZEJRV3BDTEZWQlFXdENMRkZCUVZFN1VVRkRkRUlzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFJRVUZSTEVWQlFVVXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM0JHTEVOQlFVTTdTVUZGUkN4eFEwRkJjVUlzUjBGQmNrSXNWVUZCYzBJc1VVRkJVVHRSUVVNeFFpeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGVFWXNRMEZCUXp0SlFVVk5MR2xDUVVGWExFZEJRV3hDTEZWQlFXMUNMRXRCUVVzc1JVRkJSU3hKUVVGSk8xRkJRekZDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRXRCUVVzc1EwRkJReXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdTVUZEYkVNc1EwRkJRenRKUVVWTUxGbEJRVU03UVVGQlJDeERRVUZETEVGQk1WUkVMRWxCTUZSRE96dEJRVVZFTEV0QlFVc3NRMEZCUXl4VFFVRlRMRWRCUVVjc1UwRkJVeXhEUVVGRE8wRkJRelZDTEV0QlFVc3NRMEZCUXl4alFVRmpMRWRCUVVjc1kwRkJZeXhEUVVGREluMD1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3d3dy9qcy9MZXZlbC5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgQ29udHJvbGxlckNvbGxlY3Rpb24gZnJvbSBcIi4vQ29udHJvbGxlcnMvQ29udHJvbGxlckNvbGxlY3Rpb24uanNcIjtcbmltcG9ydCBHYW1lIGZyb20gXCIuL0dhbWUuanNcIjtcbmltcG9ydCBLZXlib2FyZENvbnRyb2xsZXIgZnJvbSBcIi4vQ29udHJvbGxlcnMvS2V5Ym9hcmRDb250cm9sbGVyLmpzXCI7XG5pbXBvcnQgTWV0YUNvbnRyb2xsZXIgZnJvbSBcIi4vQ29udHJvbGxlcnMvTWV0YUNvbnRyb2xsZXIuanNcIjtcbmltcG9ydCBUb3VjaENvbnRyb2xsZXIgZnJvbSBcIi4vQ29udHJvbGxlcnMvVG91Y2hDb250cm9sbGVyLmpzXCI7XG5pbXBvcnQgYXVkaW9NYW5hZ2VyIGZyb20gXCIuL0F1ZGlvTWFuYWdlci5qc1wiO1xuaW1wb3J0IFNWR0luamVjdG9yIGZyb20gXCJzdmctaW5qZWN0b3JcIjtcblNWR0luamVjdG9yKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbWcuaW5qZWN0LXN2Z1wiKSk7XG4vLyBzb3VuZHMgd2UgbmVlZCBmcm9tIHRoZSBzdGFydFxuYXVkaW9NYW5hZ2VyLmFkZCh7IG5hbWU6IFwiYmdcIiwgdXJsOiBcIm11c2ljL3JvY2Nvdy13ZWxjb21lLm1wM1wiLCBhdXRvcGxheTogdHJ1ZSwgbG9vcDogdHJ1ZSB9KTtcbmF1ZGlvTWFuYWdlci5hZGQoeyBuYW1lOiBcImp1bXBcIiwgdXJsOiBcInNmeC9qdW1wLndhdlwiLCB2b2x1bWU6IDAuNSB9KTtcbmF1ZGlvTWFuYWdlci5hZGQoeyBuYW1lOiBcImV4cGxvZGVcIiwgdXJsOiBcInNmeC9leHBsb3Npb24ud2F2XCIgfSk7XG52YXIga2JkID0gbmV3IEtleWJvYXJkQ29udHJvbGxlcigpO1xudmFyIG1ldGEgPSBuZXcgTWV0YUNvbnRyb2xsZXIoKTtcbnZhciB0b3VjaCA9IG5ldyBUb3VjaENvbnRyb2xsZXIoKTtcbnZhciBjb250cm9sbGVyc1RvQ3JlYXRlID0gW2tiZCwgbWV0YV07XG5pZiAoXCJvbnRvdWNoc3RhcnRcIiBpbiB3aW5kb3cpIHtcbiAgICBjb250cm9sbGVyc1RvQ3JlYXRlLnB1c2godG91Y2gpO1xufVxudmFyIGNvbnRyb2xsZXJzID0gbmV3IENvbnRyb2xsZXJDb2xsZWN0aW9uKGNvbnRyb2xsZXJzVG9DcmVhdGUpO1xudmFyIGdhbWUgPSBuZXcgR2FtZSh7IGNvbnRyb2xsZXJzOiBjb250cm9sbGVycyB9KTtcbmdhbWUuc3RhcnQoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hQUVVGUExHOUNRVUZ2UWl4TlFVRk5MSFZEUVVGMVF5eERRVUZETzBGQlEzcEZMRTlCUVU4c1NVRkJTU3hOUVVGTkxGZEJRVmNzUTBGQlF6dEJRVU0zUWl4UFFVRlBMR3RDUVVGclFpeE5RVUZOTEhGRFFVRnhReXhEUVVGRE8wRkJRM0pGTEU5QlFVOHNZMEZCWXl4TlFVRk5MR2xEUVVGcFF5eERRVUZETzBGQlF6ZEVMRTlCUVU4c1pVRkJaU3hOUVVGTkxHdERRVUZyUXl4RFFVRkRPMEZCUnk5RUxFOUJRVThzV1VGQldTeE5RVUZOTEcxQ1FVRnRRaXhEUVVGRE8wRkJSVGRETEU5QlFVOHNWMEZCVnl4TlFVRk5MR05CUVdNc1EwRkJRenRCUVVWMlF5eFhRVUZYTEVOQlFVTXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVVY2UkN4blEwRkJaME03UVVGRGFFTXNXVUZCV1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNSMEZCUnl4RlFVRkZMREJDUVVFd1FpeEZRVUZGTEZGQlFWRXNSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZET1VZc1dVRkJXU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVsQlFVa3NSVUZCUlN4TlFVRk5MRVZCUVVVc1IwRkJSeXhGUVVGRkxHTkJRV01zUlVGQlJTeE5RVUZOTEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOeVJTeFpRVUZaTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1NVRkJTU3hGUVVGRkxGTkJRVk1zUlVGQlJTeEhRVUZITEVWQlFVVXNiVUpCUVcxQ0xFVkJRVVVzUTBGQlF5eERRVUZETzBGQlJXaEZMRWxCUVVrc1IwRkJSeXhIUVVGSExFbEJRVWtzYTBKQlFXdENMRVZCUVVVc1EwRkJRenRCUVVOdVF5eEpRVUZKTEVsQlFVa3NSMEZCUnl4SlFVRkpMR05CUVdNc1JVRkJSU3hEUVVGRE8wRkJRMmhETEVsQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrc1pVRkJaU3hGUVVGRkxFTkJRVU03UVVGRmJFTXNTVUZCU1N4dFFrRkJiVUlzUjBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVOMFF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4alFVRmpMRWxCUVVrc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU16UWl4dFFrRkJiVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRjRU1zUTBGQlF6dEJRVVZFTEVsQlFVa3NWMEZCVnl4SFFVRkhMRWxCUVVrc2IwSkJRVzlDTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF6dEJRVU5vUlN4SlFVRkpMRWxCUVVrc1IwRkJSeXhKUVVGSkxFbEJRVWtzUTBGQlF5eEZRVUZGTEZkQlFWY3NZVUZCUVN4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOeVF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNaWZRPT1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3d3dy9qcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgTVNfSU5fQV9NSU5VVEUgPSA2MCAqIDEwMDA7XG52YXIgQmVhdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmVhdChfYSkge1xuICAgICAgICB2YXIgX2IgPSAoX2EgPT09IHZvaWQgMCA/IHt9IDogX2EpLmJwbSwgYnBtID0gX2IgPT09IHZvaWQgMCA/IDEyMCA6IF9iO1xuICAgICAgICB0aGlzLl9icG0gPSAwO1xuICAgICAgICB0aGlzLl9tc0JldHdlZW5CZWF0cyA9IDA7XG4gICAgICAgIHRoaXMuX2JlYXRTdGFydGVkQXQgPSAwO1xuICAgICAgICB0aGlzLmJlYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5icG0gPSBicG07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCZWF0LnByb3RvdHlwZSwgXCJicG1cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9icG07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgIHRoaXMuX2JwbSA9IHY7XG4gICAgICAgICAgICB0aGlzLl9tc0JldHdlZW5CZWF0cyA9IHYgPyAoTVNfSU5fQV9NSU5VVEUpIC8gdiA6IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5iZWF0aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydEJlYXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJlYXQucHJvdG90eXBlLCBcIm1zQmV0d2VlbkJlYXRzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbXNCZXR3ZWVuQmVhdHM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCZWF0LnByb3RvdHlwZSwgXCJ0aW1lU2luY2VMYXN0QmVhdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYmVhdGluZyAmJiB0aGlzLl9tc0JldHdlZW5CZWF0cyA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHBlcmZvcm1hbmNlLm5vdygpIC0gdGhpcy5fYmVhdFN0YXJ0ZWRBdCkgJSB0aGlzLl9tc0JldHdlZW5CZWF0cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmVhdC5wcm90b3R5cGUsIFwibm9ybWFsaXplZFRpbWVTaW5jZUxhc3RCZWF0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5iZWF0aW5nICYmIHRoaXMuX21zQmV0d2VlbkJlYXRzID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRpbWVTaW5jZUxhc3RCZWF0IC8gdGhpcy5fbXNCZXR3ZWVuQmVhdHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJlYXQucHJvdG90eXBlLCBcInRpbWVGb3JCZWF0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbm93ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICBpZiAoKG5vdyAtIHRoaXMuX2JlYXRTdGFydGVkQXQpID4gdGhpcy5fbXNCZXR3ZWVuQmVhdHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9iZWF0U3RhcnRlZEF0ID0gbm93O1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBCZWF0LnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5iZWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fYmVhdFN0YXJ0ZWRBdCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH07XG4gICAgQmVhdC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5iZWF0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2JlYXRTdGFydGVkQXQgPSAwO1xuICAgIH07XG4gICAgcmV0dXJuIEJlYXQ7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgQmVhdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVFtVmhkQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklrSmxZWFF1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCVFN4alFVRmpMRWRCUVVjc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF6dEJRVVZxUXp0SlFVTkpMR05CUVZrc1JVRkJhMEk3V1VGQmFFSXNhME5CUVZNc1JVRkJWQ3c0UWtGQlV6dFJRVU51UWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU5rTEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRM3BDTEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRM2hDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJSWEpDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRE8wbEJRMjVDTEVOQlFVTTdTVUZGUkN4elFrRkJTU3h4UWtGQlJ6dGhRVUZRTzFsQlEwa3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRGNrSXNRMEZCUXp0aFFVVkVMRlZCUVZFc1EwRkJRenRaUVVOTUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUTJRc1NVRkJTU3hEUVVGRExHVkJRV1VzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFsQlEzQkVMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVObUxFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXp0WlFVTnlRaXhEUVVGRE8xRkJRMHdzUTBGQlF6czdPMDlCVWtFN1NVRlZSQ3h6UWtGQlNTeG5RMEZCWXp0aFFVRnNRanRaUVVOSkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRPMUZCUTJoRExFTkJRVU03T3p0UFFVRkJPMGxCUlVRc2MwSkJRVWtzYlVOQlFXbENPMkZCUVhKQ08xbEJRMGtzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1NVRkJTU3hKUVVGSkxFTkJRVU1zWlVGQlpTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRek5ETEUxQlFVMHNRMEZCUXl4RFFVRkRMRmRCUVZjc1EwRkJReXhIUVVGSExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF6dFpRVU0xUlN4RFFVRkRPMWxCUTBRc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5pTEVOQlFVTTdPenRQUVVGQk8wbEJSVVFzYzBKQlFVa3NOa05CUVRKQ08yRkJRUzlDTzFsQlEwa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzU1VGQlNTeEpRVUZKTEVOQlFVTXNaVUZCWlN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlF6TkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRWRCUVVjc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF6dFpRVU42UkN4RFFVRkRPMWxCUTBRc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5pTEVOQlFVTTdPenRQUVVGQk8wbEJSVVFzYzBKQlFVa3NOa0pCUVZjN1lVRkJaanRaUVVOSkxFbEJRVWtzUjBGQlJ5eEhRVUZITEZkQlFWY3NRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRaUVVNMVFpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEzSkVMRWxCUVVrc1EwRkJReXhqUVVGakxFZEJRVWNzUjBGQlJ5eERRVUZETzJkQ1FVTXhRaXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETzFsQlEyaENMRU5CUVVNN1dVRkRSQ3hOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETzFGQlEycENMRU5CUVVNN096dFBRVUZCTzBsQlJVUXNiMEpCUVVzc1IwRkJURHRSUVVOSkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTNCQ0xFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NWMEZCVnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8wbEJRelZETEVOQlFVTTdTVUZGUkN4dFFrRkJTU3hIUVVGS08xRkJRMGtzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVNN1VVRkRja0lzU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkROVUlzUTBGQlF6dEpRVWxNTEZkQlFVTTdRVUZCUkN4RFFVRkRMRUZCTjBSRUxFbEJOa1JESW4wPVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vd3d3L2pzL0JlYXQuanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBEZWx0YSBmcm9tIFwiLi4vRGVsdGEuanNcIjtcbnZhciBDb250cm9sbGVyQ29sbGVjdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29udHJvbGxlckNvbGxlY3Rpb24oY29udHJvbGxlcnMpIHtcbiAgICAgICAgaWYgKGNvbnRyb2xsZXJzID09PSB2b2lkIDApIHsgY29udHJvbGxlcnMgPSBbXTsgfVxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzID0gY29udHJvbGxlcnM7XG4gICAgICAgIHRoaXMuX3N0YXRlcyA9IFtdO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IHt9O1xuICAgICAgICB0aGlzLl9kZWx0YSA9IG5ldyBEZWx0YSh7IHQ6IHBlcmZvcm1hbmNlLm5vdygpLCBtYXhBY2NlcHRhYmxlRGVsdGE6IDEwMDAgfSk7XG4gICAgICAgIHRoaXMudGltZVNpbmNlTGFzdElucHV0ID0gMTAwMDtcbiAgICB9XG4gICAgQ29udHJvbGxlckNvbGxlY3Rpb24ucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY29udHJvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbGxlcikgeyByZXR1cm4gY29udHJvbGxlci5pbml0KF90aGlzKTsgfSk7XG4gICAgfTtcbiAgICBDb250cm9sbGVyQ29sbGVjdGlvbi5wcm90b3R5cGUuYWRkQ29udHJvbGxlciA9IGZ1bmN0aW9uIChjb250cm9sbGVyKSB7XG4gICAgICAgIGNvbnRyb2xsZXIuaW5pdCh0aGlzKTtcbiAgICAgICAgdGhpcy5jb250cm9sbGVycy5wdXNoKGNvbnRyb2xsZXIpO1xuICAgIH07XG4gICAgQ29udHJvbGxlckNvbGxlY3Rpb24ucHJvdG90eXBlLnJlbW92ZUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoY29udHJvbGxlcikge1xuICAgICAgICBpZiAoY29udHJvbGxlci5jbGVhblVwKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyLmNsZWFuVXAoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaWR4ID0gdGhpcy5jb250cm9sbGVycy5pbmRleE9mKGNvbnRyb2xsZXIpO1xuICAgICAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnRyb2xsZXJDb2xsZWN0aW9uLnByb3RvdHlwZS5yZWdpc3RlclN3aXRjaCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZXMuaW5kZXhPZihuYW1lKSA+IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGVzLnB1c2gobmFtZSk7XG4gICAgICAgIHRoaXMuX3N0YXRlW25hbWVdID0gZmFsc2U7XG4gICAgfTtcbiAgICBDb250cm9sbGVyQ29sbGVjdGlvbi5wcm90b3R5cGUuc3RhdGVVcGRhdGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRpbWVTaW5jZUxhc3RJbnB1dCA9IHRoaXMuX2RlbHRhLnVwZGF0ZShwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgfTtcbiAgICBDb250cm9sbGVyQ29sbGVjdGlvbi5wcm90b3R5cGUucmVhZFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZSwgc3RhdGVzID0gdGhpcy5fc3RhdGVzLCBjb250cm9sbGVycyA9IHRoaXMuY29udHJvbGxlcnMsIHNvbWVJbnB1dCA9IGZhbHNlLCBzdGF0ZXNMZW4gPSBzdGF0ZXMubGVuZ3RoIC0gMSwgaTtcbiAgICAgICAgZm9yIChpID0gc3RhdGVzTGVuOyBpID4gLTE7IGktLSkge1xuICAgICAgICAgICAgc3RhdGVbc3RhdGVzW2ldXSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IGNvbnRyb2xsZXJzLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgICAgICAgICB2YXIgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgbCA9IHN0YXRlc0xlbjsgbCA+IC0xOyBsLS0pIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGVUb0NoZWNrID0gc3RhdGVzW2xdO1xuICAgICAgICAgICAgICAgIGlmIChjb250cm9sbGVyW3N0YXRlVG9DaGVja10pIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVbc3RhdGVUb0NoZWNrXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHNvbWVJbnB1dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzb21lSW5wdXQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVVcGRhdGVkKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlO1xuICAgIH07XG4gICAgcmV0dXJuIENvbnRyb2xsZXJDb2xsZWN0aW9uO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXJDb2xsZWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pUTI5dWRISnZiR3hsY2tOdmJHeGxZM1JwYjI0dWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpEYjI1MGNtOXNiR1Z5UTI5c2JHVmpkR2x2Ymk1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hQUVVGUExFdEJRVXNzVFVGQlRTeGhRVUZoTEVOQlFVTTdRVUZGYUVNN1NVRkRTU3c0UWtGQldTeFhRVUZuUWp0UlFVRm9RaXcwUWtGQlFTeEZRVUZCTEdkQ1FVRm5RanRSUVVONFFpeEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRmRCUVZjc1EwRkJRenRSUVVNdlFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOc1FpeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOcVFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEZkQlFWY3NRMEZCUXl4SFFVRkhMRVZCUVVVc1JVRkJSU3hyUWtGQmEwSXNSVUZCUlN4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRelZGTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUjBGQlJ5eEpRVUZKTEVOQlFVTTdTVUZEYmtNc1EwRkJRenRKUVVWRUxHMURRVUZKTEVkQlFVbzdVVUZCUVN4cFFrRkZRenRSUVVSSExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1ZVRkJWU3hKUVVGSkxFOUJRVUVzVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkpMRU5CUVVNc1JVRkJja0lzUTBGQmNVSXNRMEZCUXl4RFFVRkRPMGxCUTJ4RkxFTkJRVU03U1VGRlJDdzBRMEZCWVN4SFFVRmlMRlZCUVdNc1ZVRkJWVHRSUVVOd1FpeFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRM1JDTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBsQlEzUkRMRU5CUVVNN1NVRkZSQ3dyUTBGQlowSXNSMEZCYUVJc1ZVRkJhVUlzVlVGQlZUdFJRVU4yUWl4RlFVRkZMRU5CUVVNc1EwRkJReXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnlRaXhWUVVGVkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdVVUZEZWtJc1EwRkJRenRSUVVORUxFbEJRVWtzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzFGQlF5OURMRVZCUVVVc1EwRkJReXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRXQ3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGNFTXNRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkZSQ3cyUTBGQll5eEhRVUZrTEZWQlFXVXNTVUZCU1R0UlFVTm1MRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnNReXhOUVVGTkxFTkJRVU03VVVGRFdDeERRVUZETzFGQlEwUXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEZUVJc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1NVRkRPVUlzUTBGQlF6dEpRVVZFTERKRFFVRlpMRWRCUVZvN1VVRkRTU3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU03U1VGRGNFVXNRMEZCUXp0SlFVVkVMSGREUVVGVExFZEJRVlE3VVVGRFNTeEpRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVOdVFpeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkRja0lzVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUXpsQ0xGTkJRVk1zUjBGQlJ5eExRVUZMTEVWQlEycENMRk5CUVZNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSVUZETjBJc1EwRkJReXhEUVVGRE8xRkJSVTRzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRk5CUVZNc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJRenRaUVVNNVFpeExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETzFGQlF6ZENMRU5CUVVNN1VVRkZSQ3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NWMEZCVnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03V1VGRE0wTXNTVUZCU1N4VlFVRlZMRWRCUVVjc1YwRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyaERMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEZOQlFWTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0blFrRkRiRU1zU1VGQlNTeFpRVUZaTEVkQlFVY3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU0zUWl4RlFVRkZMRU5CUVVNc1EwRkJReXhWUVVGVkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVNelFpeExRVUZMTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRE8yOUNRVU16UWl4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRE8yZENRVU55UWl4RFFVRkRPMWxCUTB3c1EwRkJRenRSUVVOTUxFTkJRVU03VVVGRlJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMW9zU1VGQlNTeERRVUZETEZsQlFWa3NSVUZCUlN4RFFVRkRPMUZCUTNoQ0xFTkJRVU03VVVGRlJDeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRenRKUVVOMlFpeERRVUZETzBsQlEwd3NNa0pCUVVNN1FVRkJSQ3hEUVVGRExFRkJja1ZFTEVsQmNVVkRJbjA9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi93d3cvanMvQ29udHJvbGxlcnMvQ29udHJvbGxlckNvbGxlY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuaW1wb3J0IENvbnRyb2xsZXIgZnJvbSBcIi4vQ29udHJvbGxlci5qc1wiO1xudmFyIGRpcmVjdGlvbmFsQml0bWFwID0ge1xuICAgIC8qICAgIC4uLi5VTFJEICovXG4gICAgMzM6IDEwLFxuICAgIDM0OiAzLFxuICAgIDM1OiA1LFxuICAgIDM2OiAxMixcbiAgICAzNzogNCxcbiAgICA2NTogNCxcbiAgICAzODogOCxcbiAgICA4NzogOCxcbiAgICAzOTogMixcbiAgICA2ODogMixcbiAgICA0MDogMSxcbiAgICA4MzogMSxcbn07XG52YXIgS2V5Ym9hcmRDb250cm9sbGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoS2V5Ym9hcmRDb250cm9sbGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEtleWJvYXJkQ29udHJvbGxlcigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2RpcmVjdGlvbnMgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEtleWJvYXJkQ29udHJvbGxlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChvd25lciAvKjogQ29udHJvbGxlckNvbGxlY3Rpb24qLykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoX3N1cGVyLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcywgb3duZXIpKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9rZXlEb3duRXZlbnQgPSBmdW5jdGlvbiAoZXZ0KSB7IHJldHVybiBfdGhpcy5vbktleURvd24oZXZ0KTsgfSk7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5fa2V5VXBFdmVudCA9IGZ1bmN0aW9uIChldnQpIHsgcmV0dXJuIF90aGlzLm9uS2V5VXAoZXZ0KTsgfSk7XG4gICAgICAgICAgICBbXCJ1cFwiLCBcImRvd25cIiwgXCJsZWZ0XCIsIFwicmlnaHRcIl0uZm9yRWFjaChmdW5jdGlvbiAocykgeyByZXR1cm4gb3duZXIucmVnaXN0ZXJTd2l0Y2gocyk7IH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBLZXlib2FyZENvbnRyb2xsZXIucHJvdG90eXBlLmNsZWFuVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2tleURvd25FdmVudCk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLl9rZXlVcEV2ZW50KTtcbiAgICB9O1xuICAgIEtleWJvYXJkQ29udHJvbGxlci5wcm90b3R5cGUub25LZXlEb3duID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICB2YXIga2V5ID0gZXZ0LndoaWNoO1xuICAgICAgICB2YXIgYml0bWFzayA9IGRpcmVjdGlvbmFsQml0bWFwW2tleV0gfHwgMHgwMDtcbiAgICAgICAgdGhpcy5fZGlyZWN0aW9ucyB8PSBiaXRtYXNrO1xuICAgICAgICB0aGlzLl91cGRhdGVGcm9tQml0bWFwKCk7XG4gICAgfTtcbiAgICBLZXlib2FyZENvbnRyb2xsZXIucHJvdG90eXBlLm9uS2V5VXAgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHZhciBrZXkgPSBldnQud2hpY2g7XG4gICAgICAgIHZhciBiaXRtYXNrID0gZGlyZWN0aW9uYWxCaXRtYXBba2V5XSB8fCAweDAwO1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb25zICY9ICghYml0bWFzayk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUZyb21CaXRtYXAoKTtcbiAgICB9O1xuICAgIEtleWJvYXJkQ29udHJvbGxlci5wcm90b3R5cGUuX3VwZGF0ZUZyb21CaXRtYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudXAgPSB0aGlzLl9kaXJlY3Rpb25zICYgODtcbiAgICAgICAgdGhpcy5kb3duID0gdGhpcy5fZGlyZWN0aW9ucyAmIDE7XG4gICAgICAgIHRoaXMubGVmdCA9IHRoaXMuX2RpcmVjdGlvbnMgJiA0O1xuICAgICAgICB0aGlzLnJpZ2h0ID0gdGhpcy5fZGlyZWN0aW9ucyAmIDI7XG4gICAgfTtcbiAgICByZXR1cm4gS2V5Ym9hcmRDb250cm9sbGVyO1xufShDb250cm9sbGVyKSk7XG5leHBvcnQgZGVmYXVsdCBLZXlib2FyZENvbnRyb2xsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lTMlY1WW05aGNtUkRiMjUwY205c2JHVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVMyVjVZbTloY21SRGIyNTBjbTlzYkdWeUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdRVUZCUVN4UFFVRlBMRlZCUVZVc1RVRkJUU3hwUWtGQmFVSXNRMEZCUXp0QlFVVjZReXhKUVVGTkxHbENRVUZwUWl4SFFVRkhPMGxCUlhSQ0xHbENRVUZwUWp0SlFVTnFRaXhGUVVGRkxFVkJRVVVzUlVGQlZUdEpRVU5rTEVWQlFVVXNSVUZCUlN4RFFVRlZPMGxCUTJRc1JVRkJSU3hGUVVGRkxFTkJRVlU3U1VGRFpDeEZRVUZGTEVWQlFVVXNSVUZCVlR0SlFVTmtMRVZCUVVVc1JVRkJSU3hEUVVGVk8wbEJRMlFzUlVGQlJTeEZRVUZGTEVOQlFWVTdTVUZEWkN4RlFVRkZMRVZCUVVVc1EwRkJWVHRKUVVOa0xFVkJRVVVzUlVGQlJTeERRVUZWTzBsQlEyUXNSVUZCUlN4RlFVRkZMRU5CUVZVN1NVRkRaQ3hGUVVGRkxFVkJRVVVzUTBGQlZUdEpRVU5rTEVWQlFVVXNSVUZCUlN4RFFVRlZPMGxCUTJRc1JVRkJSU3hGUVVGRkxFTkJRVlU3UTBGRGFrSXNRMEZCUVR0QlFVVkVPMGxCUVdkRUxITkRRVUZWTzBsQlEzUkVPMUZCUVVFc1dVRkRTU3hwUWtGQlR5eFRRVVZXTzFGQlJFY3NTMEZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhEUVVGRExFTkJRVU03TzBsQlEzcENMRU5CUVVNN1NVRkZSQ3hwUTBGQlNTeEhRVUZLTEZWQlFVc3NTMEZCU3l4RFFVRkJMREJDUVVFd1FqdFJRVUZ3UXl4cFFrRk5RenRSUVV4SExFVkJRVVVzUTBGQlF5eERRVUZETEdsQ1FVRk5MRWxCUVVrc1dVRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEY0VJc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRk5CUVZNc1JVRkJSU3hKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEZWQlFVRXNSMEZCUnl4SlFVRkpMRTlCUVVFc1MwRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCYmtJc1EwRkJiVUlzUTBGQlF5eERRVUZETzFsQlEzUkdMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eFZRVUZCTEVkQlFVY3NTVUZCU1N4UFFVRkJMRXRCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFXcENMRU5CUVdsQ0xFTkJRVU1zUTBGQlF6dFpRVU5vUml4RFFVRkRMRWxCUVVrc1JVRkJSU3hOUVVGTkxFVkJRVVVzVFVGQlRTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFTkJRVU1zU1VGQlNTeFBRVUZCTEV0QlFVc3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRWFpDTEVOQlFYVkNMRU5CUVVNc1EwRkJRenRSUVVNeFJTeERRVUZETzBsQlEwd3NRMEZCUXp0SlFVVkVMRzlEUVVGUExFZEJRVkE3VVVGRFNTeFJRVUZSTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVTBGQlV5eEZRVUZGTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRSUVVNMVJDeFJRVUZSTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRKUVVNMVJDeERRVUZETzBsQlJVUXNjME5CUVZNc1IwRkJWQ3hWUVVGVkxFZEJRVWM3VVVGRFZDeEpRVUZKTEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRE8xRkJRM0JDTEVsQlFVa3NUMEZCVHl4SFFVRkhMR2xDUVVGcFFpeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJRenRSUVVNM1F5eEpRVUZKTEVOQlFVTXNWMEZCVnl4SlFVRkpMRTlCUVU4c1EwRkJRenRSUVVNMVFpeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzUTBGQlF6dEpRVU0zUWl4RFFVRkRPMGxCUlVRc2IwTkJRVThzUjBGQlVDeFZRVUZSTEVkQlFVYzdVVUZEVUN4SlFVRkpMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETzFGQlEzQkNMRWxCUVVrc1QwRkJUeXhIUVVGSExHbENRVUZwUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFbEJRVWtzUTBGQlF6dFJRVU0zUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhKUVVGSkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0UlFVTTVRaXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRVZCUVVVc1EwRkJRenRKUVVNM1FpeERRVUZETzBsQlJVUXNPRU5CUVdsQ0xFZEJRV3BDTzFGQlEwa3NTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVOQlFWVXNRMEZCUXp0UlFVTjRReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1EwRkJWU3hEUVVGRE8xRkJRekZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eERRVUZWTEVOQlFVTTdVVUZETVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRU5CUVZVc1EwRkJRenRKUVVNdlF5eERRVUZETzBsQlJVd3NlVUpCUVVNN1FVRkJSQ3hEUVVGRExFRkJlRU5FTEVOQlFXZEVMRlZCUVZVc1IwRjNRM3BFSW4wPVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vd3d3L2pzL0NvbnRyb2xsZXJzL0tleWJvYXJkQ29udHJvbGxlci5qc1xuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5pbXBvcnQgQ29udHJvbGxlciBmcm9tIFwiLi9Db250cm9sbGVyLmpzXCI7XG5pbXBvcnQgdXRpbCBmcm9tIFwiLi4vdXRpbC5qc1wiO1xudmFyIFBBU1NJVkVfSEFORExFUiA9IGZhbHNlO1xudmFyIE1ldGFDb250cm9sbGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWV0YUNvbnRyb2xsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWV0YUNvbnRyb2xsZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgTWV0YUNvbnRyb2xsZXIucHJvdG90eXBlLl9jcmVhdGVDb250cm9sU3VyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHBhdXNlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIGV4aXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB2YXIgcmV0cnlCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBwYXVzZUJ1dHRvbi5hcHBlbmRDaGlsZCh1dGlsLnN2Z0VsKFwibWVkaWEtcGF1c2VcIikpO1xuICAgICAgICBwYXVzZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBcIlBhdXNlXCIpO1xuICAgICAgICBleGl0QnV0dG9uLmFwcGVuZENoaWxkKHV0aWwuc3ZnRWwoXCJob21lXCIpKTtcbiAgICAgICAgZXhpdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBcIkV4aXRcIik7XG4gICAgICAgIHJldHJ5QnV0dG9uLmFwcGVuZENoaWxkKHV0aWwuc3ZnRWwoXCJyZWxvYWRcIikpO1xuICAgICAgICByZXRyeUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBcIlJldHJ5XCIpO1xuICAgICAgICBwYXVzZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwicGF1c2VcIik7XG4gICAgICAgIGV4aXRCdXR0b24uY2xhc3NMaXN0LmFkZChcImV4aXRcIik7XG4gICAgICAgIHJldHJ5QnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJyZXRyeVwiKTtcbiAgICAgICAgdGhpcy5fZWxzID0gW107XG4gICAgICAgIFtwYXVzZUJ1dHRvbiwgZXhpdEJ1dHRvbiwgcmV0cnlCdXR0b25dLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlck9wdHMgPSB7XG4gICAgICAgICAgICAgICAgcGFzc2l2ZTogUEFTU0lWRV9IQU5ETEVSLFxuICAgICAgICAgICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKFwib250b3VjaHN0YXJ0XCIgaW4gd2luZG93KSB7XG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgX3RoaXMsIGhhbmRsZXJPcHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBfdGhpcywgaGFuZGxlck9wdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICBfdGhpcy5fZWxzLnB1c2goZWwpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1ldGFDb250cm9sbGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKG93bmVyKSB7XG4gICAgICAgIGlmIChfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzLCBvd25lcikpIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUNvbnRyb2xTdXJmYWNlKCk7XG4gICAgICAgICAgICBbXCJwYXVzZVwiLCBcImV4aXRcIiwgXCJyZXRyeVwiXS5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7IHJldHVybiBvd25lci5yZWdpc3RlclN3aXRjaChzKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1ldGFDb250cm9sbGVyLnByb3RvdHlwZS5jbGVhblVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5fZWxzKSB7XG4gICAgICAgICAgICB0aGlzLl9lbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJvbnRvdWNoc3RhcnRcIiBpbiB3aW5kb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgX3RoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIF90aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWV0YUNvbnRyb2xsZXIucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZXZ0LnRhcmdldDtcbiAgICAgICAgdmFyIGJ1dHRvbiA9IHV0aWwuYnV0dG9uRnJvbVRhcmdldCh0YXJnZXQpO1xuICAgICAgICBpZiAoYnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzW1wib25cIiArIHV0aWwuc2ltcGxlUHJvcGVyQ2FzZShidXR0b24uY2xhc3NOYW1lKSArIFwiUHJlc3NlZFwiXShldnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghUEFTU0lWRV9IQU5ETEVSKSB7XG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWV0YUNvbnRyb2xsZXIucHJvdG90eXBlLm9uUGF1c2VQcmVzc2VkID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICB0aGlzLnBhdXNlID0gIXRoaXMucGF1c2U7XG4gICAgfTtcbiAgICBNZXRhQ29udHJvbGxlci5wcm90b3R5cGUub25FeGl0UHJlc3NlZCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdGhpcy5leGl0ID0gdHJ1ZTtcbiAgICB9O1xuICAgIE1ldGFDb250cm9sbGVyLnByb3RvdHlwZS5vblJldHJ5UHJlc3NlZCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdGhpcy5yZXRyeSA9IHRydWU7XG4gICAgfTtcbiAgICByZXR1cm4gTWV0YUNvbnRyb2xsZXI7XG59KENvbnRyb2xsZXIpKTtcbmV4cG9ydCBkZWZhdWx0IE1ldGFDb250cm9sbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pVFdWMFlVTnZiblJ5YjJ4c1pYSXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKTlpYUmhRMjl1ZEhKdmJHeGxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3TzBGQlFVRXNUMEZCVHl4VlFVRlZMRTFCUVUwc2FVSkJRV2xDTEVOQlFVTTdRVUZEZWtNc1QwRkJUeXhKUVVGSkxFMUJRVTBzV1VGQldTeERRVUZETzBGQlJUbENMRWxCUVUwc1pVRkJaU3hIUVVGSExFdEJRVXNzUTBGQlF6dEJRVVU1UWp0SlFVRTBReXhyUTBGQlZUdEpRVUYwUkRzN1NVRTRSVUVzUTBGQlF6dEpRVGRGUnl3NFEwRkJjVUlzUjBGQmNrSTdVVUZCUVN4cFFrRnBRME03VVVGb1EwY3NTVUZCU1N4WFFVRlhMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0UlFVTm9SQ3hKUVVGSkxGVkJRVlVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xRkJReTlETEVsQlFVa3NWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVVUZGYUVRc1YwRkJWeXhEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGJrUXNWMEZCVnl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdVVUZGTTBNc1ZVRkJWU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE0wTXNWVUZCVlN4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdVVUZEZWtNc1YwRkJWeXhEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRE4wTXNWMEZCVnl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdVVUZGTTBNc1YwRkJWeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1VVRkRia01zVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03VVVGRGFrTXNWMEZCVnl4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdVVUZGYmtNc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZGWml4RFFVRkRMRmRCUVZjc1JVRkJSU3hWUVVGVkxFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1JVRkJSVHRaUVVNM1F5eEpRVUZKTEZkQlFWY3NSMEZCUnp0blFrRkRWaXhQUVVGUExFVkJRVVVzWlVGQlpUdG5Ra0ZEZUVJc1QwRkJUeXhGUVVGRkxFdEJRVXM3WVVGRGFrSXNRMEZCUXp0WlFVTk9MRVZCUVVVc1EwRkJReXhEUVVGRExHTkJRV01zU1VGQlNTeE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVNelFpeEZRVUZGTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zV1VGQldTeEZRVUZGTEV0QlFVa3NSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRenRaUVVONlJDeERRVUZETzFsQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1owSkJRMG9zUlVGQlJTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeExRVUZKTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN1dVRkRjRVFzUTBGQlF6dFpRVU5FTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFsQlJUbENMRXRCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTNaQ0xFTkJRVU1zUTBGQlF5eERRVUZETzBsQlExQXNRMEZCUXp0SlFVVkVMRFpDUVVGSkxFZEJRVW9zVlVGQlN5eExRVUZMTzFGQlEwNHNSVUZCUlN4RFFVRkRMRU5CUVVNc2FVSkJRVTBzU1VGQlNTeFpRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOd1FpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFVkJRVVVzUTBGQlF6dFpRVU0zUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hOUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1EwRkJReXhKUVVGSkxFOUJRVUVzUzBGQlN5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJka0lzUTBGQmRVSXNRMEZCUXl4RFFVRkRPMUZCUTNKRkxFTkJRVU03U1VGRFRDeERRVUZETzBsQlJVUXNaME5CUVU4c1IwRkJVRHRSUVVGQkxHbENRVmRETzFGQlZrY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEV2l4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEVWQlFVVTdaMEpCUTJoQ0xFVkJRVVVzUTBGQlF5eERRVUZETEdOQlFXTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU16UWl4RlFVRkZMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRXRCUVVrc1EwRkJReXhEUVVGRE8yZENRVU12UXl4RFFVRkRPMmRDUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzI5Q1FVTktMRVZCUVVVc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1MwRkJTU3hEUVVGRExFTkJRVU03WjBKQlF6RkRMRU5CUVVNN1owSkJRMFFzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03V1VGRGJFTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRVQ3hEUVVGRE8wbEJRMHdzUTBGQlF6dEpRVVZFTEc5RFFVRlhMRWRCUVZnc1ZVRkJXU3hIUVVGSE8xRkJRMWdzU1VGQlNTeE5RVUZOTEVkQlFVY3NSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJRenRSUVVONFFpeEpRVUZKTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRNME1zUlVGQlJTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOVUxFbEJRVWtzUTBGQlF5eFBRVUZMTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRmxCUVZNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFGQlEzSkZMRU5CUVVNN1VVRkRSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRia0lzUjBGQlJ5eERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkRPMUZCUTNwQ0xFTkJRVU03U1VGRFRDeERRVUZETzBsQlJVUXNkVU5CUVdNc1IwRkJaQ3hWUVVGbExFZEJRVWM3VVVGRFpDeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dEpRVU0zUWl4RFFVRkRPMGxCUlVRc2MwTkJRV0VzUjBGQllpeFZRVUZqTEVkQlFVYzdVVUZEWWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF6dEpRVU55UWl4RFFVRkRPMGxCUlVRc2RVTkJRV01zUjBGQlpDeFZRVUZsTEVkQlFVYzdVVUZEWkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF6dEpRVU4wUWl4RFFVRkRPMGxCUTB3c2NVSkJRVU03UVVGQlJDeERRVUZETEVGQk9VVkVMRU5CUVRSRExGVkJRVlVzUjBFNFJYSkVJbjA9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi93d3cvanMvQ29udHJvbGxlcnMvTWV0YUNvbnRyb2xsZXIuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuaW1wb3J0IENvbnRyb2xsZXIgZnJvbSBcIi4vQ29udHJvbGxlci5qc1wiO1xuaW1wb3J0IHV0aWwgZnJvbSBcIi4uL3V0aWwuanNcIjtcbnZhciBldmVudE1hcCA9IHtcbiAgICBcInRvdWNoc3RhcnRcIjogXCJvblByZXNzXCIsXG4gICAgXCJtb3VzZWRvd25cIjogXCJvblByZXNzXCIsXG4gICAgXCJ0b3VjaGVuZFwiOiBcIm9uUmVsZWFzZVwiLFxuICAgIFwibW91c2V1cFwiOiBcIm9uUmVsZWFzZVwiXG59O1xudmFyIFBBU1NJVkVfSEFORExFUiA9IGZhbHNlO1xudmFyIFRvdWNoQ29udHJvbGxlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRvdWNoQ29udHJvbGxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUb3VjaENvbnRyb2xsZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgVG91Y2hDb250cm9sbGVyLnByb3RvdHlwZS5fY3JlYXRlQ29udHJvbFN1cmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSwgYnV0dG9ucyA9IFtcImxlZnRcIiwgXCJyaWdodFwiLCBcInVwfHRvcFwiLCBcImRvd258Ym90dG9tXCJdLCBoYW5kbGVyT3B0cyA9IHtcbiAgICAgICAgICAgIHBhc3NpdmU6IFBBU1NJVkVfSEFORExFUixcbiAgICAgICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2VscyA9IHt9O1xuICAgICAgICBidXR0b25zLmZvckVhY2goZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgICAgICAgICAgdmFyIGJ1dHRvbkVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKSwgX2EgPSBidXR0b24uc3BsaXQoXCJ8XCIpLCBidXR0b25EaXIgPSBfYVswXSwgYnV0dG9uQWxpYXMgPSBfYVsxXSwgYnV0dG9uUHJvcGVyQ2FzZSA9IGJ1dHRvbkRpclswXS50b1VwcGVyQ2FzZSgpICsgYnV0dG9uRGlyLnN1YnN0cigxKTtcbiAgICAgICAgICAgIGlmICghYnV0dG9uQWxpYXMpIHtcbiAgICAgICAgICAgICAgICBidXR0b25BbGlhcyA9IGJ1dHRvbkRpcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1dHRvbkVsLmFwcGVuZENoaWxkKHV0aWwuc3ZnRWwoXCJjaGV2cm9uLVwiICsgYnV0dG9uQWxpYXMpKTtcbiAgICAgICAgICAgIGJ1dHRvbkVsLnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIGJ1dHRvblByb3BlckNhc2UpO1xuICAgICAgICAgICAgYnV0dG9uRWwuY2xhc3NMaXN0LmFkZChidXR0b25EaXIpO1xuICAgICAgICAgICAgYm9keS5hcHBlbmRDaGlsZChidXR0b25FbCk7XG4gICAgICAgICAgICBfdGhpcy5fZWxzW2J1dHRvbkRpcl0gPSBidXR0b25FbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChcIm9udG91Y2hzdGFydFwiIGluIHdpbmRvdykge1xuICAgICAgICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLCBoYW5kbGVyT3B0cyk7XG4gICAgICAgICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLCBoYW5kbGVyT3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcywgaGFuZGxlck9wdHMpO1xuICAgICAgICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLCBoYW5kbGVyT3B0cyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRvdWNoQ29udHJvbGxlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChvd25lcikge1xuICAgICAgICBpZiAoX3N1cGVyLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcywgb3duZXIpKSB7XG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVDb250cm9sU3VyZmFjZSgpO1xuICAgICAgICAgICAgW1widXBcIiwgXCJkb3duXCIsIFwibGVmdFwiLCBcInJpZ2h0XCJdLmZvckVhY2goZnVuY3Rpb24gKHMpIHsgcmV0dXJuIG93bmVyLnJlZ2lzdGVyU3dpdGNoKHMpOyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG91Y2hDb250cm9sbGVyLnByb3RvdHlwZS5jbGVhblVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgICAgIGlmICh0aGlzLl9lbHMpIHtcbiAgICAgICAgICAgIGlmIChcIm9udG91Y2hzdGFydFwiIGluIHdpbmRvdykge1xuICAgICAgICAgICAgICAgIGJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcyk7XG4gICAgICAgICAgICAgICAgYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcyk7XG4gICAgICAgICAgICAgICAgYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2Vscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSB0b3VjaCBhbmQgbW91c2UgZXZlbnRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldnQgICBldmVudFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgVG91Y2hDb250cm9sbGVyXG4gICAgICovXG4gICAgVG91Y2hDb250cm9sbGVyLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2dC50YXJnZXQ7XG4gICAgICAgIHZhciBidXR0b24gPSB1dGlsLmJ1dHRvbkZyb21UYXJnZXQodGFyZ2V0KTtcbiAgICAgICAgaWYgKGJ1dHRvbikge1xuICAgICAgICAgICAgdGhpc1tldmVudE1hcFtldnQudHlwZV1dKGJ1dHRvbi5jbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghUEFTU0lWRV9IQU5ETEVSKSB7XG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG91Y2hDb250cm9sbGVyLnByb3RvdHlwZS5vblByZXNzID0gZnVuY3Rpb24gKGJ0bikge1xuICAgICAgICB0aGlzW2J0bl0gPSB0cnVlO1xuICAgIH07XG4gICAgVG91Y2hDb250cm9sbGVyLnByb3RvdHlwZS5vblJlbGVhc2UgPSBmdW5jdGlvbiAoYnRuKSB7XG4gICAgICAgIHRoaXNbYnRuXSA9IGZhbHNlO1xuICAgIH07XG4gICAgcmV0dXJuIFRvdWNoQ29udHJvbGxlcjtcbn0oQ29udHJvbGxlcikpO1xuZXhwb3J0IGRlZmF1bHQgVG91Y2hDb250cm9sbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pVkc5MVkyaERiMjUwY205c2JHVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVZHOTFZMmhEYjI1MGNtOXNiR1Z5TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN1FVRkJRU3hQUVVGUExGVkJRVlVzVFVGQlRTeHBRa0ZCYVVJc1EwRkJRenRCUVVONlF5eFBRVUZQTEVsQlFVa3NUVUZCVFN4WlFVRlpMRU5CUVVNN1FVRkZPVUlzU1VGQlRTeFJRVUZSTEVkQlFVYzdTVUZEWWl4WlFVRlpMRVZCUVVVc1UwRkJVenRKUVVOMlFpeFhRVUZYTEVWQlFVVXNVMEZCVXp0SlFVTjBRaXhWUVVGVkxFVkJRVVVzVjBGQlZ6dEpRVU4yUWl4VFFVRlRMRVZCUVVVc1YwRkJWenREUVVONlFpeERRVUZETzBGQlJVWXNTVUZCVFN4bFFVRmxMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJSVGxDTzBsQlFUWkRMRzFEUVVGVk8wbEJRWFpFT3p0SlFXdEdRU3hEUVVGRE8wbEJha1pITEN0RFFVRnhRaXhIUVVGeVFqdFJRVUZCTEdsQ1FUaENRenRSUVRkQ1J5eEpRVUZKTEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVOd1FpeFBRVUZQTEVkQlFVY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1QwRkJUeXhGUVVGRkxGRkJRVkVzUlVGQlJTeGhRVUZoTEVOQlFVTXNSVUZEY0VRc1YwRkJWeXhIUVVGSE8xbEJRMVlzVDBGQlR5eEZRVUZGTEdWQlFXVTdXVUZEZUVJc1QwRkJUeXhGUVVGRkxFdEJRVXM3VTBGRGFrSXNRMEZCUXp0UlFVTk9MRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZETzFGQlEyWXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFMUJRVTA3V1VGRGJFSXNTVUZCU1N4UlFVRlJMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZETTBNc2MwSkJRVFJETEVWQlFUTkRMR2xDUVVGVExFVkJRVVVzYlVKQlFWY3NSVUZEZGtJc1owSkJRV2RDTEVkQlFVY3NVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGZEJRVmNzUlVGQlJTeEhRVUZITEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGVFVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTm1MRmRCUVZjc1IwRkJSeXhUUVVGVExFTkJRVU03V1VGRE5VSXNRMEZCUXp0WlFVTkVMRkZCUVZFc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4aFFVRlhMRmRCUVdFc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRE0wUXNVVUZCVVN4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzWjBKQlFXZENMRU5CUVVNc1EwRkJRenRaUVVOcVJDeFJRVUZSTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFpRVU5zUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzFsQlF6TkNMRXRCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRPMUZCUTNCRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlIwZ3NSVUZCUlN4RFFVRkRMRU5CUVVNc1kwRkJZeXhKUVVGSkxFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZETTBJc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRmxCUVZrc1JVRkJSU3hKUVVGSkxFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVTTdXVUZEZGtRc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRlZCUVZVc1JVRkJSU3hKUVVGSkxFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVTTdVVUZEZWtRc1EwRkJRenRSUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFsQlEwb3NTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEZkQlFWY3NSVUZCUlN4SlFVRkpMRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVU03V1VGRGRFUXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEZOQlFWTXNSVUZCUlN4SlFVRkpMRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVU03VVVGRGVFUXNRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkZSQ3c0UWtGQlNTeEhRVUZLTEZWQlFVc3NTMEZCU3p0UlFVTk9MRVZCUVVVc1EwRkJReXhEUVVGRExHbENRVUZOTEVsQlFVa3NXVUZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGNFSXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTTdXVUZETjBJc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlFTeERRVUZETEVsQlFVa3NUMEZCUVN4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUYyUWl4RFFVRjFRaXhEUVVGRExFTkJRVU03VVVGRE1VVXNRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkZSQ3hwUTBGQlR5eEhRVUZRTzFGQlEwa3NTVUZCU1N4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF6dFJRVU42UWl4RlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTmFMRVZCUVVVc1EwRkJReXhEUVVGRExHTkJRV01zU1VGQlNTeE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVNelFpeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zV1VGQldTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMmRDUVVNM1F5eEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVlVGQlZTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUXk5RExFTkJRVU03V1VGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0blFrRkRTaXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1YwRkJWeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzJkQ1FVTTFReXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1UwRkJVeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzFsQlF6bERMRU5CUVVNN1dVRkRSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkJMRVZCUVVVN1owSkJRMmhDTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFsQlEyeERMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMUFzUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZGUkRzN096czdPenRQUVU5SE8wbEJRMGdzY1VOQlFWY3NSMEZCV0N4VlFVRlpMRWRCUVVjN1VVRkRXQ3hKUVVGSkxFMUJRVTBzUjBGQlJ5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRPMUZCUTNoQ0xFbEJRVWtzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTXpReXhGUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTFRc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdVVUZETDBNc1EwRkJRenRSUVVORUxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOdVFpeEhRVUZITEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1VVRkRla0lzUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZGUkN4cFEwRkJUeXhIUVVGUUxGVkJRVkVzUjBGQlJ6dFJRVU5RTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU03U1VGRGNrSXNRMEZCUXp0SlFVVkVMRzFEUVVGVExFZEJRVlFzVlVGQlZTeEhRVUZITzFGQlExUXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF6dEpRVU4wUWl4RFFVRkRPMGxCUTB3c2MwSkJRVU03UVVGQlJDeERRVUZETEVGQmJFWkVMRU5CUVRaRExGVkJRVlVzUjBGclJuUkVJbjA9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi93d3cvanMvQ29udHJvbGxlcnMvVG91Y2hDb250cm9sbGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgRGlzcGxheSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGlzcGxheSgpIHtcbiAgICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5LCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoXCJtc2dcIik7XG4gICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICB0aGlzLl9lbCA9IGVsO1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG4gICAgRGlzcGxheS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZWwuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICAgICAgICB0aGlzLl92aXNpYmxlID0gdHJ1ZTtcbiAgICB9O1xuICAgIERpc3BsYXkucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2VsLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICB0aGlzLl92aXNpYmxlID0gZmFsc2U7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGlzcGxheS5wcm90b3R5cGUsIFwidmlzaWJsZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2libGU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIERpc3BsYXkucHJvdG90eXBlLnByaW50ID0gZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgdmFyIHAgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHBbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRmID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCBlbDtcbiAgICAgICAgaWYgKGgpIHtcbiAgICAgICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xuICAgICAgICAgICAgZWwudGV4dENvbnRlbnQgPSBoO1xuICAgICAgICAgICAgZGYuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwKSB7XG4gICAgICAgICAgICBwLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgICAgICAgICBlbC50ZXh0Q29udGVudCA9IHM7XG4gICAgICAgICAgICAgICAgZGYuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZWwuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgdGhpcy5fZWwuYXBwZW5kQ2hpbGQoZGYpO1xuICAgICAgICBpZiAoIXRoaXMudmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBEaXNwbGF5O1xufSgpKTtcbmV4cG9ydCB7IERpc3BsYXkgfTtcbnZhciBkaXNwbGF5ID0gbmV3IERpc3BsYXkoKTtcbmV4cG9ydCBkZWZhdWx0IGRpc3BsYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lSR2x6Y0d4aGVTNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWtScGMzQnNZWGt1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdTVUZEU1R0UlFVTkpMRWxCUVVrc1NVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlEzQkNMRVZCUVVVc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUTNaRExFVkJRVVVzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xRkJRM2hDTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGNrSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRFpDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1NVRkRhRUlzUTBGQlF6dEpRVVZFTEhOQ1FVRkpMRWRCUVVvN1VVRkRTU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4VlFVRlZMRWRCUVVjc1UwRkJVeXhEUVVGRE8xRkJRM1JETEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJRM3BDTEVOQlFVTTdTVUZGUkN4elFrRkJTU3hIUVVGS08xRkJRMGtzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hIUVVGSExGRkJRVkVzUTBGQlF6dFJRVU55UXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFdEJRVXNzUTBGQlF6dEpRVU14UWl4RFFVRkRPMGxCUlVRc2MwSkJRVWtzTkVKQlFVODdZVUZCV0R0WlFVTkpMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzFGQlEzcENMRU5CUVVNN096dFBRVUZCTzBsQlJVUXNkVUpCUVVzc1IwRkJUQ3hWUVVGTkxFTkJRVU03VVVGQlJTeFhRVUZKTzJGQlFVb3NWVUZCU1N4RlFVRktMSEZDUVVGSkxFVkJRVW9zU1VGQlNUdFpRVUZLTERCQ1FVRkpPenRSUVVOVUxFbEJRVWtzUlVGQlJTeEhRVUZITEZGQlFWRXNRMEZCUXl4elFrRkJjMElzUlVGQlJTeEZRVU4wUXl4RlFVRkZMRU5CUVVNN1VVRkRVQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTBvc1JVRkJSU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkRiRU1zUlVGQlJTeERRVUZETEZkQlFWY3NSMEZCUnl4RFFVRkRMRU5CUVVNN1dVRkRia0lzUlVGQlJTeERRVUZETEZkQlFWY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOMlFpeERRVUZETzFGQlEwUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5LTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hEUVVGRE8yZENRVU5RTEVsQlFVa3NSVUZCUlN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdaMEpCUTNKRExFVkJRVVVzUTBGQlF5eFhRVUZYTEVkQlFVY3NRMEZCUXl4RFFVRkRPMmRDUVVOdVFpeEZRVUZGTEVOQlFVTXNWMEZCVnl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRM1pDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTFBc1EwRkJRenRSUVVORUxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVONFFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU42UWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTJoQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0UlFVTm9RaXhEUVVGRE8wbEJRMHdzUTBGQlF6dEpRVU5NTEdOQlFVTTdRVUZCUkN4RFFVRkRMRUZCTjBORUxFbEJOa05ET3p0QlFVVkVMRWxCUVVrc1QwRkJUeXhIUVVGSExFbEJRVWtzVDBGQlR5eEZRVUZGTEVOQlFVTTdRVUZETlVJc1pVRkJaU3hQUVVGUExFTkJRVU1pZlE9PVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vd3d3L2pzL0Rpc3BsYXkuanNcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIGdsb2JhbHMgclN0YXRzLCB0aHJlZVN0YXRzLCBnbFN0YXRzICovXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tIFwidGhyZWUuanNcIjtcbmltcG9ydCBNVExMb2FkZXJGbiBmcm9tIFwiLi4vdmVuZG9yL3RocmVlL2xvYWRlcnMvTVRMTG9hZGVyLmpzXCI7XG5pbXBvcnQgT0JKTG9hZGVyRm4gZnJvbSBcIi4uL3ZlbmRvci90aHJlZS9sb2FkZXJzL09CSkxvYWRlci5qc1wiO1xudmFyIE1UTExvYWRlciA9IE1UTExvYWRlckZuKFRIUkVFKSwgT0JKTG9hZGVyID0gT0JKTG9hZGVyRm4oVEhSRUUpO1xuaW1wb3J0IEJlYXQgZnJvbSBcIi4vQmVhdC5qc1wiO1xuaW1wb3J0IERlbHRhIGZyb20gXCIuL0RlbHRhLmpzXCI7XG5pbXBvcnQgTGV2ZWwgZnJvbSBcIi4vTGV2ZWwuanNcIjtcbmltcG9ydCBQbGF5ZXIgZnJvbSBcIi4vUGxheWVyLmpzXCI7XG5pbXBvcnQgbGV2ZWxzIGZyb20gXCIuL2xldmVscy5qc1wiO1xuaW1wb3J0IHRleHRWYXJpYXRpb25zIGZyb20gXCIuL3RleHRWYXJpYXRpb25zLmpzXCI7XG5pbXBvcnQgZGlzcGxheSBmcm9tIFwiLi9EaXNwbGF5LmpzXCI7XG5pbXBvcnQgYXVkaW9NYW5hZ2VyIGZyb20gXCIuL0F1ZGlvTWFuYWdlci5qc1wiO1xudmFyIERFQlVHID0gZmFsc2U7XG52YXIgVEFSR0VUX0ZQUyA9IDYwO1xudmFyIE1TX1BFUl9TRUNPTkQgPSAxMDAwO1xudmFyIE1TX1BFUl9GUkFNRSA9IE1TX1BFUl9TRUNPTkQgLyBUQVJHRVRfRlBTO1xudmFyIFBIWVNJQ1NfTU9ERV9DT05TVEFOVCA9IDA7XG52YXIgUEhZU0lDU19NT0RFX1RJQ0sgPSAxO1xudmFyIFBIWVNJQ1NfTU9ERV9ERUxUQSA9IDI7XG52YXIgUEhZU0lDU19NT0RFID0gUEhZU0lDU19NT0RFX1RJQ0s7XG52YXIgU0xPV19GQUNUT1IgPSAxO1xudmFyIFdBSVRJTkdfUkVBU09OID0ge1xuICAgIE5PVF9XQUlUSU5HOiAwLFxuICAgIE5FV19HQU1FOiAxLFxuICAgIFJFVFJZOiAxMCxcbiAgICBQQVVTRUQ6IDIwLFxuICAgIERFTU86IDMwLFxuICAgIERJRUQ6IDk5LFxufTtcbnZhciBQRVJTT05fVklFVyA9IHtcbiAgICBGSVJTVDogMSxcbiAgICBUSElSRDogM1xufTtcbnZhciBQTEFZRVJfUEVSU09OX1ZJRVcgPSBQRVJTT05fVklFVy5USElSRDtcbnZhciBVU0VfUkVBTF9TSEFET1dTID0gZmFsc2U7XG52YXIgR2FtZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gR2FtZShfYSkge1xuICAgICAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgY29udHJvbGxlcnMgPSBfYi5jb250cm9sbGVycywgX2MgPSBfYi5pbml0aWFsU3RhdGUsIGluaXRpYWxTdGF0ZSA9IF9jID09PSB2b2lkIDAgPyBcImRlbW9cIiA6IF9jO1xuICAgICAgICB0aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgICAgICB0aGlzLmNhbWVyYSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wbGF5ZXJDYW1lcmEgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2NlbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucGxheWVyU2NlbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc3RhclNjZW5lID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJlYXQgPSBuZXcgQmVhdCgpO1xuICAgICAgICB0aGlzLm11c2ljU3RhcnRQb2ludHMgPSBbMF07XG4gICAgICAgIHRoaXMucGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMud2FpdGluZ0ZvckludGVyYWN0aW9uID0gaW5pdGlhbFN0YXRlID09PSBcImRlbW9cIiA/IFdBSVRJTkdfUkVBU09OLkRFTU8gOiBXQUlUSU5HX1JFQVNPTi5ORVdfR0FNRTtcbiAgICAgICAgdGhpcy5jb250cm9sbGVycyA9IGNvbnRyb2xsZXJzO1xuICAgICAgICB0aGlzLmRlbHRhID0gbmV3IERlbHRhKCk7XG4gICAgICAgIHRoaXMuZGVsdGEubG9nID0gMTk7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NBY2N1bXVsYXRvciA9IDA7XG4gICAgICAgIHRoaXMuX3N0YXRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYW5pbWF0ZSA9IHRoaXMuYW5pbWF0ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gICAgR2FtZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5jb250cm9sbGVycy5pbml0KCk7XG4gICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDEyMCwgd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsIDEsIDUwMDApO1xuICAgICAgICB0aGlzLnBsYXllckNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSgxMjAsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAxLCA1MDAwKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcbiAgICAgICAgICAgIGFudGlhbGlhczogbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBhZHxpUGhvbmUvaSksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEZhY2VDdWxsaW5nKFRIUkVFLkN1bGxGYWNlQmFjaywgVEhSRUUuRnJvbnRGYWNlRGlyZWN0aW9uQ0NXKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQaXhlbFJhdGlvKGRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XG4gICAgICAgIGlmIChVU0VfUkVBTF9TSEFET1dTKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2hhZG93TWFwLnR5cGUgPSBUSFJFRS5CYXNpY1NoYWRvd01hcDtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2hhZG93TWFwLnJlbmRlclJldmVyc2VTaWRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5yZW5kZXJlci5kb21FbGVtZW50KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZnVuY3Rpb24gKGV2dCkgeyByZXR1cm4gX3RoaXMub25SZXNpemUoZXZ0KTsgfSk7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgdGhpcy5fZ1N0YXRzID0gbmV3IGdsU3RhdHMoKTtcbiAgICAgICAgICAgIHRoaXMuX3RTdGF0cyA9IG5ldyB0aHJlZVN0YXRzKHRoaXMucmVuZGVyZXIpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdHMgPSBuZXcgclN0YXRzKHtcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWU6IHsgY2FwdGlvbjogXCJUb3RhbCBmcmFtZSB0aW1lIChtcylcIiwgb3ZlcjogMTYgfSxcbiAgICAgICAgICAgICAgICAgICAgcmFmOiB7IGNhcHRpb246IFwiVGltZSBzaW5jZSBsYXN0IHJBRiAobXMpXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgZnBzOiB7IGNhcHRpb246IFwiRnJhbWVyYXRlIChGUFMpXCIsIGJlbG93OiA1MCB9LFxuICAgICAgICAgICAgICAgICAgICBzY2VuZTogeyBjYXB0aW9uOiBcIlNjZW5lIFVwZGF0ZSAobXMpXCIsIG92ZXI6IDE2IH0sXG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYTogeyBjYXB0aW9uOiBcIkNhbWVyYSBVcGRhdGUgKG1zKVwiLCBvdmVyOiAxNiB9LFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGU6IHsgY2FwdGlvbjogXCJDb250cm9scyBVcGRhdGUgKG1zKVwiLCBvdmVyOiAxNiB9LFxuICAgICAgICAgICAgICAgICAgICBwaHlzaWNzOiB7IGNhcHRpb246IFwiUGh5c2ljcyBVcGRhdGUgKG1zKVwiLCBvdmVyOiAxNiB9LFxuICAgICAgICAgICAgICAgICAgICByZW5kZXI6IHsgY2FwdGlvbjogXCJXZWJHTCBSZW5kZXIgKG1zKVwiLCBvdmVyOiAxNiB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBncm91cHM6IFtcbiAgICAgICAgICAgICAgICAgICAgeyBjYXB0aW9uOiBcIkZyYW1lcmF0ZVwiLCB2YWx1ZXM6IFtcImZwc1wiLCBcInJhZlwiXSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNhcHRpb246IFwiQnVkZ2V0XCIsIHZhbHVlczogW1wiZnJhbWVcIiwgXCJjYW1lcmFcIiwgXCJ1cGRhdGVcIiwgXCJwaHlzaWNzXCIsIFwic2NlbmVcIiwgXCJyZW5kZXJcIl0gfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgZnJhY3Rpb25zOiBbXG4gICAgICAgICAgICAgICAgICAgIHsgYmFzZTogXCJmcmFtZVwiLCBzdGVwczogW1wiY2FtZXJhXCIsIFwidXBkYXRlXCIsIFwicGh5c2ljc1wiLCBcInNjZW5lXCIsIFwicmVuZGVyXCJdIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHBsdWdpbnM6IFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ1N0YXRzLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90U3RhdHNcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgR2FtZS5wcm90b3R5cGUubWFrZVNjZW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gICAgICAgIHRoaXMucGxheWVyU2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICAgICAgdGhpcy5zdGFyU2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICAgICAgdmFyIHNjZW5lID0gdGhpcy5zY2VuZSwgcGxheWVyU2NlbmUgPSB0aGlzLnBsYXllclNjZW5lLCBzdGFyU2NlbmUgPSB0aGlzLnN0YXJTY2VuZSwgbGV2ZWwgPSB0aGlzLmN1cnJlbnRMZXZlbERlZmluaXRpb247XG4gICAgICAgIFtzY2VuZSwgcGxheWVyU2NlbmUsIHN0YXJTY2VuZV0uZm9yRWFjaChmdW5jdGlvbiAoc2NlbmUpIHtcbiAgICAgICAgICAgIHZhciBoTGlnaHQgPSBuZXcgVEhSRUUuSGVtaXNwaGVyZUxpZ2h0KDB4RkZGRkZGLCAweDAwMDAwMCwgMSk7XG4gICAgICAgICAgICBzY2VuZS5hZGQoaExpZ2h0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIFtzY2VuZSwgcGxheWVyU2NlbmUsIHN0YXJTY2VuZV0uZm9yRWFjaChmdW5jdGlvbiAoc2NlbmUpIHtcbiAgICAgICAgICAgIHZhciBhTGlnaHQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KDB4NDA0MDQwKTtcbiAgICAgICAgICAgIHNjZW5lLmFkZChhTGlnaHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgW3NjZW5lLCBwbGF5ZXJTY2VuZSwgc3RhclNjZW5lXS5mb3JFYWNoKGZ1bmN0aW9uICh0aGVTY2VuZSkge1xuICAgICAgICAgICAgdmFyIGRMaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4RkZGRkZGLCAwLjI1KTtcbiAgICAgICAgICAgIGRMaWdodC5wb3NpdGlvbi5zZXQoMCwgMTAsIDMpO1xuICAgICAgICAgICAgaWYgKHRoZVNjZW5lID09PSBzY2VuZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9zaGFkb3dMaWdodCA9IGRMaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vZExpZ2h0LnNoYWRvdyA9IG5ldyBUSFJFRS5MaWdodFNoYWRvdyhuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNTAsIDEsIDEyMDAsIDI1MDApKTtcbiAgICAgICAgICAgIGRMaWdodC5jYXN0U2hhZG93ID0gdGhlU2NlbmUgPT09IHNjZW5lICYmIFVTRV9SRUFMX1NIQURPV1M7XG4gICAgICAgICAgICB0aGVTY2VuZS5hZGQoZExpZ2h0KTtcbiAgICAgICAgICAgIGlmIChVU0VfUkVBTF9TSEFET1dTKSB7XG4gICAgICAgICAgICAgICAgZExpZ2h0LnNoYWRvdy5jYW1lcmEubGVmdCA9IC01MDtcbiAgICAgICAgICAgICAgICBkTGlnaHQuc2hhZG93LmNhbWVyYS5yaWdodCA9IDUwO1xuICAgICAgICAgICAgICAgIGRMaWdodC5zaGFkb3cuY2FtZXJhLnRvcCA9IDUwO1xuICAgICAgICAgICAgICAgIGRMaWdodC5zaGFkb3cuY2FtZXJhLmJvdHRvbSA9IC01MDtcbiAgICAgICAgICAgICAgICBkTGlnaHQuc2hhZG93LmJpYXMgPSAtMC4wMDAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGJnQ29sb3IgPSBsZXZlbC5vcHRpb25zLmJnQ29sb3IgfHwgMHgwMDAwMDA7XG4gICAgICAgIFtzY2VuZSwgcGxheWVyU2NlbmUsIHN0YXJTY2VuZV0uZm9yRWFjaChmdW5jdGlvbiAoc2NlbmUpIHtcbiAgICAgICAgICAgIHNjZW5lLmZvZyA9IG5ldyBUSFJFRS5Gb2coYmdDb2xvciwgMSwgX3RoaXMuY2FtZXJhLmZhcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldENsZWFyQ29sb3IoYmdDb2xvcik7XG4gICAgICAgIC8vIGFkZCBzb21lIHN0YXJzIHRvIHRoZSBsZXZlbD9cbiAgICAgICAgdmFyIGxpbmVHZW9tZXRyeSA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDIwMDAwOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB2ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgICAgICAgIHYueCA9IChNYXRoLnJhbmRvbSgpICogMjAwMDAgLyAyKSAtIDEwMDAwIC8gMjtcbiAgICAgICAgICAgIHYueSA9IChNYXRoLnJhbmRvbSgpICogNDAwMDAgLyAyKSAtIDIwMDAwIC8gMjtcbiAgICAgICAgICAgIHYueiA9IC0oTWF0aC5yYW5kb20oKSAqICh0aGlzLmxldmVsLmxldmVsLmxlbmd0aCAqIHRoaXMubGV2ZWwuYmxvY2tTaXplKSkgLSAxMDAwO1xuICAgICAgICAgICAgbGluZUdlb21ldHJ5LnZlcnRpY2VzLnB1c2godik7XG4gICAgICAgICAgICB2ID0gdi5jbG9uZSgpO1xuICAgICAgICAgICAgdi56IC09IDEwMCArIChNYXRoLnJhbmRvbSgpICogMTAwMCk7XG4gICAgICAgICAgICBsaW5lR2VvbWV0cnkudmVydGljZXMucHVzaCh2KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGluZU1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHsgY29sb3I6IDB4RkZGRkZGLCBvcGFjaXR5OiAwLjc1LCBsaW5ld2lkdGg6IDIsIHRyYW5zcGFyZW50OiB0cnVlIH0pO1xuICAgICAgICB2YXIgbGluZXMgPSBuZXcgVEhSRUUuTGluZVNlZ21lbnRzKGxpbmVHZW9tZXRyeSwgbGluZU1hdGVyaWFsKTtcbiAgICAgICAgbGluZXMuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgICBsaW5lcy5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2xpbmVzID0gbGluZXM7XG4gICAgICAgIHN0YXJTY2VuZS5hZGQobGluZXMpO1xuICAgICAgICB2YXIgcGxhbmVDb2xvciA9IGxldmVsLm9wdGlvbnMucGxhbmVDb2xvciB8fCAweDgwMDAwMDtcbiAgICAgICAgdmFyIHBsYW5lR2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgxMDAwMDAsIHRoaXMubGV2ZWwubGV2ZWwubGVuZ3RoICogdGhpcy5sZXZlbC5ibG9ja1NpemUpO1xuICAgICAgICB2YXIgcGxhbmVNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHsgY29sb3I6IHBsYW5lQ29sb3IgfSk7XG4gICAgICAgIHZhciBwbGFuZU1lc2ggPSBuZXcgVEhSRUUuTWVzaChwbGFuZUdlb21ldHJ5LCBwbGFuZU1hdGVyaWFsKTtcbiAgICAgICAgcGxhbmVNZXNoLnJvdGF0aW9uLnggPSAtTWF0aC5QSSAvIDI7XG4gICAgICAgIHBsYW5lTWVzaC5wb3NpdGlvbi55ID0gLSh0aGlzLmxldmVsLnN0ZXBTaXplICogKExldmVsLkhBTEZfTUFYX1NURVBTICsgOCkpO1xuICAgICAgICBwbGFuZU1lc2guY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgICBwbGFuZU1lc2gucmVjZWl2ZVNoYWRvdyA9IFVTRV9SRUFMX1NIQURPV1M7XG4gICAgICAgIHRoaXMuc2NlbmUuYWRkKHBsYW5lTWVzaCk7XG4gICAgICAgIHRoaXMubGV2ZWwuYWRkVG9TY2VuZShzY2VuZSwgVVNFX1JFQUxfU0hBRE9XUyk7XG4gICAgICAgIC8qXG4gICAgICAgIGxldCBwbGF5ZXJHZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVCdWZmZXJHZW9tZXRyeSh0aGlzLmxldmVsLmJsb2NrU2l6ZSAvIDQsIDY0LCA2NCksXG4gICAgICAgICAgICBwbGF5ZXJNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IGNvbG9yOiAweDYwOTBDMCwgc2hpbmluZXNzOiAxMDAsIHRyYW5zcGFyZW50OiB0cnVlIH0pLFxuICAgICAgICAgICAgcGxheWVyTWVzaCA9IG5ldyBUSFJFRS5NZXNoKHBsYXllckdlb21ldHJ5LCBwbGF5ZXJNYXRlcmlhbCk7XG4gICAgICAgIHBsYXllclNjZW5lLmFkZChwbGF5ZXJNZXNoKTtcbiAgICAgICAgdGhpcy5fcGxheWVyTWVzaCA9IHBsYXllck1lc2g7XG4gICAgICAgICovXG4gICAgICAgIHZhciBtb2RlbCA9IFwiY2FyLWthcnQtYmx1ZVwiO1xuICAgICAgICB2YXIgbXRsTG9hZGVyID0gbmV3IE1UTExvYWRlcigpO1xuICAgICAgICBtdGxMb2FkZXIuc2V0UGF0aChcImFzc2V0cy9cIik7XG4gICAgICAgIG10bExvYWRlci5sb2FkKG1vZGVsICsgXCIubXRsXCIsIGZ1bmN0aW9uIChtYXRlcmlhbHMpIHtcbiAgICAgICAgICAgIG1hdGVyaWFscy5wcmVsb2FkKCk7XG4gICAgICAgICAgICB2YXIgb2JqTG9hZGVyID0gbmV3IE9CSkxvYWRlcigpO1xuICAgICAgICAgICAgb2JqTG9hZGVyLnNldE1hdGVyaWFscyhtYXRlcmlhbHMpO1xuICAgICAgICAgICAgb2JqTG9hZGVyLnNldFBhdGgoXCJhc3NldHMvXCIpO1xuICAgICAgICAgICAgb2JqTG9hZGVyLmxvYWQobW9kZWwgKyBcIi5vYmpcIiwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIF90aGlzLl9wbGF5ZXJNZXNoID0gb2JqO1xuICAgICAgICAgICAgICAgIG9iai5zY2FsZS5zZXQoX3RoaXMubGV2ZWwuYmxvY2tTaXplIC8gMSwgX3RoaXMubGV2ZWwuYmxvY2tTaXplIC8gMSwgX3RoaXMubGV2ZWwuYmxvY2tTaXplIC8gMSk7XG4gICAgICAgICAgICAgICAgb2JqLmNhc3RTaGFkb3cgPSBVU0VfUkVBTF9TSEFET1dTO1xuICAgICAgICAgICAgICAgIG9iai5yZWNlaXZlU2hhZG93ID0gVVNFX1JFQUxfU0hBRE9XUztcbiAgICAgICAgICAgICAgICBfdGhpcy5fc2hhZG93TGlnaHQudGFyZ2V0ID0gb2JqO1xuICAgICAgICAgICAgICAgIGlmIChVU0VfUkVBTF9TSEFET1dTKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNjZW5lLmFkZChvYmopO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyU2NlbmUuYWRkKG9iaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIVVTRV9SRUFMX1NIQURPV1MpIHtcbiAgICAgICAgICAgIHZhciBzaGFkb3dHZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUJ1ZmZlckdlb21ldHJ5KHRoaXMubGV2ZWwuYmxvY2tTaXplIC8gMi4zMywgdGhpcy5sZXZlbC5ibG9ja1NpemUgLyAxLjMzLCAxLCAxKSwgc2hhZG93TWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHgwMDAwMDAsIHRyYW5zcGFyZW50OiB0cnVlLCBvcGFjaXR5OiAwLjI1IH0pLCBzaGFkb3cgPSBuZXcgVEhSRUUuTWVzaChzaGFkb3dHZW9tZXRyeSwgc2hhZG93TWF0ZXJpYWwpO1xuICAgICAgICAgICAgc2hhZG93LnJvdGF0aW9uLnggPSAtTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICAvL3RoaXMuc2NlbmUuYWRkKHNoYWRvdyk7XG4gICAgICAgICAgICBwbGF5ZXJTY2VuZS5hZGQoc2hhZG93KTtcbiAgICAgICAgICAgIHRoaXMuX3NoYWRvdyA9IHNoYWRvdztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NlbmU7XG4gICAgfTtcbiAgICBHYW1lLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIChhdExldmVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChhdExldmVsID09PSB2b2lkIDApIHsgYXRMZXZlbCA9IDE7IH1cbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRMZXZlbCA9IGF0TGV2ZWwgLSAxLCBsZXZlbCA9IGxldmVsc1tub3JtYWxpemVkTGV2ZWxdLCBiZWF0ID0gdGhpcy5iZWF0O1xuICAgICAgICB0aGlzLmN1cnJlbnRMZXZlbERlZmluaXRpb24gPSBsZXZlbDtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBsZXZlbC5vcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5kcmF3RGlzdGFuY2UgPSAxNTtcbiAgICAgICAgdGhpcy5sZXZlbCA9IExldmVsLmNyZWF0ZUxldmVsKGxldmVsLmxldmVsLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKGxldmVsLm9wdGlvbnMubXVzaWMpIHtcbiAgICAgICAgICAgIGJlYXQuYnBtID0gbGV2ZWwub3B0aW9ucy5icG07XG4gICAgICAgICAgICBhdWRpb01hbmFnZXIuYWRkKHsgbmFtZTogXCJsZXZlbFwiLCB1cmw6IFwibXVzaWMvXCIgKyBsZXZlbC5vcHRpb25zLm11c2ljLmZpbGUsIGxvb3A6IHRydWUgfSk7XG4gICAgICAgICAgICB0aGlzLm11c2ljU3RhcnRQb2ludHMgPSBsZXZlbC5vcHRpb25zLm11c2ljLnN0YXJ0UG9pbnRzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FtZXJhLmZhciA9IHRoaXMubGV2ZWwuYmxvY2tTaXplICogKG9wdGlvbnMuZHJhd0Rpc3RhbmNlIC0gMik7XG4gICAgICAgIHRoaXMucGxheWVyQ2FtZXJhLmZhciA9IHRoaXMuY2FtZXJhLmZhcjtcbiAgICAgICAgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuICAgICAgICB0aGlzLnBsYXllckNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gICAgICAgIHRoaXMuc2NlbmUgPSB0aGlzLm1ha2VTY2VuZSgpO1xuICAgICAgICB0aGlzLnBsYXllciA9IG5ldyBQbGF5ZXIoe1xuICAgICAgICAgICAgaW1tb3J0YWw6IHRoaXMuaW5EZW1vTW9kZSxcbiAgICAgICAgICAgIGxldmVsOiB0aGlzLmxldmVsLFxuICAgICAgICAgICAgcmVzdGl0dXRpb246IDAsXG4gICAgICAgICAgICBwb3NpdGlvbjogbmV3IFRIUkVFLlZlY3RvcjMoMCwgMjAwLCAxNTAwKSxcbiAgICAgICAgICAgIHZlbG9jaXR5OiBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAyNSksXG4gICAgICAgICAgICByb3RhdGlvbjogbmV3IFRIUkVFLkV1bGVyKDAsIE1hdGguUEksIDApXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9yZXNldFBoeXNpY3MoKTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICh0KSB7IHJldHVybiBfdGhpcy5hbmltYXRlKHQpOyB9KTtcbiAgICB9O1xuICAgIEdhbWUucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKHN0YXRlLCB3YWl0UmVhc29uKSB7XG4gICAgICAgIHZhciBwbGF5ZXIgPSB0aGlzLnBsYXllcjtcbiAgICAgICAgdGhpcy5zdG9wTXVzaWMoKTtcbiAgICAgICAgdGhpcy5fcmVzZXRQaHlzaWNzKCk7XG4gICAgICAgIHRoaXMuZGVsdGEucmVzZXQoKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlIHx8IHRoaXMuc3RhdGU7XG4gICAgICAgIHBsYXllci5yZXNldCgpO1xuICAgICAgICBwbGF5ZXIuaW1tb3J0YWwgPSB0aGlzLmluRGVtb01vZGU7IC8vIHBsYXllciBiZWNvbWVzIGltbW9ydGFsIGlmIGluIGRlbW9cbiAgICAgICAgLy8gd2FpdCBmb3IgaW50ZXJhY3Rpb24gdG8gc3RhcnQgaWYgaW4gZ2FtZVxuICAgICAgICBpZiAod2FpdFJlYXNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLndhaXRpbmdGb3JJbnRlcmFjdGlvbiA9IHdhaXRSZWFzb247XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXVzZSgpOyAvLyBwYXVzZSBnYW1lXG4gICAgfTtcbiAgICBHYW1lLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdHMoXCJ1cGRhdGVcIikuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGxheWVyID0gdGhpcy5wbGF5ZXIsIHN0YXRlID0gdGhpcy5jb250cm9sbGVycy5yZWFkU3RhdGUoKSwgdXAgPSBzdGF0ZS51cCwgZG93biA9IHN0YXRlLmRvd24sIGxlZnQgPSBzdGF0ZS5sZWZ0LCByaWdodCA9IHN0YXRlLnJpZ2h0LCBwYXVzZSA9IHN0YXRlLnBhdXNlOyAvKixcbiAgICAgICAgZXhpdCA9IHN0YXRlLmV4aXQsXG4gICAgICAgIHJldHJ5ID0gc3RhdGUucmV0cnk7Ki9cbiAgICAgICAgLy8gaWYgd2UncmUgd2FpdGluZyBmb3Igc29tZXRoaW5nLCBvciBwYXVzZWQsIHRha2UgY2FyZSBvZiByZW5kZXJpbmcgdGhhdFxuICAgICAgICAvLyB0byB0aGUgc2NyZWVuXG4gICAgICAgIHRoaXMuX3JlbmRlck1lc3NhZ2UoKTtcbiAgICAgICAgaWYgKHVwIHx8IGRvd24gfHwgbGVmdCB8fCByaWdodCkge1xuICAgICAgICAgICAgaWYgKHRoaXMud2FpdGluZ0ZvckludGVyYWN0aW9uICE9PSBXQUlUSU5HX1JFQVNPTi5OT1RfV0FJVElORykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRyb2xsZXJzLnRpbWVTaW5jZUxhc3RJbnB1dCA8IDI1MCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRpc3BsYXkuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0UGh5c2ljcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy53YWl0aW5nRm9ySW50ZXJhY3Rpb24gPSBXQUlUSU5HX1JFQVNPTi5OT1RfV0FJVElORztcbiAgICAgICAgICAgIGlmICh0aGlzLmluRGVtb01vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KFwiZ2FtZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGF1c2UpIHtcbiAgICAgICAgICAgIHRoaXMud2FpdGluZ0ZvckludGVyYWN0aW9uID0gV0FJVElOR19SRUFTT04uUEFVU0VEO1xuICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMud2FpdGluZ0ZvckludGVyYWN0aW9uICE9PSBXQUlUSU5HX1JFQVNPTi5ERU1PICYmXG4gICAgICAgICAgICAgICAgdGhpcy53YWl0aW5nRm9ySW50ZXJhY3Rpb24gIT09IFdBSVRJTkdfUkVBU09OLkRJRUQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhaXRpbmdGb3JJbnRlcmFjdGlvbiA9IFdBSVRJTkdfUkVBU09OLk5PVF9XQUlUSU5HO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwbGF5ZXIudmVsb2NpdHkueCA9IDA7XG4gICAgICAgIGlmICghKGxlZnQgJiYgcmlnaHQpKSB7XG4gICAgICAgICAgICBpZiAobGVmdCkge1xuICAgICAgICAgICAgICAgIHBsYXllci52ZWxvY2l0eS54ID0gcGxheWVyLnZlbG9jaXR5Lno7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmlnaHQpIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXIudmVsb2NpdHkueCA9IC1wbGF5ZXIudmVsb2NpdHkuejtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwbGF5ZXIuZGVmeUdyYXZpdHkgPSBmYWxzZTtcbiAgICAgICAgaWYgKHVwKSB7XG4gICAgICAgICAgICBpZiAocGxheWVyLmdyb3VuZGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWx0YS5sb2dHcm91cCA9IFwiSlVNUFwiO1xuICAgICAgICAgICAgICAgIHBsYXllci5qdW1wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocGxheWVyLnZlbG9jaXR5LnkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYXllci5kZWZ5R3Jhdml0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdXApIHtcbiAgICAgICAgICAgIHRoaXMuZGVsdGEubG9nR3JvdXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcGxheWVyLmNyb3VjaCA9IGZhbHNlO1xuICAgICAgICBpZiAoZG93biAmJiBwbGF5ZXIuZ3JvdW5kZWQpIHtcbiAgICAgICAgICAgIHBsYXllci5jcm91Y2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdHMoXCJ1cGRhdGVcIikuZW5kKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEdhbWUucHJvdG90eXBlLnVwZGF0ZUNhbWVyYSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0cyhcImNhbWVyYVwiKS5zdGFydCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwbGF5ZXIgPSB0aGlzLnBsYXllciwgY2FtZXJhID0gdGhpcy5jYW1lcmEsIHBsYXllckNhbWVyYSA9IHRoaXMucGxheWVyQ2FtZXJhO1xuICAgICAgICBpZiAodGhpcy5pbkdhbWVNb2RlKSB7XG4gICAgICAgICAgICAvLyBjcm91Y2hcbiAgICAgICAgICAgIGNhbWVyYS5wb3NpdGlvbi55IC09IChwbGF5ZXIuY3JvdWNoID8gMTAwIDogNTApO1xuICAgICAgICAgICAgaWYgKFBMQVlFUl9QRVJTT05fVklFVyA9PT0gUEVSU09OX1ZJRVcuVEhJUkQpIHtcbiAgICAgICAgICAgICAgICBjYW1lcmEucG9zaXRpb24ueiArPSB0aGlzLmxldmVsLmJsb2NrU2l6ZTsgLy8gLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2FtZXJhIGJvYlxuICAgICAgICAgICAgaWYgKHBsYXllci5ncm91bmRlZCkge1xuICAgICAgICAgICAgICAgIC8qICAgIGNhbWVyYS5wb3NpdGlvbi54ICs9IE1hdGguY29zKChwbGF5ZXIuYm9iIC8gMykgKiAoTWF0aC5QSSAvIDE4MCkpICogMTA7XG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYS5wb3NpdGlvbi55ICs9IE1hdGguYWJzKE1hdGguc2luKChwbGF5ZXIuYm9iIC8gMikgKiAoTWF0aC5QSSAvIDE4MCkpICogMTApO1xuICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIGZvdiB0byBzaW11bGF0ZSBzcGVlZFxuICAgICAgICAgICAgY2FtZXJhLmZvdiA9IE1hdGgubWluKDExMi41ICsgKHBsYXllci52ZWxvY2l0eS56IC8gMiksIDE2MCk7XG4gICAgICAgICAgICBjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuICAgICAgICAgICAgcGxheWVyQ2FtZXJhLmZvdiA9IDEyNTtcbiAgICAgICAgICAgIHBsYXllckNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gICAgICAgICAgICAvKmlmIChQTEFZRVJfUEVSU09OX1ZJRVcgPT09IFBFUlNPTl9WSUVXLlRISVJEKSB7XG4gICAgICAgICAgICAgICAgY2FtZXJhLnJvdGF0aW9uLnggPSAtTWF0aC5QSSAvIDE2OyAvLyBsb29raW5nIGRvd25cbiAgICAgICAgICAgIH0gZWxzZSB7ICovXG4gICAgICAgICAgICBjYW1lcmEucm90YXRpb24ueCA9IDA7XG4gICAgICAgICAgICAvL31cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNhbWVyYS5wb3NpdGlvbi55ICs9IDQwMDsgLy8gdXAgaGlnaFxuICAgICAgICAgICAgY2FtZXJhLnJvdGF0aW9uLnggPSAtMC4yNTsgLy8gbG9va2luZyBkb3duXG4gICAgICAgIH1cbiAgICAgICAgcGxheWVyQ2FtZXJhLnBvc2l0aW9uLmNvcHkoY2FtZXJhLnBvc2l0aW9uKTtcbiAgICAgICAgcGxheWVyQ2FtZXJhLnF1YXRlcm5pb24uY29weShjYW1lcmEucXVhdGVybmlvbik7XG4gICAgICAgIHBsYXllckNhbWVyYS5yb3RhdGlvbi5jb3B5KGNhbWVyYS5yb3RhdGlvbik7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdHMoXCJjYW1lcmFcIikuZW5kKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEdhbWUucHJvdG90eXBlLnJlcXVlc3RGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuX2FuaW1hdGUpO1xuICAgIH07XG4gICAgR2FtZS5wcm90b3R5cGUuYmVnaW5GcmFtZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgdmFyIHN0YXRzID0gdGhpcy5fc3RhdHM7XG4gICAgICAgICAgICBzdGF0cyhcImZyYW1lXCIpLnN0YXJ0KCk7XG4gICAgICAgICAgICB0aGlzLl9nU3RhdHMuc3RhcnQoKTtcbiAgICAgICAgICAgIHN0YXRzKFwickFGXCIpLnRpY2soKTtcbiAgICAgICAgICAgIHN0YXRzKFwiRlBTXCIpLmZyYW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0RnJhbWUoKTtcbiAgICAgICAgdmFyIGQgPSB0aGlzLmRlbHRhLnVwZGF0ZSh0KTtcbiAgICAgICAgaWYgKFNMT1dfRkFDVE9SICE9PSAxKSB7XG4gICAgICAgICAgICBkIC89IFNMT1dfRkFDVE9SO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoZCAvIE1TX1BFUl9GUkFNRSk7XG4gICAgfTtcbiAgICBHYW1lLnByb3RvdHlwZS5lbmRGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICB2YXIgc3RhdHMgPSB0aGlzLl9zdGF0cztcbiAgICAgICAgICAgIHN0YXRzKFwiZnJhbWVcIikuZW5kKCk7XG4gICAgICAgICAgICBzdGF0cygpLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBHYW1lLnByb3RvdHlwZS5hbmltYXRlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIGNhbWVyYSA9IHRoaXMuY2FtZXJhLCBwbGF5ZXJDYW1lcmEgPSB0aGlzLnBsYXllckNhbWVyYSwgc2NlbmUgPSB0aGlzLnNjZW5lLCBsZXZlbCA9IHRoaXMubGV2ZWwsIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlciwgcGxheWVyID0gdGhpcy5wbGF5ZXIsIFxuICAgICAgICAvL2luRGVtbyA9IHRoaXMuaW5EZW1vTW9kZSxcbiAgICAgICAgaW5HYW1lID0gdGhpcy5pbkdhbWVNb2RlLCBjYW1Qb3NpdGlvbiwgY2FtUXVhdGVybmlvbiwgY2FtUm90YXRpb247XG4gICAgICAgIC8vIHJlcG9ydCBmcHMgYW5kIGdldCBkZWx0YVxuICAgICAgICB2YXIgZGYgPSB0aGlzLmJlZ2luRnJhbWUodCk7XG4gICAgICAgIHZhciBmb3JjZSA9IGRmID09PSAwIHx8IHBsYXllci5kZWFkOyAvLyBmb3JjZSBsZXRzIHVzIGRldGVybWluZSB3aGVuIHRvIHJlZHJhdyB0aGUgZW50aXJlIGxldmVsXG4gICAgICAgIHRoaXMuX3BoeXNpY3NBY2N1bXVsYXRvciArPSBkZjtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMucGF1c2VkIHx8ICh0aGlzLndhaXRpbmdGb3JJbnRlcmFjdGlvbiAhPT0gV0FJVElOR19SRUFTT04uTk9UX1dBSVRJTkcgJiYgdGhpcy53YWl0aW5nRm9ySW50ZXJhY3Rpb24gIT09IFdBSVRJTkdfUkVBU09OLkRFTU8pKSB7XG4gICAgICAgICAgICB0aGlzLmVuZEZyYW1lKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBsYXllci5wb3NpdGlvbi56IDwgMCAmJiAhYXVkaW9NYW5hZ2VyLmlzUGxheWluZyhcImxldmVsXCIpICYmIGluR2FtZSkge1xuICAgICAgICAgICAgdGhpcy5zdGFydE11c2ljKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGV0ZWN0IGlmIGF0IGVuZCBvZiBsZXZlbCBzbyB3ZSBjYW4gcmVzdGFydFxuICAgICAgICBpZiAocGxheWVyLmRlYWQgfHwgcGxheWVyLnBvc2l0aW9uLnogPCAtKGxldmVsLmxldmVsLmxlbmd0aCAqIGxldmVsLmJsb2NrU2l6ZSkpIHtcbiAgICAgICAgICAgIHZhciBwbGF5ZXJXYXNEZWFkID0gcGxheWVyLmRlYWQ7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KHBsYXllci5kZWFkID8gXCJnYW1lXCIgOiB0aGlzLnN0YXRlLCBwbGF5ZXJXYXNEZWFkID8gV0FJVElOR19SRUFTT04uRElFRCA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBkZiA9IDA7XG4gICAgICAgICAgICBmb3JjZSA9IHRydWU7XG4gICAgICAgICAgICBpZiAocGxheWVyV2FzRGVhZCkge1xuICAgICAgICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0cyhcInNjZW5lXCIpLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldmVsLnVwZGF0ZVNjZW5lKHBsYXllci5wb3NpdGlvbi56LCBmb3JjZSk7XG4gICAgICAgICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRzKFwic2NlbmVcIikuZW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZW5kRnJhbWUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0cyhcInBoeXNpY3NcIikuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKFBIWVNJQ1NfTU9ERSkge1xuICAgICAgICAgICAgY2FzZSBQSFlTSUNTX01PREVfQ09OU1RBTlQ6XG4gICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc0FjY3VtdWxhdG9yID0gMDtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuYXBwbHlQaHlzaWNzKDEpO1xuICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLmludGVycG9sYXRlKDEpO1xuICAgICAgICAgICAgICAgIGNhbWVyYS5wb3NpdGlvbi5jb3B5KHRoaXMucGxheWVyLnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBjYW1lcmEucXVhdGVybmlvbi5jb3B5KHRoaXMucGxheWVyLnF1YXRlcm5pb24pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQSFlTSUNTX01PREVfVElDSzpcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5fcGh5c2ljc0FjY3VtdWxhdG9yID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLnRpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc0FjY3VtdWxhdG9yIC09IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9waHlzaWNzQWNjdW11bGF0b3IgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfYSA9IHRoaXMucGxheWVyLmludGVycG9sYXRlKDEgKyB0aGlzLl9waHlzaWNzQWNjdW11bGF0b3IpLCBjYW1Qb3NpdGlvbiA9IF9hWzBdLCBjYW1RdWF0ZXJuaW9uID0gX2FbMV0sIGNhbVJvdGF0aW9uID0gX2FbMl07XG4gICAgICAgICAgICAgICAgY2FtZXJhLnBvc2l0aW9uLmNvcHkoY2FtUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGNhbWVyYS5xdWF0ZXJuaW9uLmNvcHkoY2FtUXVhdGVybmlvbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBIWVNJQ1NfTU9ERV9ERUxUQTpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc0FjY3VtdWxhdG9yID0gMDtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuYXBwbHlQaHlzaWNzKGRmKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5pbnRlcnBvbGF0ZSgxKTtcbiAgICAgICAgICAgICAgICBjYW1lcmEucG9zaXRpb24uY29weSh0aGlzLnBsYXllci5wb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgY2FtZXJhLnF1YXRlcm5pb24uY29weSh0aGlzLnBsYXllci5xdWF0ZXJuaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRzKFwicGh5c2ljc1wiKS5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZUNhbWVyYSgxKTtcbiAgICAgICAgLy8gYmxpbmsgbGluZXNcbiAgICAgICAgdGhpcy5fbGluZXMubWF0ZXJpYWwub3BhY2l0eSA9IDAuNzUgLSAodGhpcy5iZWF0Lm5vcm1hbGl6ZWRUaW1lU2luY2VMYXN0QmVhdCAvIDIpO1xuICAgICAgICB0aGlzLl9saW5lcy5wb3NpdGlvbi55ID0gY2FtZXJhLnBvc2l0aW9uLnkgLyAzO1xuICAgICAgICB0aGlzLl9saW5lcy5wb3NpdGlvbi54ID0gY2FtZXJhLnBvc2l0aW9uLnggLyAzO1xuICAgICAgICBpZiAodGhpcy5fcGxheWVyTWVzaCkge1xuICAgICAgICAgICAgdGhpcy5fcGxheWVyTWVzaC52aXNpYmxlID0gUExBWUVSX1BFUlNPTl9WSUVXID09PSBQRVJTT05fVklFVy5USElSRDtcbiAgICAgICAgICAgIHRoaXMuX3BsYXllck1lc2gucG9zaXRpb24uY29weShwbGF5ZXIuY2FtUG9zaXRpb24pO1xuICAgICAgICAgICAgdGhpcy5fcGxheWVyTWVzaC5xdWF0ZXJuaW9uLmNvcHkocGxheWVyLmNhbVF1YXRlcm5pb24pO1xuICAgICAgICAgICAgdGhpcy5fcGxheWVyTWVzaC5yb3RhdGlvbi5jb3B5KHBsYXllci5jYW1Sb3RhdGlvbik7XG4gICAgICAgICAgICB0aGlzLl9wbGF5ZXJNZXNoLnBvc2l0aW9uLnkgLT0gdGhpcy5sZXZlbC5ibG9ja1NpemU7IC8vIC0gNDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFVU0VfUkVBTF9TSEFET1dTICYmIHRoaXMuX3BsYXllck1lc2gpIHtcbiAgICAgICAgICAgIHRoaXMuX3NoYWRvdy52aXNpYmxlID0gUExBWUVSX1BFUlNPTl9WSUVXID09PSBQRVJTT05fVklFVy5USElSRDtcbiAgICAgICAgICAgIHZhciBzaGFkb3dIZWlnaHQgPSB0aGlzLmxldmVsLmhlaWdodEF0UG9zaXRpb24ocGxheWVyLmNhbVBvc2l0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuX3NoYWRvdy5wb3NpdGlvbi5jb3B5KHRoaXMuX3BsYXllck1lc2gucG9zaXRpb24pO1xuICAgICAgICAgICAgLy90aGlzLl9zaGFkb3cucXVhdGVybmlvbi5jb3B5KHRoaXMuX3BsYXllck1lc2gucXVhdGVybmlvbik7XG4gICAgICAgICAgICAvL3RoaXMuX3NoYWRvdy5yb3RhdGlvbi5jb3B5KHRoaXMuX3BsYXllck1lc2gucm90YXRpb24pO1xuICAgICAgICAgICAgdGhpcy5fc2hhZG93LnJvdGF0aW9uLnggPSAtTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICB0aGlzLl9zaGFkb3cucm90YXRpb24ueiA9IHRoaXMuX3BsYXllck1lc2gucm90YXRpb24ueTtcbiAgICAgICAgICAgIGlmIChzaGFkb3dIZWlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNoYWRvd0hlaWdodCA9IC0odGhpcy5sZXZlbC5zdGVwU2l6ZSAqIChMZXZlbC5IQUxGX01BWF9TVEVQUyArIDgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3NoYWRvdy5wb3NpdGlvbi55ID0gc2hhZG93SGVpZ2h0ICsgMTsgLy8yMDtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWZyZXNoIGxldmVsIHJlbmRlcmluZ1xuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRzKFwic2NlbmVcIikuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBsZXZlbC51cGRhdGVTY2VuZShwbGF5ZXIucG9zaXRpb24ueiwgZm9yY2UpO1xuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRzKFwic2NlbmVcIikuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0cyhcInJlbmRlclwiKS5zdGFydCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlcmVyLmNsZWFyKCk7XG4gICAgICAgIHJlbmRlcmVyLnJlbmRlcih0aGlzLnN0YXJTY2VuZSwgY2FtZXJhKTtcbiAgICAgICAgcmVuZGVyZXIuY2xlYXIoZmFsc2UsIHRydWUsIHRydWUpO1xuICAgICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG4gICAgICAgIGlmIChQTEFZRVJfUEVSU09OX1ZJRVcgPT09IFBFUlNPTl9WSUVXLlRISVJEKSB7XG4gICAgICAgICAgICByZW5kZXJlci5jbGVhcihmYWxzZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICByZW5kZXJlci5yZW5kZXIodGhpcy5wbGF5ZXJTY2VuZSwgcGxheWVyQ2FtZXJhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRzKFwicmVuZGVyXCIpLmVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW5kRnJhbWUoKTtcbiAgICAgICAgdmFyIF9hO1xuICAgIH07XG4gICAgLypcbiAgICAgKiBQcml2YXRlIG1ldGhvZHNcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgR2FtZS5wcm90b3R5cGUuX3Jlc2V0UGh5c2ljcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcGh5c2ljc0FjY3VtdWxhdG9yID0gMDtcbiAgICB9O1xuICAgIEdhbWUucHJvdG90eXBlLl9yZW5kZXJNZXNzYWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWRpc3BsYXkudmlzaWJsZSkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLndhaXRpbmdGb3JJbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgV0FJVElOR19SRUFTT04uTkVXX0dBTUU6XG4gICAgICAgICAgICAgICAgY2FzZSBXQUlUSU5HX1JFQVNPTi5SRVRSWTpcbiAgICAgICAgICAgICAgICBjYXNlIFdBSVRJTkdfUkVBU09OLkRFTU86XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXkucHJpbnQoXCJSZWFkeT9cIiwgdGhpcy5jdXJyZW50TGV2ZWxEZWZpbml0aW9uLm9wdGlvbnMubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgV0FJVElOR19SRUFTT04uUEFVU0VEOlxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5LnByaW50KFwiUGF1c2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFdBSVRJTkdfUkVBU09OLkRJRUQ6XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXkucHJpbnQodGV4dFZhcmlhdGlvbnMuZ2V0RGVhdGhUaXRsZSgpLCB0ZXh0VmFyaWF0aW9ucy5nZXREZWF0aFRleHQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgV0FJVElOR19SRUFTT04uTk9UX1dBSVRJTkc6XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheS5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy53YWl0aW5nRm9ySW50ZXJhY3Rpb24gPT09IFdBSVRJTkdfUkVBU09OLk5PVF9XQUlUSU5HKSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheS5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qXG4gICAgICogU3RhdGUgbWFuYWdlbWVudFxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBHYW1lLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnBhdXNlTXVzaWMoKTtcbiAgICB9O1xuICAgIEdhbWUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZXN1bWVNdXNpYygpO1xuICAgICAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9yZXNldFBoeXNpY3MoKTtcbiAgICB9O1xuICAgIC8qXG4gICAgICogTXVzaWMgcmVsYXRlZCBmdW5jdGlvbnNcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgR2FtZS5wcm90b3R5cGUuc3RhcnRNdXNpYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YXJ0VGltZSA9IHRoaXMubXVzaWNTdGFydFBvaW50c1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLm11c2ljU3RhcnRQb2ludHMubGVuZ3RoKV07XG4gICAgICAgIGF1ZGlvTWFuYWdlci5zdG9wKFwiYmdcIik7XG4gICAgICAgIGF1ZGlvTWFuYWdlci5wbGF5KFwibGV2ZWxcIiwgc3RhcnRUaW1lKTtcbiAgICAgICAgdGhpcy5iZWF0LnN0YXJ0KCk7XG4gICAgfTtcbiAgICBHYW1lLnByb3RvdHlwZS5wYXVzZU11c2ljID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoYXVkaW9NYW5hZ2VyLmlzUGxheWluZyhcImxldmVsXCIpKSB7XG4gICAgICAgICAgICBhdWRpb01hbmFnZXIuc3RvcChcImxldmVsXCIpO1xuICAgICAgICAgICAgdGhpcy5iZWF0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgR2FtZS5wcm90b3R5cGUucmVzdW1lTXVzaWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChhdWRpb01hbmFnZXIuaXNQbGF5aW5nKFwibGV2ZWxcIikpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRNdXNpYygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBHYW1lLnByb3RvdHlwZS5zdG9wTXVzaWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF1ZGlvTWFuYWdlci5zdG9wKFwibGV2ZWxcIik7XG4gICAgICAgIHRoaXMuYmVhdC5zdG9wKCk7XG4gICAgfTtcbiAgICAvKlxuICAgICAqIEV2ZW50c1xuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBHYW1lLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX3Jlc2l6ZVRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fcmVzaXplVGltZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jlc2l6ZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVzaXplVGltZXIgPSBudWxsO1xuICAgICAgICAgICAgdmFyIGNhbWVyYSA9IF90aGlzLmNhbWVyYSwgcGxheWVyQ2FtZXJhID0gX3RoaXMucGxheWVyQ2FtZXJhLCByZW5kZXJlciA9IF90aGlzLnJlbmRlcmVyO1xuICAgICAgICAgICAgY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgcGxheWVyQ2FtZXJhLmFzcGVjdCA9IGNhbWVyYS5hc3BlY3Q7XG4gICAgICAgICAgICBjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuICAgICAgICAgICAgcGxheWVyQ2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICAgIH0sIDI1MCk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoR2FtZS5wcm90b3R5cGUsIFwiaW5EZW1vTW9kZVwiLCB7XG4gICAgICAgIC8qXG4gICAgICAgICAqIFByb3BlcnRpZXNcbiAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlID09PSBcImRlbW9cIjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEdhbWUucHJvdG90eXBlLCBcImluR2FtZU1vZGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlICE9PSBcImRlbW9cIjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEdhbWU7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgR2FtZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVIyRnRaUzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklrZGhiV1V1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNlVU5CUVhsRE8wRkJRM3BETEU5QlFVOHNTMEZCU3l4TFFVRkxMRTFCUVUwc1ZVRkJWU3hEUVVGRE8wRkJRMnhETEU5QlFVOHNWMEZCVnl4TlFVRk5MSE5EUVVGelF5eERRVUZETzBGQlF5OUVMRTlCUVU4c1YwRkJWeXhOUVVGTkxITkRRVUZ6UXl4RFFVRkRPMEZCUlM5RUxFbEJRVWtzVTBGQlV5eEhRVUZITEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkRPVUlzVTBGQlV5eEhRVUZITEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVkdVF5eFBRVUZQTEVsQlFVa3NUVUZCVFN4WFFVRlhMRU5CUVVNN1FVRkROMElzVDBGQlR5eExRVUZMTEUxQlFVMHNXVUZCV1N4RFFVRkRPMEZCUXk5Q0xFOUJRVThzUzBGQlN5eE5RVUZOTEZsQlFWa3NRMEZCUXp0QlFVTXZRaXhQUVVGUExFMUJRVTBzVFVGQlRTeGhRVUZoTEVOQlFVTTdRVUZEYWtNc1QwRkJUeXhOUVVGTkxFMUJRVTBzWVVGQllTeERRVUZETzBGQlEycERMRTlCUVU4c1kwRkJZeXhOUVVGTkxIRkNRVUZ4UWl4RFFVRkRPMEZCUldwRUxFOUJRVThzVDBGQlR5eE5RVUZOTEdOQlFXTXNRMEZCUXp0QlFVTnVReXhQUVVGUExGbEJRVmtzVFVGQlRTeHRRa0ZCYlVJc1EwRkJRenRCUVVVM1F5eEpRVUZOTEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVFN1FVRkZia0lzU1VGQlRTeFZRVUZWTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTNSQ0xFbEJRVTBzWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTXpRaXhKUVVGTkxGbEJRVmtzUjBGQlJ5eGhRVUZoTEVkQlFVY3NWVUZCVlN4RFFVRkRPMEZCUldoRUxFbEJRVTBzY1VKQlFYRkNMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMmhETEVsQlFVMHNhVUpCUVdsQ0xFZEJRVWNzUTBGQlF5eERRVUZETzBGQlF6VkNMRWxCUVUwc2EwSkJRV3RDTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUlRkQ0xFbEJRVTBzV1VGQldTeEhRVUZITEdsQ1FVRnBRaXhEUVVGRE8wRkJSWFpETEVsQlFVMHNWMEZCVnl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVWMFFpeEpRVUZOTEdOQlFXTXNSMEZCUnp0SlFVTnVRaXhYUVVGWExFVkJRVVVzUTBGQlF6dEpRVU5rTEZGQlFWRXNSVUZCUlN4RFFVRkRPMGxCUTFnc1MwRkJTeXhGUVVGRkxFVkJRVVU3U1VGRFZDeE5RVUZOTEVWQlFVVXNSVUZCUlR0SlFVTldMRWxCUVVrc1JVRkJSU3hGUVVGRk8wbEJRMUlzU1VGQlNTeEZRVUZGTEVWQlFVVTdRMEZEV0N4RFFVRkJPMEZCUlVRc1NVRkJUU3hYUVVGWExFZEJRVWM3U1VGRGFFSXNTMEZCU3l4RlFVRkZMRU5CUVVNN1NVRkRVaXhMUVVGTExFVkJRVVVzUTBGQlF6dERRVU5ZTEVOQlFVRTdRVUZGUkN4SlFVRk5MR3RDUVVGclFpeEhRVUZITEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNN1FVRkZOME1zU1VGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGRkwwSTdTVUZEU1N4alFVRlpMRVZCUVRKRE8xbEJRVE5ETERSQ1FVRXlReXhGUVVGNlF5dzBRa0ZCVnl4RlFVRkZMRzlDUVVGeFFpeEZRVUZ5UWl3d1EwRkJjVUk3VVVGRE5VTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhaUVVGWkxFTkJRVU03VVVGRk1VSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhUUVVGVExFTkJRVU03VVVGRGVFSXNTVUZCU1N4RFFVRkRMRmxCUVZrc1IwRkJSeXhUUVVGVExFTkJRVU03VVVGRk9VSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhUUVVGVExFTkJRVU03VVVGRGRrSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhUUVVGVExFTkJRVU03VVVGRE4wSXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhUUVVGVExFTkJRVU03VVVGRk0wSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhUUVVGVExFTkJRVU03VVVGRk1VSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFbEJRVWtzUlVGQlJTeERRVUZETzFGQlEzWkNMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSVFZDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJRM0JDTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUjBGQlJ5eFpRVUZaTEV0QlFVc3NUVUZCVFN4SFFVRkhMR05CUVdNc1EwRkJReXhKUVVGSkxFZEJRVWNzWTBGQll5eERRVUZETEZGQlFWRXNRMEZCUXp0UlFVVnlSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEZkQlFWY3NRMEZCUXp0UlFVVXZRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEVsQlFVa3NTMEZCU3l4RlFVRkZMRU5CUVVNN1VVRkRla0lzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRM0JDTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZGTjBJc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZGYmtJc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVVY0UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03U1VGRGFFSXNRMEZCUXp0SlFVVkVMRzFDUVVGSkxFZEJRVW83VVVGQlFTeHBRa0Z2UkVNN1VVRnVSRWNzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenRSUVVWNFFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRWRCUVVjc1JVRkJSU3hOUVVGTkxFTkJRVU1zVlVGQlZTeEhRVUZITEUxQlFVMHNRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzFGQlEyaEhMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eEZRVUZGTEUxQlFVMHNRMEZCUXl4VlFVRlZMRWRCUVVjc1RVRkJUU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkZkRWNzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhoUVVGaExFTkJRVU03V1VGRGNFTXNVMEZCVXl4RlFVRkZMRk5CUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEdOQlFXTXNRMEZCUXp0VFFVTjJSQ3hEUVVGRExFTkJRVU03VVVGRFNDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zV1VGQldTeEZRVUZGTEV0QlFVc3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZETzFGQlF6bEZMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03VVVGRE9VTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEZWQlFWVXNSVUZCUlN4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03VVVGRE4wUXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhUUVVGVExFZEJRVWNzUzBGQlN5eERRVUZETzFGQlJXaERMRVZCUVVVc1EwRkJReXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOdVFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETzFsQlEzWkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRE8xbEJRM0JFTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1UwRkJVeXhEUVVGRExHdENRVUZyUWl4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVOMlJDeERRVUZETzFGQlIwUXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRSUVVWd1JDeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEZWQlFVRXNSMEZCUnl4SlFVRkpMRTlCUVVFc1MwRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCYkVJc1EwRkJhMElzUTBGQlF5eERRVUZETzFGQlJUZEVMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEVWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzVDBGQlR5eEZRVUZGTEVOQlFVTTdXVUZETjBJc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eEpRVUZKTEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03V1VGRE4wTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFMUJRVTBzUTBGQlF6dG5Ra0ZEY2tJc1RVRkJUU3hGUVVGRk8yOUNRVU5LTEV0QlFVc3NSVUZCUlN4RlFVRkZMRTlCUVU4c1JVRkJSU3gxUWtGQmRVSXNSVUZCUlN4SlFVRkpMRVZCUVVVc1JVRkJSU3hGUVVGRk8yOUNRVU55UkN4SFFVRkhMRVZCUVVVc1JVRkJSU3hQUVVGUExFVkJRVVVzTUVKQlFUQkNMRVZCUVVVN2IwSkJRelZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRTlCUVU4c1JVRkJSU3hwUWtGQmFVSXNSVUZCUlN4TFFVRkxMRVZCUVVVc1JVRkJSU3hGUVVGRk8yOUNRVU01UXl4TFFVRkxMRVZCUVVVc1JVRkJSU3hQUVVGUExFVkJRVVVzYlVKQlFXMUNMRVZCUVVVc1NVRkJTU3hGUVVGRkxFVkJRVVVzUlVGQlJUdHZRa0ZEYWtRc1RVRkJUU3hGUVVGRkxFVkJRVVVzVDBGQlR5eEZRVUZGTEc5Q1FVRnZRaXhGUVVGRkxFbEJRVWtzUlVGQlJTeEZRVUZGTEVWQlFVVTdiMEpCUTI1RUxFMUJRVTBzUlVGQlJTeEZRVUZGTEU5QlFVOHNSVUZCUlN4elFrRkJjMElzUlVGQlJTeEpRVUZKTEVWQlFVVXNSVUZCUlN4RlFVRkZPMjlDUVVOeVJDeFBRVUZQTEVWQlFVVXNSVUZCUlN4UFFVRlBMRVZCUVVVc2NVSkJRWEZDTEVWQlFVVXNTVUZCU1N4RlFVRkZMRVZCUVVVc1JVRkJSVHR2UWtGRGNrUXNUVUZCVFN4RlFVRkZMRVZCUVVVc1QwRkJUeXhGUVVGRkxHMUNRVUZ0UWl4RlFVRkZMRWxCUVVrc1JVRkJSU3hGUVVGRkxFVkJRVVU3YVVKQlEzSkVPMmRDUVVORUxFMUJRVTBzUlVGQlJUdHZRa0ZEU2l4RlFVRkZMRTlCUVU4c1JVRkJSU3hYUVVGWExFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNTMEZCU3l4RlFVRkZMRXRCUVVzc1EwRkJReXhGUVVGRk8yOUNRVU5vUkN4RlFVRkZMRTlCUVU4c1JVRkJSU3hSUVVGUkxFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hSUVVGUkxFVkJRVVVzVTBGQlV5eEZRVUZGTEU5QlFVOHNSVUZCUlN4UlFVRlJMRU5CUVVNc1JVRkJSVHRwUWtGRE4wWTdaMEpCUTBRc1UwRkJVeXhGUVVGRk8yOUNRVU5RTEVWQlFVVXNTVUZCU1N4RlFVRkZMRTlCUVU4c1JVRkJSU3hMUVVGTExFVkJRVVVzUTBGQlF5eFJRVUZSTEVWQlFVVXNVVUZCVVN4RlFVRkZMRk5CUVZNc1JVRkJSU3hQUVVGUExFVkJRVVVzVVVGQlVTeERRVUZETEVWQlFVVTdhVUpCUXk5Rk8yZENRVU5FTEU5QlFVOHNSVUZCUlR0dlFrRkRUQ3hKUVVGSkxFTkJRVU1zVDBGQlR6dHZRa0ZEV2l4SlFVRkpMRU5CUVVNc1QwRkJUenRwUWtGRFpqdGhRVU5LTEVOQlFVTXNRMEZCUXp0UlFVTlFMRU5CUVVNN1NVRkRUQ3hEUVVGRE8wbEJSVVFzZDBKQlFWTXNSMEZCVkR0UlFVRkJMR2xDUVRCSVF6dFJRWHBJUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMUZCUXk5Q0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03VVVGRGNrTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0UlFVVnVReXhKUVVGSkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVTnNRaXhYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETEZkQlFWY3NSVUZET1VJc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlF6RkNMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNN1VVRkZlRU1zUTBGQlF5eExRVUZMTEVWQlFVVXNWMEZCVnl4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEV0QlFVczdXVUZEZWtNc1NVRkJTU3hOUVVGTkxFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNaVUZCWlN4RFFVRkRMRkZCUVZFc1JVRkJSU3hSUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZET1VRc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUVR0UlFVTnlRaXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVVZJTEVOQlFVTXNTMEZCU3l4RlFVRkZMRmRCUVZjc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4TFFVRkxPMWxCUTNwRExFbEJRVWtzVFVGQlRTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRmxCUVZrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dFpRVU01UXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZCTzFGQlEzSkNMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSVWdzUTBGQlF5eExRVUZMTEVWQlFVVXNWMEZCVnl4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEZGQlFWRTdXVUZETlVNc1NVRkJTU3hOUVVGTkxFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUTNoRUxFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZET1VJc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeExRVUZMTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM0pDTEV0QlFVa3NRMEZCUXl4WlFVRlpMRWRCUVVjc1RVRkJUU3hEUVVGRE8xbEJReTlDTEVOQlFVTTdXVUZEUkN4M1JrRkJkMFk3V1VGRmVFWXNUVUZCVFN4RFFVRkRMRlZCUVZVc1IwRkJSeXhSUVVGUkxFdEJRVXNzUzBGQlN5eEpRVUZKTEdkQ1FVRm5RaXhEUVVGRE8xbEJRek5FTEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVUU3V1VGRmNFSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOdVFpeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTTdaMEpCUTJoRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1IwRkJSeXhGUVVGRkxFTkJRVU03WjBKQlEyaERMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVNN1owSkJRemxDTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXp0blFrRkRiRU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU03V1VGRGFrTXNRMEZCUXp0UlFVTk1MRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSVWdzU1VGQlNTeFBRVUZQTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFbEJRVWtzVVVGQlVTeERRVUZETzFGQlEyaEVMRU5CUVVNc1MwRkJTeXhGUVVGRkxGZEJRVmNzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hMUVVGTE8xbEJRM3BETEV0QlFVc3NRMEZCUXl4SFFVRkhMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRMRVZCUVVVc1MwRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTXpSQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFGQlJYSkRMQ3RDUVVFclFqdFJRVU12UWl4SlFVRkpMRmxCUVZrc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0UlFVTjRReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFdEJRVXNzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMWxCUXpkQ0xFbEJRVWtzUTBGQlF5eEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8xbEJRelZDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTTdXVUZET1VNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVNNVF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXp0WlFVTnFSaXhaUVVGWkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNNVFpeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8xbEJRMlFzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkRjRU1zV1VGQldTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGJFTXNRMEZCUXp0UlFVVkVMRWxCUVVrc1dVRkJXU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEdsQ1FVRnBRaXhEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEZGQlFWRXNSVUZCUlN4UFFVRlBMRVZCUVVVc1NVRkJTU3hGUVVGRkxGTkJRVk1zUlVGQlJTeERRVUZETEVWQlFVVXNWMEZCVnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGNFZ3NTVUZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zV1VGQldTeERRVUZETEZsQlFWa3NSVUZCUlN4WlFVRlpMRU5CUVVNc1EwRkJRenRSUVVNdlJDeExRVUZMTEVOQlFVTXNWVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVONlFpeExRVUZMTEVOQlFVTXNZVUZCWVN4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVNMVFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVOd1FpeFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xRkJSWEpDTEVsQlFVa3NWVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeEpRVUZKTEZGQlFWRXNRMEZCUXp0UlFVTjBSQ3hKUVVGSkxHRkJRV0VzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4aFFVRmhMRU5CUVVNc1RVRkJUU3hGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMUZCUTNCSExFbEJRVWtzWVVGQllTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGVrVXNTVUZCU1N4VFFVRlRMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEdGQlFXRXNSVUZCUlN4aFFVRmhMRU5CUVVNc1EwRkJRenRSUVVNM1JDeFRRVUZUTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTNCRExGTkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhqUVVGakxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTXpSU3hUUVVGVExFTkJRVU1zVlVGQlZTeEhRVUZITEV0QlFVc3NRMEZCUXp0UlFVTTNRaXhUUVVGVExFTkJRVU1zWVVGQllTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRE8xRkJRek5ETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzFGQlJURkNMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEV0QlFVc3NSVUZCUlN4blFrRkJaMElzUTBGQlF5eERRVUZETzFGQlJTOURPenM3T3pzN1ZVRk5SVHRSUVVWR0xFbEJRVWtzUzBGQlN5eEhRVUZITEdWQlFXVXNRMEZCUXp0UlFVTTFRaXhKUVVGSkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEZOQlFWTXNSVUZCUlN4RFFVRkRPMUZCUTJoRExGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkROMElzVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCU1N4TFFVRkxMRk5CUVUwc1JVRkJSU3hWUVVGQkxGTkJRVk03V1VGRGNFTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8xbEJSWEJDTEVsQlFVa3NVMEZCVXl4SFFVRkhMRWxCUVVrc1UwRkJVeXhGUVVGRkxFTkJRVU03V1VGRGFFTXNVMEZCVXl4RFFVRkRMRmxCUVZrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFpRVU5zUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzFsQlF6ZENMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVWtzUzBGQlN5eFRRVUZOTEVWQlFVVXNWVUZCUVN4SFFVRkhPMmRDUVVVNVFpeExRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWRCUVVjc1EwRkJRenRuUWtGRGRrSXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRWRCUVVjc1EwRkJReXhGUVVGRkxFdEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hMUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRE5VWXNSMEZCUnl4RFFVRkRMRlZCUVZVc1IwRkJSeXhuUWtGQlowSXNRMEZCUXp0blFrRkRiRU1zUjBGQlJ5eERRVUZETEdGQlFXRXNSMEZCUnl4blFrRkJaMElzUTBGQlF6dG5Ra0ZEY2tNc1MwRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eE5RVUZOTEVkQlFVY3NSMEZCUnl4RFFVRkRPMmRDUVVVdlFpeEZRVUZGTEVOQlFVTXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUTI1Q0xFdEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8yZENRVU40UWl4RFFVRkRPMmRDUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzI5Q1FVTktMRmRCUVZjc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdaMEpCUTNwQ0xFTkJRVU03V1VGRFRDeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTlFMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSVWdzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEY0VJc1NVRkJTU3hqUVVGakxFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRWRCUVVjc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWxCUVVrc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVWQlF6bEhMR05CUVdNc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhGUVVGRkxFdEJRVXNzUlVGQlJTeFJRVUZSTEVWQlFVVXNWMEZCVnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNSVUZEYmtjc1RVRkJUU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRVZCUVVVc1kwRkJZeXhEUVVGRExFTkJRVU03V1VGRE5VUXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOcVF5eDVRa0ZCZVVJN1dVRkRla0lzVjBGQlZ5eERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRaUVVONFFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJRenRSUVVNeFFpeERRVUZETzFGQlJVUXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRKUVVOcVFpeERRVUZETzBsQlJVUXNiMEpCUVVzc1IwRkJUQ3hWUVVGTkxFOUJRVmM3VVVGQmFrSXNhVUpCYTBORE8xRkJiRU5MTEhkQ1FVRkJMRVZCUVVFc1YwRkJWenRSUVVOaUxFbEJRVWtzWlVGQlpTeEhRVUZITEU5QlFVOHNSMEZCUnl4RFFVRkRMRVZCUXpkQ0xFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMRVZCUXk5Q0xFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTNKQ0xFbEJRVWtzUTBGQlF5eHpRa0ZCYzBJc1IwRkJSeXhMUVVGTExFTkJRVU03VVVGRmNFTXNTVUZCU1N4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJReTlETEU5QlFVOHNRMEZCUXl4WlFVRlpMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJSVEZDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJRM0pFTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjBRaXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRE8xbEJRemRDTEZsQlFWa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVkQlFVY3NSVUZCUlN4WFFVRlRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVMHNSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFpRVU14Uml4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETzFGQlF6VkVMRU5CUVVNN1VVRkZSQ3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUjBGQlJ5eERRVUZETEU5QlFVOHNRMEZCUXl4WlFVRlpMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGNFVXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNN1VVRkRlRU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4elFrRkJjMElzUlVGQlJTeERRVUZETzFGQlEzSkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zYzBKQlFYTkNMRVZCUVVVc1EwRkJRenRSUVVVelF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF6dFJRVVU1UWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWtzVFVGQlRTeERRVUZETzFsQlEzSkNMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zVlVGQlZUdFpRVU42UWl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXM3V1VGRGFrSXNWMEZCVnl4RlFVRkZMRU5CUVVNN1dVRkRaQ3hSUVVGUkxFVkJRVVVzU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1JVRkJSU3hIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETzFsQlEzcERMRkZCUVZFc1JVRkJSU3hKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03V1VGRGNrTXNVVUZCVVN4RlFVRkZMRWxCUVVrc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03VTBGRE0wTXNRMEZCUXl4RFFVRkRPMUZCUlVnc1NVRkJTU3hEUVVGRExHRkJRV0VzUlVGQlJTeERRVUZETzFGQlEzSkNMSEZDUVVGeFFpeERRVUZETEZWQlFVRXNRMEZCUXl4SlFVRkpMRTlCUVVFc1MwRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCWml4RFFVRmxMRU5CUVVNc1EwRkJRenRKUVVOb1JDeERRVUZETzBsQlIwUXNiMEpCUVVzc1IwRkJUQ3hWUVVGTkxFdEJRVXNzUlVGQlJTeFZRVUZWTzFGQlEyNUNMRWxCUVVrc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTTdVVUZGZWtJc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETzFGQlEycENMRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRVVVzUTBGQlF6dFJRVU55UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzFGQlJXNUNMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN5eEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkZha01zVFVGQlRTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMUZCUldZc1RVRkJUU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVVc2NVTkJRWEZETzFGQlJYcEZMREpEUVVFeVF6dFJRVU16UXl4RlFVRkZMRU5CUVVNc1EwRkJReXhWUVVGVkxFdEJRVXNzVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTXpRaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRWRCUVVjc1ZVRkJWU3hEUVVGRE8xRkJRelZETEVOQlFVTTdVVUZEUkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQmRVSXNZVUZCWVR0SlFVVnlSQ3hEUVVGRE8wbEJSVVFzY1VKQlFVMHNSMEZCVGp0UlFVTkpMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEVWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMUZCUTJ4RExFTkJRVU03VVVGRFJDeEpRVUZKTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVOd1FpeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhUUVVGVExFVkJRVVVzUlVGRGNFTXNSVUZCUlN4SFFVRkhMRXRCUVVzc1EwRkJReXhGUVVGRkxFVkJRMklzU1VGQlNTeEhRVUZITEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUTJwQ0xFbEJRVWtzUjBGQlJ5eExRVUZMTEVOQlFVTXNTVUZCU1N4RlFVTnFRaXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NSVUZEYmtJc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXpzN09FSkJSVU03VVVGRk1VSXNlVVZCUVhsRk8xRkJRM3BGTEdkQ1FVRm5RanRSUVVOb1FpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1VVRkZkRUlzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRWxCUVVrc1NVRkJTU3hKUVVGSkxFbEJRVWtzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTVRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFdEJRVXNzWTBGQll5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRelZFTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zYTBKQlFXdENMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZETlVNc1RVRkJUU3hEUVVGRE8yZENRVU5ZTEVOQlFVTTdaMEpCUTBRc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzJkQ1FVTm1MRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRVVVzUTBGQlF6dFpRVU42UWl4RFFVRkRPMWxCUTBRc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4SFFVRkhMR05CUVdNc1EwRkJReXhYUVVGWExFTkJRVU03V1VGRGVFUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTJ4Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1dVRkRka0lzUTBGQlF6dFJRVU5NTEVOQlFVTTdVVUZGUkN4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlExSXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeEhRVUZITEdOQlFXTXNRMEZCUXl4TlFVRk5MRU5CUVVNN1dVRkRia1FzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkJPMUZCUTJoQ0xFTkJRVU03VVVGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTktMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1MwRkJTeXhqUVVGakxFTkJRVU1zU1VGQlNUdG5Ra0ZEYkVRc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4TFFVRkxMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTnlSQ3hKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRWRCUVVjc1kwRkJZeXhEUVVGRExGZEJRVmNzUTBGQlF6dFpRVU0xUkN4RFFVRkRPMWxCUTBRc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRMlFzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMWxCUTJ4Q0xFTkJRVU03VVVGRFRDeERRVUZETzFGQlJVUXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFGQlEzUkNMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVsQlFVa3NTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMjVDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlExQXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRNVU1zUTBGQlF6dFpRVU5FTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlExSXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNelF5eERRVUZETzFGQlEwd3NRMEZCUXp0UlFVTkVMRTFCUVUwc1EwRkJReXhYUVVGWExFZEJRVWNzUzBGQlN5eERRVUZETzFGQlF6TkNMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEVEN4RlFVRkZMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRiRUlzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRWRCUVVjc1RVRkJUU3hEUVVGRE8yZENRVU0zUWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03V1VGRGJFSXNRMEZCUXp0WlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yZENRVU5LTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRM2hDTEUxQlFVMHNRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRE8yZENRVU01UWl4RFFVRkRPMWxCUTB3c1EwRkJRenRSUVVOTUxFTkJRVU03VVVGRFJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRFRpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1IwRkJSeXhUUVVGVExFTkJRVUU3VVVGRGJrTXNRMEZCUXp0UlFVTkVMRTFCUVUwc1EwRkJReXhOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETzFGQlEzUkNMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWtzU1VGQlNTeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNeFFpeE5RVUZOTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVONlFpeERRVUZETzFGQlEwUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5TTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZEYUVNc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRlJDd3lRa0ZCV1N4SFFVRmFPMUZCUTBrc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTlNMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1VVRkRiRU1zUTBGQlF6dFJRVU5FTEVsQlFVa3NUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRM0JDTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVOd1FpeFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJRenRSUVVWeVF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5zUWl4VFFVRlRPMWxCUTFRc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXp0WlFVVm9SQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eHJRa0ZCYTBJc1MwRkJTeXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRNME1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4UFFVRlBPMWxCUTNSRUxFTkJRVU03V1VGRlJDeGhRVUZoTzFsQlEySXNSVUZCUlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNSQ096dHpRa0ZGVFR0WlFVTk9MRU5CUVVNN1dVRkZSQ3hyUTBGQmEwTTdXVUZEYkVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzFsQlF6VkVMRTFCUVUwc1EwRkJReXh6UWtGQmMwSXNSVUZCUlN4RFFVRkRPMWxCUldoRExGbEJRVmtzUTBGQlF5eEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRPMWxCUTNaQ0xGbEJRVmtzUTBGQlF5eHpRa0ZCYzBJc1JVRkJSU3hEUVVGRE8xbEJSWFJET3p0MVFrRkZWenRaUVVOUUxFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVNeFFpeEhRVUZITzFGQlExQXNRMEZCUXp0UlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRMG9zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVWtzVlVGQlZUdFpRVU4yUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMR1ZCUVdVN1VVRkRPVU1zUTBGQlF6dFJRVU5FTEZsQlFWa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0UlFVTTFReXhaUVVGWkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03VVVGRGFFUXNXVUZCV1N4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMUZCUlRWRExFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRVaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRMmhETEVOQlFVTTdTVUZEVEN4RFFVRkRPMGxCUlVRc01rSkJRVmtzUjBGQldqdFJRVU5KTEhGQ1FVRnhRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTjZReXhEUVVGRE8wbEJSVVFzZVVKQlFWVXNSMEZCVml4VlFVRlhMRU5CUVVNN1VVRkRVaXhGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTFJc1NVRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0WlFVTjRRaXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1dVRkRka0lzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRaUVVWeVFpeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03V1VGRGNFSXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzFGQlEzcENMRU5CUVVNN1VVRkRSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTTdVVUZGY0VJc1NVRkJTU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRk4wSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1YwRkJWeXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEY0VJc1EwRkJReXhKUVVGSkxGZEJRVmNzUTBGQlF6dFJRVU55UWl4RFFVRkRPMUZCUlVRc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEZsQlFWa3NRMEZCUXl4RFFVRkRPMGxCUXpsQ0xFTkJRVU03U1VGRlJDeDFRa0ZCVVN4SFFVRlNPMUZCUTBrc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTlNMRWxCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTTdXVUZEZUVJc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMWxCUTNKQ0xFdEJRVXNzUlVGQlJTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMUZCUTNKQ0xFTkJRVU03U1VGRFRDeERRVUZETzBsQlJVUXNjMEpCUVU4c1IwRkJVQ3hWUVVGUkxFTkJRVU03VVVGRlRDeEpRVUZKTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVOd1FpeFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrc1JVRkRhRU1zUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUTJ4Q0xFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVTnNRaXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZEZUVJc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTzFGQlEzQkNMREpDUVVFeVFqdFJRVU16UWl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGRGVFSXNWMEZCVnl4RlFVRkZMR0ZCUVdFc1JVRkJSU3hYUVVGWExFTkJRVU03VVVGRk5VTXNNa0pCUVRKQ08xRkJRek5DTEVsQlFVa3NSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZETlVJc1NVRkJTU3hMUVVGTExFZEJRVWNzUlVGQlJTeExRVUZMTEVOQlFVTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVmtzTUVSQlFUQkVPMUZCUXpGSExFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1NVRkJTU3hGUVVGRkxFTkJRVU03VVVGRkwwSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8xRkJSV1FzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1MwRkJTeXhqUVVGakxFTkJRVU1zVjBGQlZ5eEpRVUZKTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUzBGQlN5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMjVKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenRaUVVOb1FpeE5RVUZOTEVOQlFVTTdVVUZEV0N4RFFVRkRPMUZCUlVRc1JVRkJSU3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzUkZMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF6dFJRVU4wUWl4RFFVRkRPMUZCUlVRc09FTkJRVGhETzFGQlF6bERMRVZCUVVVc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVsQlFVa3NUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkROMFVzU1VGQlNTeGhRVUZoTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJRenRaUVVOb1F5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFZEJRVWNzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1lVRkJZU3hIUVVGSExHTkJRV01zUTBGQlF5eEpRVUZKTEVkQlFVY3NVMEZCVXl4RFFVRkRMRU5CUVVNN1dVRkRMMFlzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTlFMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU03V1VGRFlpeEZRVUZGTEVOQlFVTXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU5vUWl4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTlNMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1owSkJRMnBETEVOQlFVTTdaMEpCUTBRc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dG5Ra0ZETlVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkRVaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8yZENRVU12UWl4RFFVRkRPMmRDUVVORUxFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0blFrRkRhRUlzVFVGQlRTeERRVUZETzFsQlExZ3NRMEZCUXp0UlFVTk1MRU5CUVVNN1VVRkZSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTFJc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRSUVVOdVF5eERRVUZETzFGQlJVUXNUVUZCVFN4RFFVRkRMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU4yUWl4TFFVRkxMSEZDUVVGeFFqdG5Ra0ZEZEVJc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4SFFVRkhMRU5CUVVNc1EwRkJRenRuUWtGRE4wSXNUVUZCVFN4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEZGtJc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRek5DTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1owSkJRek5ETEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1owSkJReTlETEV0QlFVc3NRMEZCUXp0WlFVTldMRXRCUVVzc2FVSkJRV2xDTzJkQ1FVTnNRaXhQUVVGUExFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF6dHZRa0ZEYmtNc1RVRkJUU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzI5Q1FVTmtMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRemxDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8zZENRVU12UWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTnVRaXhEUVVGRE8yZENRVU5NTEVOQlFVTTdaMEpCUTBRc01FUkJRV2xITEVWQlFXaEhMRzFDUVVGWExFVkJRVVVzY1VKQlFXRXNSVUZCUlN4dFFrRkJWeXhEUVVFd1JEdG5Ra0ZEYkVjc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1owSkJRMnhETEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETzJkQ1FVTjBReXhMUVVGTExFTkJRVU03V1VGRFZpeExRVUZMTEd0Q1FVRnJRaXhEUVVGRE8xbEJRM2hDTzJkQ1FVTkpMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNSMEZCUnl4RFFVRkRMRU5CUVVNN1owSkJRemRDTEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03WjBKQlEzaENMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVNelFpeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMmRDUVVNelF5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMUZCUTI1RUxFTkJRVU03VVVGSFJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMUlzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU5xUXl4RFFVRkRPMUZCUlVRc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVZHlRaXhqUVVGak8xRkJRMlFzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc01rSkJRVEpDTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRiRVlzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVNdlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJSUzlETEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyNUNMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVDBGQlR5eEhRVUZITEd0Q1FVRnJRaXhMUVVGTExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTTdXVUZEY0VVc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dFpRVU51UkN4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRE8xbEJRM1pFTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1dVRkRia1FzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhKUVVGSkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1VVRkJVVHRSUVVOcVJTeERRVUZETzFGQlJVUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhuUWtGQlowSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU40UXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUjBGQlJ5eHJRa0ZCYTBJc1MwRkJTeXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETzFsQlEyaEZMRWxCUVVrc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMWxCUTI1RkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMWxCUTNSRUxEUkVRVUUwUkR0WlFVTTFSQ3gzUkVGQmQwUTdXVUZEZUVRc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdXVUZEZGtNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjBSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eFpRVUZaTEV0QlFVc3NVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRE4wSXNXVUZCV1N4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhqUVVGakxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjJSU3hEUVVGRE8xbEJRMFFzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhIUVVGSExGbEJRVmtzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxPMUZCUTNKRUxFTkJRVU03VVVGRlJDd3dRa0ZCTUVJN1VVRkRNVUlzUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOU0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03VVVGRGFrTXNRMEZCUXp0UlFVTkVMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03VVVGRE5VTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5TTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZETDBJc1EwRkJRenRSUVVWRUxFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRVaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJRMnhETEVOQlFVTTdVVUZEUkN4UlFVRlJMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03VVVGRGFrSXNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTNoRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU5zUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVVXZRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eHJRa0ZCYTBJc1MwRkJTeXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTXpReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRGJFTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRPMUZCUTNCRUxFTkJRVU03VVVGRlJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMUlzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU5vUXl4RFFVRkRPMUZCUlVRc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZET3p0SlFVTndRaXhEUVVGRE8wbEJSVVE3TzJkR1FVVTBSVHRKUVVVMVJTdzBRa0ZCWVN4SFFVRmlPMUZCUTBrc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVOcVF5eERRVUZETzBsQlJVUXNOa0pCUVdNc1IwRkJaRHRSUVVOSkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGJrSXNUVUZCVFN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGNrTXNTMEZCU3l4alFVRmpMRU5CUVVNc1VVRkJVU3hEUVVGRE8yZENRVU0zUWl4TFFVRkxMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU03WjBKQlF6RkNMRXRCUVVzc1kwRkJZeXhEUVVGRExFbEJRVWs3YjBKQlEzQkNMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4elFrRkJjMElzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRMnhGTEV0QlFVc3NRMEZCUXp0blFrRkRWaXhMUVVGTExHTkJRV01zUTBGQlF5eE5RVUZOTzI5Q1FVTjBRaXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMjlDUVVONFFpeExRVUZMTEVOQlFVTTdaMEpCUTFZc1MwRkJTeXhqUVVGakxFTkJRVU1zU1VGQlNUdHZRa0ZEY0VJc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eGpRVUZqTEVOQlFVTXNZVUZCWVN4RlFVRkZMRVZCUVVVc1kwRkJZeXhEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZETEVOQlFVTTdiMEpCUXpkRkxFdEJRVXNzUTBGQlF6dG5Ra0ZEVml4TFFVRkxMR05CUVdNc1EwRkJReXhYUVVGWExFTkJRVU03WjBKQlEyaERPMjlDUVVOSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTnVRaXhEUVVGRE8xRkJRMHdzUTBGQlF6dFJRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUTBvc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhMUVVGTExHTkJRV01zUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVNMVJDeFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1dVRkRia0lzUTBGQlF6dFJRVU5NTEVOQlFVTTdTVUZEVEN4RFFVRkRPMGxCUlVRN08yZEdRVVUwUlR0SlFVVTFSU3h2UWtGQlN5eEhRVUZNTzFGQlEwa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRGJrSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8wbEJRM1JDTEVOQlFVTTdTVUZGUkN4eFFrRkJUU3hIUVVGT08xRkJRMGtzU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUTNCQ0xFbEJRVWtzUTBGQlF5eGhRVUZoTEVWQlFVVXNRMEZCUXp0SlFVTjZRaXhEUVVGRE8wbEJSVVE3TzJkR1FVVTBSVHRKUVVVMVJTeDVRa0ZCVlN4SFFVRldPMUZCUTBrc1NVRkJTU3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEyaEhMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEZUVJc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRkRU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRKUVVOMFFpeERRVUZETzBsQlJVUXNlVUpCUVZVc1IwRkJWanRSUVVOSkxFVkJRVVVzUTBGQlF5eERRVUZETEZsQlFWa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyeERMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdXVUZETTBJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0UlFVTnlRaXhEUVVGRE8wbEJRMHdzUTBGQlF6dEpRVVZFTERCQ1FVRlhMRWRCUVZnN1VVRkRTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFpRVUZaTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5zUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU03VVVGRGRFSXNRMEZCUXp0SlFVVk1MRU5CUVVNN1NVRkZSQ3gzUWtGQlV5eEhRVUZVTzFGQlEwa3NXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU16UWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzBsQlEzSkNMRU5CUVVNN1NVRkZSRHM3WjBaQlJUUkZPMGxCUlRWRkxIVkNRVUZSTEVkQlFWSTdVVUZCUVN4cFFrRmxRenRSUVdSSExFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM0JDTEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03VVVGRGNFTXNRMEZCUXp0UlFVTkVMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzVlVGQlZTeERRVUZETzFsQlF6TkNMRXRCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETzFsQlEzcENMRWxCUVVrc1RVRkJUU3hIUVVGSExFdEJRVWtzUTBGQlF5eE5RVUZOTEVWQlEzQkNMRmxCUVZrc1IwRkJSeXhMUVVGSkxFTkJRVU1zV1VGQldTeEZRVU5vUXl4UlFVRlJMRWRCUVVjc1MwRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dFpRVU0zUWl4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF5eFZRVUZWTEVkQlFVY3NUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJRenRaUVVOMlJDeFpRVUZaTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU03V1VGRGNFTXNUVUZCVFN4RFFVRkRMSE5DUVVGelFpeEZRVUZGTEVOQlFVTTdXVUZEYUVNc1dVRkJXU3hEUVVGRExITkNRVUZ6UWl4RlFVRkZMRU5CUVVNN1dVRkRkRU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hGUVVGRkxFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVTTFSQ3hEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEV2l4RFFVRkRPMGxCUzBRc2MwSkJRVWtzTkVKQlFWVTdVVUZJWkRzN2IwWkJSVFJGTzJGQlF6VkZPMWxCUTBrc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEV0QlFVc3NUVUZCVFN4RFFVRkRPMUZCUTJwRExFTkJRVU03T3p0UFFVRkJPMGxCUlVRc2MwSkJRVWtzTkVKQlFWVTdZVUZCWkR0WlFVTkpMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eExRVUZMTEUxQlFVMHNRMEZCUXp0UlFVTnFReXhEUVVGRE96czdUMEZCUVR0SlFVVk1MRmRCUVVNN1FVRkJSQ3hEUVVGRExFRkJkbkZDUkN4SlFYVnhRa01pZlE9PVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vd3d3L2pzL0dhbWUuanNcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gXCJ0aHJlZS5qc1wiO1xuaW1wb3J0IExldmVsIGZyb20gXCIuL0xldmVsLmpzXCI7XG5pbXBvcnQgZmxhZ3MgZnJvbSBcIi4vZmxhZ3MuanNcIjtcbmltcG9ydCB1dGlsIGZyb20gXCIuL3V0aWwuanNcIjtcbmltcG9ydCBhdWRpb01hbmFnZXIgZnJvbSBcIi4vQXVkaW9NYW5hZ2VyLmpzXCI7XG52YXIgUGxheWVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiBwaHlzaWNzIGZyb20gaHR0cHM6Ly93d3cuYnVyYWtrYW5iZXIuY29tL2Jsb2cvbW9kZWxpbmctcGh5c2ljcy1qYXZhc2NyaXB0LWdyYXZpdHktYW5kLWRyYWcvICovXG4gICAgZnVuY3Rpb24gUGxheWVyKF9hKSB7XG4gICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBfYyA9IF9iLnBvc2l0aW9uLCBwb3NpdGlvbiA9IF9jID09PSB2b2lkIDAgPyAobmV3IFRIUkVFLlZlY3RvcjMoKSkgOiBfYywgX2QgPSBfYi52ZWxvY2l0eSwgdmVsb2NpdHkgPSBfZCA9PT0gdm9pZCAwID8gKG5ldyBUSFJFRS5WZWN0b3IzKCkpIDogX2QsIF9lID0gX2Iucm90YXRpb24sIHJvdGF0aW9uID0gX2UgPT09IHZvaWQgMCA/IChuZXcgVEhSRUUuRXVsZXIoKSkgOiBfZSwgbGV2ZWwgPSBfYi5sZXZlbCwgX2YgPSBfYi5tYXNzLCBtYXNzID0gX2YgPT09IHZvaWQgMCA/IDIwMCA6IF9mLCBfZyA9IF9iLnJhZGl1cywgcmFkaXVzID0gX2cgPT09IHZvaWQgMCA/IDE1IDogX2csIF9oID0gX2IucmVzdGl0dXRpb24sIHJlc3RpdHV0aW9uID0gX2ggPT09IHZvaWQgMCA/IDAuNyA6IF9oLCBfaiA9IF9iLmRlbnNpdHksIGRlbnNpdHkgPSBfaiA9PT0gdm9pZCAwID8gMS4yMiA6IF9qLCBfayA9IF9iLmdyYXZpdHksIGdyYXZpdHkgPSBfayA9PT0gdm9pZCAwID8gOS44MSA6IF9rLCBfbCA9IF9iLnRhcmdldEZvcndhcmRWZWxvY2l0eSwgdGFyZ2V0Rm9yd2FyZFZlbG9jaXR5ID0gX2wgPT09IHZvaWQgMCA/IDI1IDogX2wsIF9tID0gX2IubWF4Rm9yd2FyZFZlbG9jaXR5LCBtYXhGb3J3YXJkVmVsb2NpdHkgPSBfbSA9PT0gdm9pZCAwID8gMTAwIDogX20sIF9vID0gX2IubWluRm9yd2FyZFZlbG9jaXR5LCBtaW5Gb3J3YXJkVmVsb2NpdHkgPSBfbyA9PT0gdm9pZCAwID8gNSA6IF9vLCBfcCA9IF9iLmltbW9ydGFsLCBpbW1vcnRhbCA9IF9wID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wO1xuICAgICAgICB0aGlzLmNkID0gMC40NztcbiAgICAgICAgdGhpcy5kZW5zaXR5ID0gZGVuc2l0eS5jb3B5O1xuICAgICAgICB0aGlzLm1hc3MgPSBtYXNzO1xuICAgICAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcbiAgICAgICAgdGhpcy5yZXN0aXR1dGlvbiA9IHJlc3RpdHV0aW9uO1xuICAgICAgICB0aGlzLmdyYXZpdHkgPSBncmF2aXR5O1xuICAgICAgICB0aGlzLmltbW9ydGFsID0gaW1tb3J0YWw7XG4gICAgICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgdGhpcy50YXJnZXRGb3J3YXJkVmVsb2NpdHkgPSB0YXJnZXRGb3J3YXJkVmVsb2NpdHk7XG4gICAgICAgIHRoaXMubWF4Rm9yd2FyZFZlbG9jaXR5ID0gbWF4Rm9yd2FyZFZlbG9jaXR5O1xuICAgICAgICB0aGlzLm1pbkZvcndhcmRWZWxvY2l0eSA9IG1pbkZvcndhcmRWZWxvY2l0eTtcbiAgICAgICAgdGhpcy5pbml0aWFsUG9zaXRpb24gPSBwb3NpdGlvbi5jbG9uZSgpO1xuICAgICAgICB0aGlzLmluaXRpYWxWZWxvY2l0eSA9IHZlbG9jaXR5LmNsb25lKCk7XG4gICAgICAgIHRoaXMuaW5pdGlhbFJvdGF0aW9uID0gcm90YXRpb24uY2xvbmUoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsVmVjdG9ycyA9IFt0aGlzLmluaXRpYWxQb3NpdGlvbiwgdGhpcy5pbml0aWFsVmVsb2NpdHksIHRoaXMuaW5pdGlhbFJvdGF0aW9uXTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cbiAgICBQbGF5ZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmdyb3VuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVhZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNyb3VjaCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlZnlHcmF2aXR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYm9iID0gMDtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMuaW5pdGlhbFBvc2l0aW9uLmNsb25lKCk7XG4gICAgICAgIHRoaXMubGFzdFBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbi5jbG9uZSgpO1xuICAgICAgICB0aGlzLmNhbVBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbi5jbG9uZSgpO1xuICAgICAgICB0aGlzLnZlbG9jaXR5ID0gdGhpcy5pbml0aWFsVmVsb2NpdHkuY2xvbmUoKTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IHRoaXMuaW5pdGlhbFJvdGF0aW9uLmNsb25lKCk7XG4gICAgICAgIHRoaXMubGFzdFJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbi5jbG9uZSgpO1xuICAgICAgICB0aGlzLmNhbVJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbi5jbG9uZSgpO1xuICAgICAgICB0aGlzLnF1YXRlcm5pb24gPSBuZXcgVEhSRUUuVmVjdG9yNCgpO1xuICAgICAgICB0aGlzLmxhc3RRdWF0ZXJuaW9uID0gdGhpcy5xdWF0ZXJuaW9uLmNsb25lKCk7XG4gICAgICAgIHRoaXMuY2FtUXVhdGVybmlvbiA9IHRoaXMubGFzdFF1YXRlcm5pb24uY2xvbmUoKTtcbiAgICAgICAgdGhpcy5sYXN0VmVjdG9ycyA9IFt0aGlzLmxhc3RQb3NpdGlvbiwgdGhpcy5sYXN0UXVhdGVybmlvbiwgdGhpcy5sYXN0Um90YXRpb25dO1xuICAgICAgICB0aGlzLmludGVycG9sYXRlZFZlY3RvcnMgPSBbdGhpcy5jYW1Qb3NpdGlvbiwgdGhpcy5jYW1RdWF0ZXJuaW9uLCB0aGlzLmNhbVJvdGF0aW9uXTtcbiAgICAgICAgdGhpcy52ZWN0b3JzID0gW3RoaXMucG9zaXRpb24sIHRoaXMucXVhdGVybmlvbiwgdGhpcy5yb3RhdGlvbl07XG4gICAgfTtcbiAgICBQbGF5ZXIucHJvdG90eXBlLmludGVycG9sYXRlID0gZnVuY3Rpb24gKGRlbHRhKSB7XG4gICAgICAgIGlmIChkZWx0YSA9PT0gdm9pZCAwKSB7IGRlbHRhID0gMDsgfVxuICAgICAgICB2YXIgdmVjdG9ycyA9IHRoaXMudmVjdG9ycywgaW50ZXJwb2xhdGVkVmVjdG9ycyA9IHRoaXMuaW50ZXJwb2xhdGVkVmVjdG9ycywgbGFzdFZlY3RvcnMgPSB0aGlzLmxhc3RWZWN0b3JzLCB2ZWN0b3IsIGludGVycG9sYXRlZFZlY3RvciwgbGFzdFZlY3RvciwgbHgsIGx5LCBseiwgbngsIG55LCBueiwgZHgsIGR5LCBkejtcbiAgICAgICAgaWYgKGRlbHRhID4gMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2ZWN0b3IgPSB2ZWN0b3JzW2ldO1xuICAgICAgICAgICAgICAgIGxhc3RWZWN0b3IgPSBsYXN0VmVjdG9yc1tpXTtcbiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWRWZWN0b3IgPSBpbnRlcnBvbGF0ZWRWZWN0b3JzW2ldO1xuICAgICAgICAgICAgICAgIGx4ID0gbGFzdFZlY3Rvci54O1xuICAgICAgICAgICAgICAgIG54ID0gdmVjdG9yLng7XG4gICAgICAgICAgICAgICAgZHggPSBueCAtIGx4O1xuICAgICAgICAgICAgICAgIGx5ID0gbGFzdFZlY3Rvci55O1xuICAgICAgICAgICAgICAgIG55ID0gdmVjdG9yLnk7XG4gICAgICAgICAgICAgICAgZHkgPSBueSAtIGx5O1xuICAgICAgICAgICAgICAgIGx6ID0gbGFzdFZlY3Rvci56O1xuICAgICAgICAgICAgICAgIG56ID0gdmVjdG9yLno7XG4gICAgICAgICAgICAgICAgZHogPSBueiAtIGx6O1xuICAgICAgICAgICAgICAgIGludGVycG9sYXRlZFZlY3Rvci54ID0gbHggKyAoZHggKiBkZWx0YSk7XG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkVmVjdG9yLnkgPSBseSArIChkeSAqIGRlbHRhKTtcbiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWRWZWN0b3IueiA9IGx6ICsgKGR6ICogZGVsdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0ZWRWZWN0b3JzO1xuICAgIH07XG4gICAgUGxheWVyLnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxhc3RQb3NpdGlvbi5jb3B5KHRoaXMucG9zaXRpb24pO1xuICAgICAgICB0aGlzLmxhc3RRdWF0ZXJuaW9uLmNvcHkodGhpcy5xdWF0ZXJuaW9uKTtcbiAgICAgICAgdGhpcy5sYXN0Um90YXRpb24uY29weSh0aGlzLnJvdGF0aW9uKTtcbiAgICAgICAgdGhpcy5hcHBseVBoeXNpY3MoKTtcbiAgICB9O1xuICAgIFBsYXllci5wcm90b3R5cGUuYXBwbHlQaHlzaWNzID0gZnVuY3Rpb24gKGRlbHRhKSB7XG4gICAgICAgIGlmIChkZWx0YSA9PT0gdm9pZCAwKSB7IGRlbHRhID0gMTsgfVxuICAgICAgICB2YXIgY2QgPSB0aGlzLmNkLCByaG8gPSB0aGlzLmRlbnNpdHksIG1hc3MgPSB0aGlzLm1hc3MsIHJhZGl1cyA9IHRoaXMucmFkaXVzLCBwb3NpdGlvbiA9IHRoaXMucG9zaXRpb24sIHZlbG9jaXR5ID0gdGhpcy52ZWxvY2l0eSwgZ3Jhdml0eSA9IHRoaXMuZ3Jhdml0eSwgQSA9IE1hdGguUEkgKiAocmFkaXVzICogcmFkaXVzKSwgaW1tb3J0YWwgPSB0aGlzLmltbW9ydGFsO1xuICAgICAgICB2YXIgbGV2ZWwgPSB0aGlzLmxldmVsLCB0YXJnZXRGb3J3YXJkVmVsb2NpdHkgPSB0aGlzLnRhcmdldEZvcndhcmRWZWxvY2l0eSwgc3RhcnRpbmdIZWlnaHQgPSBwb3NpdGlvbi55LCBzdGFydGluZ1BsdW1tZXQgPSB2ZWxvY2l0eS55O1xuICAgICAgICAvLyBwbGF5ZXIgY2FuIGluY3JlYXNlIGhhbmcgdGltZSBieSBkZWZ5aW5nIGdyYXZpdHlcbiAgICAgICAgaWYgKHRoaXMuZGVmeUdyYXZpdHkpIHtcbiAgICAgICAgICAgIHZlbG9jaXR5LnkgLT0gKGdyYXZpdHkgLyAxLjMzKSAqIGRlbHRhO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNhbGN1bGF0ZSBuZXcgcG9zaXRpb24gYmFzZWQgb24gdmVsb2NpdHkgYW5kIGdyYXZpdHlcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHYgPSB2ZWxvY2l0eS5nZXRDb21wb25lbnQoaSk7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgICAgIHYgPSAtMC41ICogY2QgKiBBICogcmhvICogKHYgKiB2ICogdikgLyBNYXRoLmFicyh2KTtcbiAgICAgICAgICAgIHYgPSBpc05hTih2KSA/IDAgOiB2O1xuICAgICAgICAgICAgLyplc2xpbnQtZGlzYWJsZSBuby1mYWxsdGhyb3VnaCovXG4gICAgICAgICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbi56IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdiA9IChpbW1vcnRhbCA/IDAuMjUgOiBncmF2aXR5KSArICh2IC8gbWFzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgMjogLy8gelxuICAgICAgICAgICAgICAgIGNhc2UgMDogLy8geFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHYgLz0gbWFzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qZXNsaW50LWVuYWJsZSBuby1mYWxsdGhyb3VnaCovXG4gICAgICAgICAgICB2ICo9IGRlbHRhO1xuICAgICAgICAgICAgdmVsb2NpdHkuc2V0Q29tcG9uZW50KGksIHZlbG9jaXR5LmdldENvbXBvbmVudChpKSArIHYpO1xuICAgICAgICAgICAgcG9zaXRpb24uc2V0Q29tcG9uZW50KGksIHBvc2l0aW9uLmdldENvbXBvbmVudChpKSAtICh2ZWxvY2l0eS5nZXRDb21wb25lbnQoaSkgKiBkZWx0YSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ3JvdW5kZWQgPSBmYWxzZTtcbiAgICAgICAgLy8gdXBkYXRlIHRoZSBwbGF5ZXIncyBxdWF0ZXJuaW9uIChoZWFkIGFuZ2xlKVxuICAgICAgICB2YXIgbnF6ID0gTWF0aC5taW4oMTAsIHZlbG9jaXR5LnggLyA0KSAqIChNYXRoLlBJIC8gMTgwKTtcbiAgICAgICAgdmFyIGRxeiA9IHRoaXMucXVhdGVybmlvbi56IC0gbnF6O1xuICAgICAgICBpZiAoZHF6ICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnF1YXRlcm5pb24ueiA9IHV0aWwuY2xhbXAodGhpcy5xdWF0ZXJuaW9uLnogLSAoKChNYXRoLmFicyhkcXopIC8gNCkgKiB1dGlsLnNpZ24oZHF6KSkgKiBkZWx0YSksIC0wLjUsIDAuNSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yb3RhdGlvbi55ID0gdGhpcy5yb3RhdGlvbi55ICsgTWF0aC5QSTtcbiAgICAgICAgdmFyIHFQSSA9IE1hdGguUEkgLyA0O1xuICAgICAgICB2YXIgbnIgPSAodmVsb2NpdHkueCAvIGxldmVsLnN0ZXBTaXplKSAqIHFQSTtcbiAgICAgICAgdmFyIGRyID0gdGhpcy5yb3RhdGlvbi55IC0gbnI7XG4gICAgICAgIGlmIChkciAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5yb3RhdGlvbi55ID0gdXRpbC5jbGFtcCh0aGlzLnJvdGF0aW9uLnkgLSAoKChNYXRoLmFicyhkcikgLyA0KSAqIHV0aWwuc2lnbihkcikpICogZGVsdGEpLCAtcVBJLCBxUEkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucm90YXRpb24ueSA9IHRoaXMucm90YXRpb24ueSAtIE1hdGguUEk7XG4gICAgICAgIC8vIGZpZ3VyZSBvdXQgb3VyIG9ic3RhY2xlc1xuICAgICAgICB2YXIgbmVlZGVkSGVpZ2h0ID0gbGV2ZWwuaGVpZ2h0QXRQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgIHZhciBjZWlsaW5nSGVpZ2h0ID0gbGV2ZWwuY2VpbGluZ0F0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICB0YXJnZXRGb3J3YXJkVmVsb2NpdHkgPSBsZXZlbC50YXJnZXRTcGVlZEF0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICBpZiAobmVlZGVkSGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5lZWRlZEhlaWdodCArPSAyMDA7IC8vIHBsYXllckhlaWdodFxuICAgICAgICB9XG4gICAgICAgIGlmIChjZWlsaW5nSGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNlaWxpbmdIZWlnaHQgKz0gMjAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZWVkZWRIZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGltbW9ydGFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uLnkgPCBuZWVkZWRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ueSAtPSAocG9zaXRpb24ueSAtIG5lZWRlZEhlaWdodCkgLyA0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFydGluZ0hlaWdodCA+PSAobmVlZGVkSGVpZ2h0IC0gMjUpICYmIHN0YXJ0aW5nUGx1bW1ldCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gc3RhcnRlZCBvdXQgL2Fib3ZlLyB0aGUgZmxvb3IsIGFuZCB3YXMgZmFsbGluZ1xuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbi55IDwgbmVlZGVkSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnkgPSBuZWVkZWRIZWlnaHQ7IC8vIGNhbid0IGZhbGwgL3Rocm91Z2gvIHRoZSBmbG9vclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjZWlsaW5nSGVpZ2h0ICYmIChzdGFydGluZ0hlaWdodCA8PSBjZWlsaW5nSGVpZ2h0KSAmJiAoc3RhcnRpbmdQbHVtbWV0IDwgMCkpIHtcbiAgICAgICAgICAgICAgICAvLyBsb3dlciB0aGFuIHRoZSBjZWlsaW5nLCBhbmQgZ29pbmcgdXBcbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24ueSA+IGNlaWxpbmdIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ueSA9IGNlaWxpbmdIZWlnaHQ7IC8vIGNhbid0IGp1bXAgdGhyb3VnaCB0aGUgY2VpbGluZ1xuICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eS55ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9zaXRpb24ueSA8PSBuZWVkZWRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSdyZSBiZWxvdyB0aGUgbmVlZGVkIGhlaWdodCAtLSBjYW4gd2Ugc2FmZWx5IHRyYW5zaXRpb24gdXBcbiAgICAgICAgICAgICAgICAvLyBvciBhcmUgZGVhZD9cbiAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBuZWVkZWRIZWlnaHQgLSBwb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA+IGxldmVsLmJsb2NrU2l6ZSAqIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBjYW4gYm91bmNlLCBkbyBzb1xuICAgICAgICAgICAgICAgIHZlbG9jaXR5LnkgPSAoLShNYXRoLmFicyh2ZWxvY2l0eS55KSAqIHRoaXMucmVzdGl0dXRpb24pKTtcbiAgICAgICAgICAgICAgICAvLyBzbG93bHkgYWRqdXN0IHRvIGRlc2lyZWQgcG9zaXRpb25cbiAgICAgICAgICAgICAgICBwb3NpdGlvbi55ICs9IChkaXN0YW5jZSAvIDMpICogZGVsdGE7XG4gICAgICAgICAgICAgICAgLy8gd2UncmUgb24gdGhlIGdyb3VuZCwgeWF5IVxuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdW5kZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNlaWxpbmdIZWlnaHQgJiYgKHBvc2l0aW9uLnkgPiBjZWlsaW5nSGVpZ2h0KSkge1xuICAgICAgICAgICAgICAgIC8vIGZlbGwgaW50byBhIGNlaWxpbmcgcGllY2VcbiAgICAgICAgICAgICAgICB0aGlzLmRpZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB0b28gbG93IVxuICAgICAgICBpZiAocG9zaXRpb24ueSA8IC0oKGxldmVsLnN0ZXBTaXplICogKExldmVsLkhBTEZfTUFYX1NURVBTICsgMSkpKSkge1xuICAgICAgICAgICAgdGhpcy5kaWUoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzcGVlZCB1cCAvIHNsb3cgZG93blxuICAgICAgICBpZiAodmVsb2NpdHkueiAhPT0gdGFyZ2V0Rm9yd2FyZFZlbG9jaXR5KSB7XG4gICAgICAgICAgICBpZiAodmVsb2NpdHkueiA8IHRhcmdldEZvcndhcmRWZWxvY2l0eSkge1xuICAgICAgICAgICAgICAgIC8qIHRvbyBzbG93OyBzcGVlZCB1cCAqL1xuICAgICAgICAgICAgICAgIHZlbG9jaXR5LnogKz0gZGVsdGE7XG4gICAgICAgICAgICAgICAgaWYgKHZlbG9jaXR5LnogPiB0YXJnZXRGb3J3YXJkVmVsb2NpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHkueiA9IHRhcmdldEZvcndhcmRWZWxvY2l0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvKiB0b28gZmFzdDsgc2xvdyBkb3duICovXG4gICAgICAgICAgICAgICAgdmVsb2NpdHkueiAtPSAyLjUgKiBkZWx0YTtcbiAgICAgICAgICAgICAgICBpZiAodmVsb2NpdHkueiA8IHRhcmdldEZvcndhcmRWZWxvY2l0eSkge1xuICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eS56ID0gdGFyZ2V0Rm9yd2FyZFZlbG9jaXR5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1cygpO1xuICAgICAgICAvLyBjYXAgZm9yd2FyZC9iYWNrd2FyZCB2ZWxvY2l0aWVzXG4gICAgICAgIGlmICh2ZWxvY2l0eS56ID4gdGhpcy5tYXhGb3J3YXJkVmVsb2NpdHkpIHtcbiAgICAgICAgICAgIHZlbG9jaXR5LnogPSB0aGlzLm1heEZvcndhcmRWZWxvY2l0eTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2ZWxvY2l0eS56IDwgdGhpcy5taW5Gb3J3YXJkVmVsb2NpdHkpIHtcbiAgICAgICAgICAgIHZlbG9jaXR5LnogPSB0aGlzLm1pbkZvcndhcmRWZWxvY2l0eTtcbiAgICAgICAgfVxuICAgICAgICAvLyBsZXQgdGhlIGNhbWVyYSBib2IgaWYgd2UncmUgZ3JvdW5kZWRcbiAgICAgICAgaWYgKHRoaXMuZ3JvdW5kZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYm9iICs9IDE2ICogZGVsdGE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBsYXllci5wcm90b3R5cGUudXBkYXRlU3RhdHVzID0gZnVuY3Rpb24gKGRlbHRhKSB7XG4gICAgICAgIGlmIChkZWx0YSA9PT0gdm9pZCAwKSB7IGRlbHRhID0gMTsgfVxuICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uLCB2ZWxvY2l0eSA9IHRoaXMudmVsb2NpdHksIHRhcmdldEZvcndhcmRWZWxvY2l0eSA9IHRoaXMudGFyZ2V0Rm9yd2FyZFZlbG9jaXR5LCBsZXZlbCA9IHRoaXMubGV2ZWw7XG4gICAgICAgIC8vIGlmIHdlJ3JlIG91dC1vZi16LWJvdW5kcywgdGhpcyBpcyBhbGwgdGhlIGZ1cnRoZXIgd2UgY2FuIGdvXG4gICAgICAgIC8vIGNhbid0IGtpbGwgdGhlIHBsYXllciBvciBhbnl0aGluZyBsaWtlIHRoYXRcbiAgICAgICAgaWYgKHBvc2l0aW9uLnogPiAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZsYWcgPSBsZXZlbC5mbGFnQXRQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgIC8vIHByb2Nlc3MgZmxhZ3NcbiAgICAgICAgaWYgKHRoaXMuZ3JvdW5kZWQgJiYgIXRoaXMuaW1tb3J0YWwpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZmxhZy5hY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlIGZsYWdzLkFDVElPTi5KVU1QOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmp1bXAoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBmbGFncy5BQ1RJT04uU1BFRURfVVA6XG4gICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5LnogKz0gMTAgKiBkZWx0YTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBmbGFncy5BQ1RJT04uUkVBTExZX1NMT1c6XG4gICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5LnogLT0gMTAgKiBkZWx0YTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBmbGFncy5BQ1RJT04uU0xPV19ET1dOOlxuICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eS56ID0gTWF0aC5tYXgodGFyZ2V0Rm9yd2FyZFZlbG9jaXR5LCB2ZWxvY2l0eS56IC0gKDEwICogZGVsdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBmbGFncy5BQ1RJT04uRElFOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGZsYWdzLkFDVElPTi5OT05FOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBsYXllci5wcm90b3R5cGUuanVtcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMudmVsb2NpdHkueSA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnZlbG9jaXR5LnkgPSAtMTE1O1xuICAgICAgICAgICAgYXVkaW9NYW5hZ2VyLnBsYXkoXCJqdW1wXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQbGF5ZXIucHJvdG90eXBlLmRpZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZWFkID0gIXRoaXMuaW1tb3J0YWwgJiYgdHJ1ZTtcbiAgICAgICAgdGhpcy5ncm91bmRlZCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5kZWFkKSB7XG4gICAgICAgICAgICBhdWRpb01hbmFnZXIucGxheShcImV4cGxvZGVcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBQbGF5ZXI7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgUGxheWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pVUd4aGVXVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVVHeGhlV1Z5TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRTlCUVU4c1MwRkJTeXhMUVVGTExFMUJRVTBzVlVGQlZTeERRVUZETzBGQlEyeERMRTlCUVU4c1MwRkJTeXhOUVVGTkxGbEJRVmtzUTBGQlF6dEJRVU12UWl4UFFVRlBMRXRCUVVzc1RVRkJUU3haUVVGWkxFTkJRVU03UVVGREwwSXNUMEZCVHl4SlFVRkpMRTFCUVUwc1YwRkJWeXhEUVVGRE8wRkJRemRDTEU5QlFVOHNXVUZCV1N4TlFVRk5MRzFDUVVGdFFpeERRVUZETzBGQlJUZERPMGxCUlVrc2FVZEJRV2xITzBsQlEycEhMR2RDUVVGWkxFVkJZVW83V1VGaVNTdzBRa0ZoU2l4RlFXSk5MR2RDUVVGblF5eEZRVUZvUXl4eFJFRkJaME1zUlVGRGFFTXNaMEpCUVdkRExFVkJRV2hETEhGRVFVRm5ReXhGUVVOb1F5eG5Ra0ZCT0VJc1JVRkJPVUlzYlVSQlFUaENMRVZCUXpsQ0xHZENRVUZMTEVWQlEwd3NXVUZCVlN4RlFVRldMQ3RDUVVGVkxFVkJRMVlzWTBGQlZ5eEZRVUZZTEdkRFFVRlhMRVZCUTFnc2JVSkJRV2xDTEVWQlFXcENMSE5EUVVGcFFpeEZRVU5xUWl4bFFVRmpMRVZCUVdRc2JVTkJRV01zUlVGRFpDeGxRVUZqTEVWQlFXUXNiVU5CUVdNc1JVRkRaQ3cyUWtGQk1FSXNSVUZCTVVJc0swTkJRVEJDTEVWQlF6RkNMREJDUVVGM1FpeEZRVUY0UWl3MlEwRkJkMElzUlVGRGVFSXNNRUpCUVhOQ0xFVkJRWFJDTERKRFFVRnpRaXhGUVVOMFFpeG5Ra0ZCWjBJc1JVRkJhRUlzY1VOQlFXZENPMUZCUlRGQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTJZc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUXpWQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTJwQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRPMUZCUTNKQ0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NWMEZCVnl4RFFVRkRPMUZCUXk5Q0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRPMUZCUlhaQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRPMUZCUlhwQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUlc1Q0xFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1IwRkJSeXh4UWtGQmNVSXNRMEZCUXp0UlFVTnVSQ3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc2EwSkJRV3RDTEVOQlFVTTdVVUZETjBNc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4SFFVRkhMR3RDUVVGclFpeERRVUZETzFGQlJUZERMRWxCUVVrc1EwRkJReXhsUVVGbExFZEJRVWNzVVVGQlVTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMUZCUTNoRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVkQlFVY3NVVUZCVVN4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJRM2hETEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVjc1VVRkJVU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzFGQlJYaERMRWxCUVVrc1EwRkJReXhqUVVGakxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RlFVRkZMRWxCUVVrc1EwRkJReXhsUVVGbExFVkJRVVVzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMUZCUlhwR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0SlFVTnFRaXhEUVVGRE8wbEJSVVFzYzBKQlFVc3NSMEZCVER0UlFVTkpMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzUzBGQlN5eERRVUZETzFGQlEzUkNMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUzBGQlN5eERRVUZETzFGQlEyeENMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETzFGQlEzQkNMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzUzBGQlN5eERRVUZETzFGQlEzcENMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETzFGQlJXSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMUZCUXpkRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dFJRVU14UXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1VVRkZla01zU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzFGQlJUZERMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRSUVVNM1F5eEpRVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdVVUZETVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJSWHBETEVsQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdVVUZEZEVNc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJRemxETEVsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0UlFVVnFSQ3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1JVRkJSU3hKUVVGSkxFTkJRVU1zWTBGQll5eEZRVUZGTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenRSUVVNdlJTeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkZMRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRVVVzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMUZCUTNCR0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRMjVGTEVOQlFVTTdTVUZGUkN3MFFrRkJWeXhIUVVGWUxGVkJRVmtzUzBGQlV6dFJRVUZVTEhOQ1FVRkJMRVZCUVVFc1UwRkJVenRSUVVOcVFpeEpRVUZKTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVOMFFpeHRRa0ZCYlVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRVZCUXpsRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RlFVTTVRaXhOUVVGTkxFVkJRVVVzYTBKQlFXdENMRVZCUVVVc1ZVRkJWU3hGUVVOMFF5eEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUTBGQlF6dFJRVU4yUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTmFMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTTdaMEpCUTNwQ0xFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM0JDTEZWQlFWVXNSMEZCUnl4WFFVRlhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlF6VkNMR3RDUVVGclFpeEhRVUZITEcxQ1FVRnRRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTTFReXhGUVVGRkxFZEJRVWNzVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkJReXhGUVVGRkxFZEJRVWNzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkJReXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXp0blFrRkRMME1zUlVGQlJTeEhRVUZITEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRVU1zUlVGQlJTeEhRVUZITEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRVU1zUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNN1owSkJReTlETEVWQlFVVXNSMEZCUnl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVUZETEVWQlFVVXNSMEZCUnl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRE8yZENRVVV2UXl4clFrRkJhMElzUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMRU5CUVVNc1JVRkJSU3hIUVVGSExFdEJRVXNzUTBGQlF5eERRVUZETzJkQ1FVTjZReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hIUVVGSExFTkJRVU1zUlVGQlJTeEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRPMmRDUVVONlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRE8xbEJSVGRETEVOQlFVTTdVVUZGVEN4RFFVRkRPMUZCUlVRc1RVRkJUU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRPMGxCUXk5Q0xFTkJRVU03U1VGRlJDeHhRa0ZCU1N4SFFVRktPMUZCUTBrc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8xRkJRM1JETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTXhReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03VVVGRmRFTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1JVRkJSU3hEUVVGRE8wbEJRM2hDTEVOQlFVTTdTVUZGUkN3MlFrRkJXU3hIUVVGYUxGVkJRV0VzUzBGQlV6dFJRVUZVTEhOQ1FVRkJMRVZCUVVFc1UwRkJVenRSUVVOc1FpeEpRVUZKTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1JVRkJSU3hGUVVOYUxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVTnNRaXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZEYUVJc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlEzQkNMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVU40UWl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGRGVFSXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRM1JDTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4RlFVTXZRaXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXp0UlFVVTNRaXhKUVVGSkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVTnNRaXh4UWtGQmNVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVWQlEyeEVMR05CUVdNc1IwRkJSeXhSUVVGUkxFTkJRVU1zUTBGQlF5eEZRVU16UWl4bFFVRmxMRWRCUVVjc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVVZxUXl4dFJFRkJiVVE3VVVGRGJrUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYmtJc1VVRkJVU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU03VVVGRE0wTXNRMEZCUXp0UlFVVkVMSFZFUVVGMVJEdFJRVU4yUkN4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRkZCUVZFc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETzFsQlEzWkVMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVkQlFVY3NRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTndSQ3hEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRmNrSXNhVU5CUVdsRE8xbEJRMnBETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlExb3NTMEZCU3l4RFFVRkRPMjlDUVVOR0xFVkJRVVVzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dDNRa0ZEYWtJc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXp0M1FrRkROME1zUzBGQlN5eERRVUZETzI5Q1FVTldMRU5CUVVNN1owSkJRMHdzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpPMmRDUVVOYUxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1R0blFrRkRXanR2UWtGRFNTeERRVUZETEVsQlFVa3NTVUZCU1N4RFFVRkRPMWxCUTJRc1EwRkJRenRaUVVWRUxHZERRVUZuUXp0WlFVVm9ReXhEUVVGRExFbEJRVWtzUzBGQlN5eERRVUZETzFsQlExZ3NVVUZCVVN4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRExFVkJRVVVzVVVGQlVTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU4yUkN4UlFVRlJMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU1zUlVGQlJTeFJRVUZSTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6VkdMRU5CUVVNN1VVRkZSQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEV0QlFVc3NRMEZCUXp0UlFVVjBRaXc0UTBGQk9FTTdVVUZET1VNc1NVRkJTU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFZEJRVWNzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEZWtRc1NVRkJTU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRE8xRkJRMnhETEVWQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlExb3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTndTQ3hEUVVGRE8xRkJSVVFzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJRenRSUVVNMVF5eEpRVUZKTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU4wUWl4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6dFJRVU0zUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRPVUlzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRFdDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzFGQlF6bEhMRU5CUVVNN1VVRkRSQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRPMUZCUlRWRExESkNRVUV5UWp0UlFVTXpRaXhKUVVGSkxGbEJRVmtzUjBGQlJ5eExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdVVUZEY0VRc1NVRkJTU3hoUVVGaExFZEJRVWNzUzBGQlN5eERRVUZETEdsQ1FVRnBRaXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzFGQlEzUkVMSEZDUVVGeFFpeEhRVUZITEV0QlFVc3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0UlFVVTVSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eFpRVUZaTEV0QlFVc3NVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNM1FpeFpRVUZaTEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVZFc1pVRkJaVHRSUVVNdlF5eERRVUZETzFGQlEwUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1lVRkJZU3hMUVVGTExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZET1VJc1lVRkJZU3hKUVVGSkxFZEJRVWNzUTBGQlF6dFJRVU42UWl4RFFVRkRPMUZCUlVRc1JVRkJSU3hEUVVGRExFTkJRVU1zV1VGQldTeExRVUZMTEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkROMElzUlVGQlJTeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRFdDeEZRVUZGTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhIUVVGSExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUXpWQ0xGRkJRVkVzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhIUVVGSExGbEJRVmtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0blFrRkRiRVFzUTBGQlF6dFpRVU5NTEVOQlFVTTdXVUZEUkN4RlFVRkZMRU5CUVVNc1EwRkJReXhqUVVGakxFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NSVUZCUlN4RFFVRkRMRWxCUVVrc1pVRkJaU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTJoRkxHbEVRVUZwUkR0blFrRkRha1FzUlVGQlJTeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1IwRkJSeXhaUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTTFRaXhSUVVGUkxFTkJRVU1zUTBGQlF5eEhRVUZITEZsQlFWa3NRMEZCUXl4RFFVRkRMR2xEUVVGcFF6dG5Ra0ZEYUVVc1EwRkJRenRaUVVOTUxFTkJRVU03V1VGRlJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4aFFVRmhMRWxCUVVrc1EwRkJReXhqUVVGakxFbEJRVWtzWVVGQllTeERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTTVSU3gxUTBGQmRVTTdaMEpCUTNaRExFVkJRVVVzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWRCUVVjc1lVRkJZU3hEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZETjBJc1VVRkJVU3hEUVVGRExFTkJRVU1zUjBGQlJ5eGhRVUZoTEVOQlFVTXNRMEZCUXl4cFEwRkJhVU03YjBKQlF6ZEVMRkZCUVZFc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzJkQ1FVTnVRaXhEUVVGRE8xbEJRMHdzUTBGQlF6dFpRVVZFTEVWQlFVVXNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFbEJRVWtzV1VGQldTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkROMElzSzBSQlFTdEVPMmRDUVVNdlJDeGxRVUZsTzJkQ1FVTm1MRWxCUVVrc1VVRkJVU3hIUVVGSExGbEJRVmtzUjBGQlJ5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVONlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGRExGTkJRVk1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOcVF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN2IwSkJRMWdzVFVGQlRTeERRVUZETzJkQ1FVTllMRU5CUVVNN1owSkJSVVFzTUVKQlFUQkNPMmRDUVVNeFFpeFJRVUZSTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVVeFJDeHZRMEZCYjBNN1owSkJRM0JETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRPMmRDUVVWeVF5dzBRa0ZCTkVJN1owSkJRelZDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRM3BDTEVOQlFVTTdXVUZGUkN4RlFVRkZMRU5CUVVNc1EwRkJReXhoUVVGaExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4SFFVRkhMR0ZCUVdFc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEYUVRc05FSkJRVFJDTzJkQ1FVTTFRaXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdaMEpCUTFnc1RVRkJUU3hEUVVGRE8xbEJRMWdzUTBGQlF6dFJRVU5NTEVOQlFVTTdVVUZGUkN4WFFVRlhPMUZCUTFnc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMR05CUVdNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTJoRkxFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTm1MRU5CUVVNN1VVRkZSQ3gxUWtGQmRVSTdVVUZEZGtJc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNTMEZCU3l4eFFrRkJjVUlzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEZGtNc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNSMEZCUnl4eFFrRkJjVUlzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNKRExIZENRVUYzUWp0blFrRkRlRUlzVVVGQlVTeERRVUZETEVOQlFVTXNTVUZCU1N4TFFVRkxMRU5CUVVNN1owSkJRM0JDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFZEJRVWNzY1VKQlFYRkNMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU55UXl4UlFVRlJMRU5CUVVNc1EwRkJReXhIUVVGSExIRkNRVUZ4UWl4RFFVRkRPMmRDUVVOMlF5eERRVUZETzFsQlEwd3NRMEZCUXp0WlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yZENRVU5LTEhsQ1FVRjVRanRuUWtGRGVrSXNVVUZCVVN4RFFVRkRMRU5CUVVNc1NVRkJTU3hIUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETzJkQ1FVTXhRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4SFFVRkhMSEZDUVVGeFFpeERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkRja01zVVVGQlVTeERRVUZETEVOQlFVTXNSMEZCUnl4eFFrRkJjVUlzUTBGQlF6dG5Ra0ZEZGtNc1EwRkJRenRaUVVOTUxFTkJRVU03VVVGRFRDeERRVUZETzFGQlJVUXNTVUZCU1N4RFFVRkRMRmxCUVZrc1JVRkJSU3hEUVVGRE8xRkJSWEJDTEd0RFFVRnJRenRSUVVOc1F5eEZRVUZGTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGRrTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNN1VVRkRla01zUTBGQlF6dFJRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZET1VNc1VVRkJVU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU03VVVGRGVrTXNRMEZCUXp0UlFVVkVMSFZEUVVGMVF6dFJRVU4yUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTm9RaXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVWQlFVVXNSMEZCUnl4TFFVRkxMRU5CUVVNN1VVRkRNMElzUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZGUkN3MlFrRkJXU3hIUVVGYUxGVkJRV0VzUzBGQlV6dFJRVUZVTEhOQ1FVRkJMRVZCUVVFc1UwRkJVenRSUVVOc1FpeEpRVUZKTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVONFFpeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkRlRUlzY1VKQlFYRkNMRWRCUVVjc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RlFVTnNSQ3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0UlFVVjJRaXc0UkVGQk9FUTdVVUZET1VRc09FTkJRVGhETzFGQlF6bERMRVZCUVVVc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOcVFpeE5RVUZOTEVOQlFVTTdVVUZEV0N4RFFVRkRPMUZCUlVRc1NVRkJTU3hKUVVGSkxFZEJRVWNzUzBGQlN5eERRVUZETEdOQlFXTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRSUVVVeFF5eG5Ra0ZCWjBJN1VVRkRhRUlzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTJ4RExFMUJRVTBzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU4wUWl4TFFVRkxMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNUdHZRa0ZEYkVJc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzI5Q1FVTmFMRXRCUVVzc1EwRkJRenRuUWtGRFZpeExRVUZMTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVVHR2UWtGRGRFSXNVVUZCVVN4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFZEJRVWNzUzBGQlN5eERRVUZETzI5Q1FVTjZRaXhMUVVGTExFTkJRVU03WjBKQlExWXNTMEZCU3l4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExGZEJRVmM3YjBKQlEzcENMRkZCUVZFc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeEhRVUZITEV0QlFVc3NRMEZCUXp0dlFrRkRla0lzUzBGQlN5eERRVUZETzJkQ1FVTldMRXRCUVVzc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTzI5Q1FVTjJRaXhSUVVGUkxFTkJRVU1zUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc2NVSkJRWEZDTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVONFJTeExRVUZMTEVOQlFVTTdaMEpCUTFZc1MwRkJTeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVYzdiMEpCUTJwQ0xFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0dlFrRkRXQ3hMUVVGTExFTkJRVU03WjBKQlExWXNTMEZCU3l4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF6dG5Ra0ZEZGtJc1VVRkJVVHRaUVVOU0xFTkJRVU03VVVGRFRDeERRVUZETzBsQlJVd3NRMEZCUXp0SlFVVkVMSEZDUVVGSkxFZEJRVW83VVVGRFNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNaQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRE8xbEJRM1pDTEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03VVVGRE9VSXNRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkZSQ3h2UWtGQlJ5eEhRVUZJTzFGQlEwa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVsQlFVa3NTVUZCU1N4RFFVRkRPMUZCUTI1RExFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUTNSQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMW9zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVOcVF5eERRVUZETzBsQlEwd3NRMEZCUXp0SlFVVk1MR0ZCUVVNN1FVRkJSQ3hEUVVGRExFRkJNMVJFTEVsQk1sUkRJbjA9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi93d3cvanMvUGxheWVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgbGV2ZWwwMSBmcm9tIFwiLi9sZXZlbHMvbGV2ZWwwMS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgW1xuICAgIGxldmVsMDEsXG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYkdWMlpXeHpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaWJHVjJaV3h6TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRTlCUVU4c1QwRkJUeXhOUVVGTkxIRkNRVUZ4UWl4RFFVRkRPMEZCUlRGRExHVkJRV1U3U1VGRFdDeFBRVUZQTzBOQlExWXNRMEZCUXlKOVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vd3d3L2pzL2xldmVscy5qc1xuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IG11c2ljIGZyb20gXCIuLi9tdXNpYy5qc1wiO1xuaW1wb3J0IHBhdHRlcm5zIGZyb20gXCIuL3BhdHRlcm5zLmpzXCI7XG52YXIgTEVWRUxfREFUQSA9IHBhdHRlcm5zLnV0aWxzLnNlcmllcyhwYXR0ZXJucy5yZWFkeSgyNSksIFtcbiAgICBbXCI4MCA4MH04MCA4MCA4MCA4MCA4MCA4MCA4MCA4MCA4MCA4MCA4MCA4MCA4MCA4MHs4MCBcIiwgMV0sXG4gICAgW1wiODAgODAgODB9ODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgODB7ODAgODAgXCIsIDFdLFxuICAgIFtcIjgwIDgwIDgwIDgwfTgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwezgwIDgwIDgwIFwiLCAxXSxcbiAgICBbXCI4MCA4MCA4MCA4MCA4MH04MCA4MCA4MCA4MCA4MCA4MCA4MCA4MHs4MCA4MCA4MCA4MCBcIiwgMV0sXG4gICAgW1wiODAgODAgODAgODAgODAgODB9ODAgODAgODAgODAgODAgODB7ODAgODAgODAgODAgODAgXCIsIDFdLFxuICAgIFtcIjgwIDgwIDgwIDgwIDgwIDgwIDgwfTgwIDgwIDgwIDgwezgwIDgwIDgwIDgwIDgwIDgwIFwiLCAxXSxcbiAgICBbXCI4MCA4MCA4MCA4MCA4MCA4MCA4MCA4MH04MCA4MHs4MCA4MCA4MCA4MCA4MCA4MCA4MCBcIiwgMV0sXG4gICAgW1wiODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgXCIsIDFdLFxuICAgIFtcIjgwMTgwMjgwMzgwNDgwNTgwNjgwNzgwODgwOTgwODgwNzgwNjgwNTgwNDgwMzgwMjgwMVwiLCAxXSxcbiAgICBbXCI4MDE4MDI4MDM4MDQ4MDU4MDY4MDc4MDg4MDk4MDg4MDc4MDY4MDU4MDQ4MDM4MDI4MDFcIiwgMV0sXG4gICAgW1wiODAgODB9ODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgODAgODB7ODAgXCIsIDFdLFxuICAgIFtcIjgwIDgwIDgwfTgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwezgwIDgwIFwiLCAxXSxcbiAgICBbXCIuLiA4MCE4MCA4MH04MCA4MCA4MCA4MCA4MCA4MCA4MCA4MCA4MCA4MHs4MCA4MCEuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gODAhODAgODB9ODAgODAgODAgODAgODAgODAgODAgODB7ODAgODAhLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIDgwITgwIDgwfTgwIDgwIDgwIDgwIDgwIDgwezgwIDgwIS4uIC4uIDAwIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiA4MCE4MCA4MH04MCA4MCA4MCA4MHs4MCA4MCEuLiAuLiAuLiAwMCBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gODAhODAgODB9ODAgODB7ODAgODAhODAgLi4gLi4gLi4gMDAgXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIEZGWEZGWDgwMjgwMjgwMkZGWEZGWC4uIC4uIC4uIC4uIDAwIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiBGRlhGRlg4MDI4MDI4MDJGRlhGRlguLiAuLiAuLiAuLiAwMCBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gRkZYRkZYODAyODAyODAyRkZYRkZYLi4gLi4gLi4gLi4gMDAgXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIEZGWEZGWDgwMjgwMjgwMkZGWEZGWC4uIC4uIC4uIC4uIDAwIFwiLCA1XSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiAuLiAwMCBcIiwgNF0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAjODAjODAjLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCA0XSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MCM4MCM4MCMuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDRdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDg0Izg0Izg0Iy4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgNF0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODgjODgjODgjLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4OCM4OCM4OCMuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDg4Izg4Izg4Iy4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODgjODgjODgjLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4OCM4OCM4OCMuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDRdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDhDIzhDIzhDIy4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgNF0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDRdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwITgwITgwIS4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDVdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwITgwITgwIS4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDRdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwITgwITgwIS4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDRdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwITgwITgwIS4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgNF0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAhODAhODAhLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwXjgwXjgwXi4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgNF0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODBeODBeODBeLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCA0XSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MF44MF44MF4uLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCA0XSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MD44MD44MD4uLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgNF0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODBeODBeODBeLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCA0XSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MDw4MDw4MDwuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMTJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCA0XSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MD44MD44MD4uLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMTJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwITgwITgwIS4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgNF0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODA8ODA8ODA8Li4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDIwXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDEyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gODAgODB7ODAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDZdLFxuICAgIFtcIi4uIC4uIC4uIDQwIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiA0MCA4MCA4MH04MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gNDAgLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIDQwIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4OCM4OCM4OCMuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIDQwIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiA0MCAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiBcIiwgNF0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gXCIsIDZdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiA1MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gNTAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAgODB7ODAgLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiA2MCAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gNjAgLi4gLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiA3MCAuLiAuLiAuLiAuLiA3RiA3RiA3RiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gNzAgLi4gLi4gLi4gLi4gN0UgN0UgN0UgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIDcwIDcwIDcwIC4uIC4uIC4uIDdEIDdEIDdEIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiA3MCA3MCA3MCAuLiAuLiAuLiA3QyA3QyA3QyAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gN0IgN0IgN0IgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDdBIDdBIDdBIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA3OSA3OSA3OSAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gNzggNzggNzggLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDc4ITc4ITc4IS4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gNzYgNzYgNzYgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDhdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDdCIDdCIDdCIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCA4XSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgN10sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODArODArODArLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDkwWDkwWDkwWC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA5MCA5MCA5MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgNl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gOTArOTArOTArLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIEEwWEEwWEEwWC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiBBMCBBMCBBMCAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgNl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gQTAtQTAtQTAtLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA3MCA3MCA3MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgOF0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODBYODBYODBYLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gOTBYOTBYOTBYLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDkwIDkwIDkwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gQTBYQTBYQTBYLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIEEwIEEwIEEwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gQjBYQjBYQjBYLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIEIwIEIwIEIwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gQzBYQzBYQzBYLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIEMwIEMwIEMwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gRDBYRDBYRDBYLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIEQwIEQwIEQwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gRTBYRTBYRTBYLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIEUwIEUwIEUwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gRjBYRjBYRjBYLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIEYwIEYwIEYwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMV0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gRkZYRkZYRkZYLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIEZGWEZGWEZGWC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiBGRjJGRjJGRjIuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgNF0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gRUY0RUY0RUY0Li4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDhdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIEVGNkVGNkVGNi4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gRkYyRkYyRkYyLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDRdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIEZGIEZGIEZGIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gRkYgRkYgRkYgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiBGMCBGMCBGMCAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIEUwIEUwIEUwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gRDAgRDAgRDAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiBDMF5DMF5DMF4uLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIEIwIEIwIEIwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gQTBeQTAgQTBeLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDFdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIEEwIEEwXkEwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gOTAgOTAgOTAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gODAgODAgODAgLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAyXSxcbiAgICBbXCIuLiAuLiAuLiAuLiAuLiAuLiAuLiA4MCA4MCA4MCAuLiAuLiAuLiAuLiAuLiAuLiAuLiBcIiwgMl0sXG4gICAgW1wiLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gLi4gXCIsIDJdLFxuICAgIFtcIi4uIC4uIC4uIC4uIC4uIC4uIC4uIDgwIDgwIDgwIC4uIC4uIC4uIC4uIC4uIC4uIC4uIFwiLCAxMDBdLFxuXSk7XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbGV2ZWw6IExFVkVMX0RBVEEsXG4gICAgb3B0aW9uczoge1xuICAgICAgICBuYW1lOiBcIkRvZGRsZSBpbiB0aGUgUGFya1wiLFxuICAgICAgICBicG06IG11c2ljLnJvY2NvdzAxLmJwbSxcbiAgICAgICAgLy9jb2xvcnM6IFsweEMwQTA5MCwgMHhBMDkwQzAsIDB4OTBBMEMwLCAweEEwQzA5MCwgMHhDMDkwQTAsIDB4OTBBMEMwXSxcbiAgICAgICAgYmdDb2xvcjogMHgyMDQwODAsXG4gICAgICAgIGNvbG9yczogWzB4RkY4MDQwLCAweDgwNDBGRiwgMHg0MEZGODAsIDB4ODBGRjQwLCAweEZGNDA4MCwgMHg0MDgwRkZdLFxuICAgICAgICAvL2NvbG9yczogWzB4RkZGRkZGLCAweDQwNDA0MCwgMHg4MDQwNDAsIDB4NDA4MDQwXSxcbiAgICAgICAgbXVzaWM6IG11c2ljLnJvY2NvdzAxXG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJHVjJaV3d3TVM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJbXhsZG1Wc01ERXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1QwRkJUeXhMUVVGTExFMUJRVTBzWVVGQllTeERRVUZETzBGQlEyaERMRTlCUVU4c1VVRkJVU3hOUVVGTkxHVkJRV1VzUTBGQlF6dEJRVWR5UXl4SlFVRk5MRlZCUVZVc1IwRkJSeXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTzBsQlEzcEVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCVFRGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNSVUZCUlN4RFFVRkRPMGxCUXpORUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUlVGQlJTeERRVUZETzBsQlF6TkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUlVGQlJTeERRVUZETzBsQlF6TkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1JVRkJSU3hEUVVGRE8wbEJRek5FTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNjVVJCUVhGRUxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNc2NVUkJRWEZFTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1IwRkJSeXhEUVVGRE8wTkJReTlFTEVOQlFVTXNRMEZCUXp0QlFVVklMR1ZCUVdVN1NVRkRXQ3hMUVVGTExFVkJRVVVzVlVGQlZUdEpRVU5xUWl4UFFVRlBMRVZCUVVVN1VVRkRUQ3hKUVVGSkxFVkJRVVVzYjBKQlFXOUNPMUZCUXpGQ0xFZEJRVWNzUlVGQlJTeExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjN1VVRkRka0lzZFVWQlFYVkZPMUZCUTNaRkxFOUJRVThzUlVGQlJTeFJRVUZSTzFGQlEycENMRTFCUVUwc1JVRkJSU3hEUVVGRExGRkJRVkVzUlVGQlJTeFJRVUZSTEVWQlFVVXNVVUZCVVN4RlFVRkZMRkZCUVZFc1JVRkJSU3hSUVVGUkxFVkJRVVVzVVVGQlVTeERRVUZETzFGQlEzQkZMRzFFUVVGdFJEdFJRVU51UkN4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRExGRkJRVkU3UzBGRGVFSTdRMEZEU2l4RFFVRkRJbjA9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi93d3cvanMvbGV2ZWxzL2xldmVsMDEuanNcbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCByZWFkeSBmcm9tIFwiLi9wYXR0ZXJucy9yZWFkeS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQge1xuICAgIHJlYWR5OiByZWFkeSxcbiAgICB1dGlsczoge1xuICAgICAgICBzZXJpZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwYXR0ZXJucyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhdHRlcm5zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwYXR0ZXJuKSB7IHJldHVybiBhY2MuY29uY2F0KHBhdHRlcm4pOyB9LCBbXSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGd1aWRhbmNlOiB7XG4gICAgICAgIHN0YXJ0aW5nOiB7XG4gICAgICAgICAgICByZWFkeTogcmVhZHksXG4gICAgICAgIH0sXG4gICAgICAgIG1pZGRsZToge30sXG4gICAgICAgIGVuZGluZzoge31cbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY0dGMGRHVnlibk11YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SndZWFIwWlhKdWN5NXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4UFFVRlBMRXRCUVVzc1RVRkJUU3h4UWtGQmNVSXNRMEZCUXp0QlFVTjRReXhsUVVGbE8wbEJRMWdzUzBGQlN5eFBRVUZCTzBsQlEwd3NTMEZCU3l4RlFVRkZPMUZCUTBnc1RVRkJUVHRaUVVGRkxHdENRVUZYTzJsQ1FVRllMRlZCUVZjc1JVRkJXQ3h4UWtGQlZ5eEZRVUZZTEVsQlFWYzdaMEpCUVZnc05rSkJRVmM3TzFsQlEyWXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlF5eEhRVUZITEVWQlFVVXNUMEZCVHl4SlFVRkxMRTlCUVVFc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCYmtJc1EwRkJiVUlzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUVR0UlFVTnlSU3hEUVVGRE8wdEJRMG83U1VGRFJDeFJRVUZSTEVWQlFVVTdVVUZEVGl4UlFVRlJMRVZCUVVVN1dVRkRUaXhMUVVGTExFOUJRVUU3VTBGRFVqdFJRVU5FTEUxQlFVMHNSVUZCUlN4RlFVVlFPMUZCUTBRc1RVRkJUU3hGUVVGRkxFVkJSVkE3UzBGRFNqdERRVU5LTEVOQlFVRWlmUT09XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi93d3cvanMvbGV2ZWxzL3BhdHRlcm5zLmpzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgc3BlZWQgPSAoX2EgPT09IHZvaWQgMCA/IHt9IDogX2EpLnNwZWVkO1xuICAgIHJldHVybiBbXG4gICAgICAgIFtcIjgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIFwiLCAxMCwgc3BlZWRdLFxuICAgICAgICBbXCI4MCA4MCA4MCA4MCA4MCA4MCA4MHI4MGU4MGE4MGQ4MHk4MCA4MCA4MCA4MCA4MCA4MCBcIiwgMV0sXG4gICAgICAgIFtcIjgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIDgwIFwiLCA5LCBzcGVlZF0sXG4gICAgXTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljbVZoWkhrdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUp5WldGa2VTNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4bFFVRmxMRlZCUVVNc1JVRkJZenRSUVVGYUxIVkRRVUZMTzBsQlFWa3NUMEZCUVR0UlFVTXZRaXhEUVVGRExIRkVRVUZ4UkN4RlFVRkZMRVZCUVVVc1JVRkJSU3hMUVVGTExFTkJRVU03VVVGRGJFVXNRMEZCUXl4eFJFRkJjVVFzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZETVVRc1EwRkJReXh4UkVGQmNVUXNSVUZCUlN4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRE8wdEJRM0JGTzBGQlNtdERMRU5CU1d4RExFTkJRVU1pZlE9PVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vd3d3L2pzL2xldmVscy9wYXR0ZXJucy9yZWFkeS5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIFwicm9jY293MDFcIjoge1xuICAgICAgICBicG06IDEyOC4wMDUsXG4gICAgICAgIGZpbGU6IFwicm9jY293LXN3ZWV0LXNlbGYtc2F0aXNmYWN0aW9uLm1wM1wiLFxuICAgICAgICBzdGFydFBvaW50czogWzAsIDU5Ljk1LCAxMjAuMV1cbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYlhWemFXTXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKdGRYTnBZeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGxRVUZsTzBsQlExZ3NWVUZCVlN4RlFVRkZPMUZCUTFJc1IwRkJSeXhGUVVGRkxFOUJRVTg3VVVGRFdpeEpRVUZKTEVWQlFVVXNiME5CUVc5RE8xRkJRekZETEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETzB0QlEycERPME5CUTBvc1EwRkJRU0o5XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi93d3cvanMvbXVzaWMuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBkZWF0aFRpdGxlcyA9IFtcbiAgICBcIlJJUFwiLFxuICAgIFwiREVBRFwiLFxuICAgIFwiT09QUyFcIixcbiAgICBcIk9VQ0ghXCIsXG4gICAgXCJTUExBVCFcIixcbiAgICBcIldURj9cIixcbiAgICBcIjotKFwiLFxuXTtcbnZhciBkZWF0aFRleHRzID0gW1xuICAgIFwiT2gsIHRoYXQgaGFkIHRvIGh1cnQhXCIsXG4gICAgXCJXaHknZCB5b3UgZG8gdGhhdD9cIixcbiAgICBcIlRoYXQnbGwgbGVhdmUgYSBtYXJrXCIsXG4gICAgXCJQYW5jYWtlcywgYW55b25lP1wiLFxuICAgIFwiVGhhdCB3YXMgYSBzbWFzaGluZyBleGFtcGxlIG9mIHdoYXQgbm90IHRvIGRvIVwiLFxuICAgIFwiRGFyd2luIGF3YXJkIHJlY2lwaWVudCFcIixcbiAgICBcIlN0b3AgZG9pbmcgdGhhdCFcIixcbiAgICBcIlByZXR0eSBzdXJlIEkgY2FuIGRvIGJldHRlciB0aGFuIHRoYXQuXCIsXG5dO1xuZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKGFycikge1xuICAgIHJldHVybiBhcnJbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyLmxlbmd0aCldO1xufVxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGdldERlYXRoVGl0bGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldFZhcmlhdGlvbihkZWF0aFRpdGxlcyk7XG4gICAgfSxcbiAgICBnZXREZWF0aFRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldFZhcmlhdGlvbihkZWF0aFRleHRzKTtcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHVjRkRlpoY21saGRHbHZibk11YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SjBaWGgwVm1GeWFXRjBhVzl1Y3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSkxGZEJRVmNzUjBGQlJ6dEpRVU5rTEV0QlFVczdTVUZEVEN4TlFVRk5PMGxCUTA0c1QwRkJUenRKUVVOUUxFOUJRVTg3U1VGRFVDeFJRVUZSTzBsQlExSXNUVUZCVFR0SlFVTk9MRXRCUVVzN1EwRkRVaXhEUVVGRE8wRkJSVVlzU1VGQlNTeFZRVUZWTEVkQlFVYzdTVUZEWWl4MVFrRkJkVUk3U1VGRGRrSXNiMEpCUVc5Q08wbEJRM0JDTEhOQ1FVRnpRanRKUVVOMFFpeHRRa0ZCYlVJN1NVRkRia0lzWjBSQlFXZEVPMGxCUTJoRUxIbENRVUY1UWp0SlFVTjZRaXhyUWtGQmEwSTdTVUZEYkVJc2QwTkJRWGRETzBOQlF6TkRMRU5CUVVNN1FVRkZSaXh6UWtGQmMwSXNSMEZCUnp0SlFVTnlRaXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM1pFTEVOQlFVTTdRVUZIUkN4bFFVRmxPMGxCUTFnc1lVRkJZVHRSUVVOVUxFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1NVRkRja01zUTBGQlF6dEpRVU5FTEZsQlFWazdVVUZEVWl4TlFVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBsQlEzQkRMRU5CUVVNN1EwRkRTaXhEUVVGQkluMD1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3d3dy9qcy90ZXh0VmFyaWF0aW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlLmpzXCI7XG5pbXBvcnQgZmxhZ3MgZnJvbSBcIi4vZmxhZ3MuanNcIjtcbnZhciB0ZXh0dXJlcyA9IE9iamVjdC5rZXlzKGZsYWdzLmZsYWdzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZmxhZykge1xuICAgIHZhciBIID0gOCwgVyA9IDg7XG4gICAgdmFyIHQgPSBmbGFncy5nZXRGbGFnKGZsYWcpLnRleHR1cmU7XG4gICAgdmFyIGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihIICogVyAqIDQpO1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShidWYpO1xuICAgIGZvciAodmFyIHIgPSAwOyByIDwgdC5sZW5ndGg7IHIrKykge1xuICAgICAgICB2YXIgbGluZSA9IHRbcl0uc3BsaXQoXCJcIikucmV2ZXJzZSgpO1xuICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGxpbmUubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIHZhciBhcnJJZHggPSAoKChIICogVykgLSAxKSAtIChyICogVyArIGMpKSAqIDQsIHRWYWx1ZSA9IGxpbmVbY10gPT09IFwiWFwiID8gMSA6IDA7XG4gICAgICAgICAgICBhcnJbYXJySWR4ICsgMF0gPSAodFZhbHVlICogMjU1KTtcbiAgICAgICAgICAgIGFyclthcnJJZHggKyAxXSA9ICh0VmFsdWUgKiAyNTUpO1xuICAgICAgICAgICAgYXJyW2FycklkeCArIDJdID0gKHRWYWx1ZSAqIDI1NSk7XG4gICAgICAgICAgICBhcnJbYXJySWR4ICsgM10gPSAyNTU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHRleHR1cmUgPSBuZXcgVEhSRUUuRGF0YVRleHR1cmUoYXJyLCBXLCBILCBUSFJFRS5SR0JBRm9ybWF0KTtcbiAgICB0ZXh0dXJlLndyYXBTID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7XG4gICAgdGV4dHVyZS53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuICAgIHRleHR1cmUucmVwZWF0LnNldCgxLCAxKTtcbiAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICBhY2NbZmxhZ10gPSB0ZXh0dXJlO1xuICAgIHJldHVybiBhY2M7XG59LCB7fSk7XG5leHBvcnQgZGVmYXVsdCB0ZXh0dXJlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHVjRkSFZ5WlhNdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUowWlhoMGRYSmxjeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeFBRVUZQTEV0QlFVc3NTMEZCU3l4TlFVRk5MRlZCUVZVc1EwRkJRenRCUVVWc1F5eFBRVUZQTEV0QlFVc3NUVUZCVFN4WlFVRlpMRU5CUVVNN1FVRkZMMElzU1VGQlNTeFJRVUZSTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVVNc1IwRkJSeXhGUVVGRkxFbEJRVWs3U1VGRGNrUXNTVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEYmtJc1NVRkJTU3hEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU03U1VGRGNFTXNTVUZCU1N4SFFVRkhMRWRCUVVjc1NVRkJTU3hYUVVGWExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOeVF5eEpRVUZKTEVkQlFVY3NSMEZCUnl4SlFVRkpMRlZCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU01UWl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0UlFVTm9ReXhKUVVGSkxFbEJRVWtzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMUZCUTNCRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRE8xbEJRMjVETEVsQlFVa3NUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRekZETEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUjBGQlJ5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1dVRkRja01zUjBGQlJ5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTnFReXhIUVVGSExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETzFsQlEycERMRWRCUVVjc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRGFrTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZETVVJc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRFJDeEpRVUZKTEU5QlFVOHNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBsQlEycEZMRTlCUVU4c1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEdOQlFXTXNRMEZCUXp0SlFVTnlReXhQUVVGUExFTkJRVU1zUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4alFVRmpMRU5CUVVNN1NVRkRja01zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEzcENMRTlCUVU4c1EwRkJReXhYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETzBsQlF6TkNMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTTdTVUZEY0VJc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF6dEJRVU5tTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVWUUxHVkJRV1VzVVVGQlVTeERRVUZESW4wPVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vd3d3L2pzL3RleHR1cmVzLmpzXG4vLyBtb2R1bGUgaWQgPSAyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNVExMb2FkZXIoVEhSRUUpIHtcbiAgICAvKmVzbGludC1kaXNhYmxlKi9cbiAgICAvKipcbiAgICAgKiBMb2FkcyBhIFdhdmVmcm9udCAubXRsIGZpbGUgc3BlY2lmeWluZyBtYXRlcmlhbHNcbiAgICAgKlxuICAgICAqIEBhdXRob3IgYW5nZWx4dWFuY2hhbmdcbiAgICAgKi9cbiAgICBUSFJFRS5NVExMb2FkZXIgPSBmdW5jdGlvbiAobWFuYWdlcikge1xuICAgICAgICB0aGlzLm1hbmFnZXIgPSAobWFuYWdlciAhPT0gdW5kZWZpbmVkKSA/IG1hbmFnZXIgOiBUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXI7XG4gICAgfTtcbiAgICBUSFJFRS5NVExMb2FkZXIucHJvdG90eXBlID0ge1xuICAgICAgICBjb25zdHJ1Y3RvcjogVEhSRUUuTVRMTG9hZGVyLFxuICAgICAgICAvKipcbiAgICAgICAgICogTG9hZHMgYW5kIHBhcnNlcyBhIE1UTCBhc3NldCBmcm9tIGEgVVJMLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIC0gVVJMIHRvIHRoZSBNVEwgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29uTG9hZF0gLSBDYWxsYmFjayBpbnZva2VkIHdpdGggdGhlIGxvYWRlZCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvblByb2dyZXNzXSAtIENhbGxiYWNrIGZvciBkb3dubG9hZCBwcm9ncmVzcy5cbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29uRXJyb3JdIC0gQ2FsbGJhY2sgZm9yIGRvd25sb2FkIGVycm9ycy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHNlZSBzZXRQYXRoIHNldFRleHR1cmVQYXRoXG4gICAgICAgICAqXG4gICAgICAgICAqIEBub3RlIEluIG9yZGVyIGZvciByZWxhdGl2ZSB0ZXh0dXJlIHJlZmVyZW5jZXMgdG8gcmVzb2x2ZSBjb3JyZWN0bHlcbiAgICAgICAgICogeW91IG11c3QgY2FsbCBzZXRQYXRoIGFuZC9vciBzZXRUZXh0dXJlUGF0aCBleHBsaWNpdGx5IHByaW9yIHRvIGxvYWQuXG4gICAgICAgICAqL1xuICAgICAgICBsb2FkOiBmdW5jdGlvbiAodXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IpIHtcbiAgICAgICAgICAgIHZhciBzY29wZSA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgbG9hZGVyID0gbmV3IFRIUkVFLkZpbGVMb2FkZXIodGhpcy5tYW5hZ2VyKTtcbiAgICAgICAgICAgIGxvYWRlci5zZXRQYXRoKHRoaXMucGF0aCk7XG4gICAgICAgICAgICBsb2FkZXIubG9hZCh1cmwsIGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgICAgICAgICAgb25Mb2FkKHNjb3BlLnBhcnNlKHRleHQpKTtcbiAgICAgICAgICAgIH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGJhc2UgcGF0aCBmb3IgcmVzb2x2aW5nIHJlZmVyZW5jZXMuXG4gICAgICAgICAqIElmIHNldCB0aGlzIHBhdGggd2lsbCBiZSBwcmVwZW5kZWQgdG8gZWFjaCBsb2FkZWQgYW5kIGZvdW5kIHJlZmVyZW5jZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHNlZSBzZXRUZXh0dXJlUGF0aFxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiAgICAgbXRsTG9hZGVyLnNldFBhdGgoICdhc3NldHMvb2JqLycgKTtcbiAgICAgICAgICogICAgIG10bExvYWRlci5sb2FkKCAnbXkubXRsJywgLi4uICk7XG4gICAgICAgICAqL1xuICAgICAgICBzZXRQYXRoOiBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCBiYXNlIHBhdGggZm9yIHJlc29sdmluZyB0ZXh0dXJlIHJlZmVyZW5jZXMuXG4gICAgICAgICAqIElmIHNldCB0aGlzIHBhdGggd2lsbCBiZSBwcmVwZW5kZWQgZm91bmQgdGV4dHVyZSByZWZlcmVuY2UuXG4gICAgICAgICAqIElmIG5vdCBzZXQgYW5kIHNldFBhdGggaXMsIGl0IHdpbGwgYmUgdXNlZCBhcyB0ZXh0dXJlIGJhc2UgcGF0aC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHNlZSBzZXRQYXRoXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqICAgICBtdGxMb2FkZXIuc2V0UGF0aCggJ2Fzc2V0cy9vYmovJyApO1xuICAgICAgICAgKiAgICAgbXRsTG9hZGVyLnNldFRleHR1cmVQYXRoKCAnYXNzZXRzL3RleHR1cmVzLycgKTtcbiAgICAgICAgICogICAgIG10bExvYWRlci5sb2FkKCAnbXkubXRsJywgLi4uICk7XG4gICAgICAgICAqL1xuICAgICAgICBzZXRUZXh0dXJlUGF0aDogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZVBhdGggPSBwYXRoO1xuICAgICAgICB9LFxuICAgICAgICBzZXRCYXNlVXJsOiBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdUSFJFRS5NVExMb2FkZXI6IC5zZXRCYXNlVXJsKCkgaXMgZGVwcmVjYXRlZC4gVXNlIC5zZXRUZXh0dXJlUGF0aCggcGF0aCApIGZvciB0ZXh0dXJlIHBhdGggb3IgLnNldFBhdGgoIHBhdGggKSBmb3IgZ2VuZXJhbCBiYXNlIHBhdGggaW5zdGVhZC4nKTtcbiAgICAgICAgICAgIHRoaXMuc2V0VGV4dHVyZVBhdGgocGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldENyb3NzT3JpZ2luOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuY3Jvc3NPcmlnaW4gPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0TWF0ZXJpYWxPcHRpb25zOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxPcHRpb25zID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQYXJzZXMgYSBNVEwgZmlsZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgLSBDb250ZW50IG9mIE1UTCBmaWxlXG4gICAgICAgICAqIEByZXR1cm4ge1RIUkVFLk1UTExvYWRlci5NYXRlcmlhbENyZWF0b3J9XG4gICAgICAgICAqXG4gICAgICAgICAqIEBzZWUgc2V0UGF0aCBzZXRUZXh0dXJlUGF0aFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbm90ZSBJbiBvcmRlciBmb3IgcmVsYXRpdmUgdGV4dHVyZSByZWZlcmVuY2VzIHRvIHJlc29sdmUgY29ycmVjdGx5XG4gICAgICAgICAqIHlvdSBtdXN0IGNhbGwgc2V0UGF0aCBhbmQvb3Igc2V0VGV4dHVyZVBhdGggZXhwbGljaXRseSBwcmlvciB0byBwYXJzZS5cbiAgICAgICAgICovXG4gICAgICAgIHBhcnNlOiBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICAgICAgdmFyIGxpbmVzID0gdGV4dC5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICB2YXIgaW5mbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGRlbGltaXRlcl9wYXR0ZXJuID0gL1xccysvO1xuICAgICAgICAgICAgdmFyIG1hdGVyaWFsc0luZm8gPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBpZiAobGluZS5sZW5ndGggPT09IDAgfHwgbGluZS5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBCbGFuayBsaW5lIG9yIGNvbW1lbnQgaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gbGluZS5pbmRleE9mKCcgJyk7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IChwb3MgPj0gMCkgPyBsaW5lLnN1YnN0cmluZygwLCBwb3MpIDogbGluZTtcbiAgICAgICAgICAgICAgICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSAocG9zID49IDApID8gbGluZS5zdWJzdHJpbmcocG9zICsgMSkgOiAnJztcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnbmV3bXRsJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBOZXcgbWF0ZXJpYWxcbiAgICAgICAgICAgICAgICAgICAgaW5mbyA9IHsgbmFtZTogdmFsdWUgfTtcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxzSW5mb1t2YWx1ZV0gPSBpbmZvO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdrYScgfHwga2V5ID09PSAna2QnIHx8IGtleSA9PT0gJ2tzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNzID0gdmFsdWUuc3BsaXQoZGVsaW1pdGVyX3BhdHRlcm4sIDMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1trZXldID0gW3BhcnNlRmxvYXQoc3NbMF0pLCBwYXJzZUZsb2F0KHNzWzFdKSwgcGFyc2VGbG9hdChzc1syXSldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWxDcmVhdG9yID0gbmV3IFRIUkVFLk1UTExvYWRlci5NYXRlcmlhbENyZWF0b3IodGhpcy50ZXh0dXJlUGF0aCB8fCB0aGlzLnBhdGgsIHRoaXMubWF0ZXJpYWxPcHRpb25zKTtcbiAgICAgICAgICAgIG1hdGVyaWFsQ3JlYXRvci5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTtcbiAgICAgICAgICAgIG1hdGVyaWFsQ3JlYXRvci5zZXRNYW5hZ2VyKHRoaXMubWFuYWdlcik7XG4gICAgICAgICAgICBtYXRlcmlhbENyZWF0b3Iuc2V0TWF0ZXJpYWxzKG1hdGVyaWFsc0luZm8pO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsQ3JlYXRvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFRIUkVFLU1UTExvYWRlci5NYXRlcmlhbENyZWF0b3JcbiAgICAgKiBAcGFyYW0gYmFzZVVybCAtIFVybCByZWxhdGl2ZSB0byB3aGljaCB0ZXh0dXJlcyBhcmUgbG9hZGVkXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBTZXQgb2Ygb3B0aW9ucyBvbiBob3cgdG8gY29uc3RydWN0IHRoZSBtYXRlcmlhbHNcbiAgICAgKiAgICAgICAgICAgICAgICAgIHNpZGU6IFdoaWNoIHNpZGUgdG8gYXBwbHkgdGhlIG1hdGVyaWFsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICBUSFJFRS5Gcm9udFNpZGUgKGRlZmF1bHQpLCBUSFJFRS5CYWNrU2lkZSwgVEhSRUUuRG91YmxlU2lkZVxuICAgICAqICAgICAgICAgICAgICAgICAgd3JhcDogV2hhdCB0eXBlIG9mIHdyYXBwaW5nIHRvIGFwcGx5IGZvciB0ZXh0dXJlc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgVEhSRUUuUmVwZWF0V3JhcHBpbmcgKGRlZmF1bHQpLCBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLCBUSFJFRS5NaXJyb3JlZFJlcGVhdFdyYXBwaW5nXG4gICAgICogICAgICAgICAgICAgICAgICBub3JtYWxpemVSR0I6IFJHQnMgbmVlZCB0byBiZSBub3JtYWxpemVkIHRvIDAtMSBmcm9tIDAtMjU1XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQ6IGZhbHNlLCBhc3N1bWVkIHRvIGJlIGFscmVhZHkgbm9ybWFsaXplZFxuICAgICAqICAgICAgICAgICAgICAgICAgaWdub3JlWmVyb1JHQnM6IElnbm9yZSB2YWx1ZXMgb2YgUkdCcyAoS2EsS2QsS3MpIHRoYXQgYXJlIGFsbCAwJ3NcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0OiBmYWxzZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIFRIUkVFLk1UTExvYWRlci5NYXRlcmlhbENyZWF0b3IgPSBmdW5jdGlvbiAoYmFzZVVybCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsIHx8ICcnO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm1hdGVyaWFsc0luZm8gPSB7fTtcbiAgICAgICAgdGhpcy5tYXRlcmlhbHMgPSB7fTtcbiAgICAgICAgdGhpcy5tYXRlcmlhbHNBcnJheSA9IFtdO1xuICAgICAgICB0aGlzLm5hbWVMb29rdXAgPSB7fTtcbiAgICAgICAgdGhpcy5zaWRlID0gKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMuc2lkZSkgPyB0aGlzLm9wdGlvbnMuc2lkZSA6IFRIUkVFLkZyb250U2lkZTtcbiAgICAgICAgdGhpcy53cmFwID0gKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMud3JhcCkgPyB0aGlzLm9wdGlvbnMud3JhcCA6IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuICAgIH07XG4gICAgVEhSRUUuTVRMTG9hZGVyLk1hdGVyaWFsQ3JlYXRvci5wcm90b3R5cGUgPSB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiBUSFJFRS5NVExMb2FkZXIuTWF0ZXJpYWxDcmVhdG9yLFxuICAgICAgICBzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNyb3NzT3JpZ2luID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldE1hbmFnZXI6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldE1hdGVyaWFsczogZnVuY3Rpb24gKG1hdGVyaWFsc0luZm8pIHtcbiAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzSW5mbyA9IHRoaXMuY29udmVydChtYXRlcmlhbHNJbmZvKTtcbiAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzID0ge307XG4gICAgICAgICAgICB0aGlzLm1hdGVyaWFsc0FycmF5ID0gW107XG4gICAgICAgICAgICB0aGlzLm5hbWVMb29rdXAgPSB7fTtcbiAgICAgICAgfSxcbiAgICAgICAgY29udmVydDogZnVuY3Rpb24gKG1hdGVyaWFsc0luZm8pIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zKVxuICAgICAgICAgICAgICAgIHJldHVybiBtYXRlcmlhbHNJbmZvO1xuICAgICAgICAgICAgdmFyIGNvbnZlcnRlZCA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgbW4gaW4gbWF0ZXJpYWxzSW5mbykge1xuICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgbWF0ZXJpYWxzIGluZm8gaW50byBub3JtYWxpemVkIGZvcm0gYmFzZWQgb24gb3B0aW9uc1xuICAgICAgICAgICAgICAgIHZhciBtYXQgPSBtYXRlcmlhbHNJbmZvW21uXTtcbiAgICAgICAgICAgICAgICB2YXIgY292bWF0ID0ge307XG4gICAgICAgICAgICAgICAgY29udmVydGVkW21uXSA9IGNvdm1hdDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIG1hdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2F2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG1hdFtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxwcm9wID0gcHJvcC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGxwcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdrZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdrYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdrcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlmZnVzZSBjb2xvciAoY29sb3IgdW5kZXIgd2hpdGUgbGlnaHQpIHVzaW5nIFJHQiB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5ub3JtYWxpemVSR0IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBbdmFsdWVbMF0gLyAyNTUsIHZhbHVlWzFdIC8gMjU1LCB2YWx1ZVsyXSAvIDI1NV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmlnbm9yZVplcm9SR0JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVswXSA9PT0gMCAmJiB2YWx1ZVsxXSA9PT0gMCAmJiB2YWx1ZVsyXSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzYXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3ZtYXRbbHByb3BdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29udmVydGVkO1xuICAgICAgICB9LFxuICAgICAgICBwcmVsb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBtbiBpbiB0aGlzLm1hdGVyaWFsc0luZm8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZShtbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdldEluZGV4OiBmdW5jdGlvbiAobWF0ZXJpYWxOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lTG9va3VwW21hdGVyaWFsTmFtZV07XG4gICAgICAgIH0sXG4gICAgICAgIGdldEFzQXJyYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBtbiBpbiB0aGlzLm1hdGVyaWFsc0luZm8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGVyaWFsc0FycmF5W2luZGV4XSA9IHRoaXMuY3JlYXRlKG1uKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWVMb29rdXBbbW5dID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsc0FycmF5O1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uIChtYXRlcmlhbE5hbWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1hdGVyaWFsc1ttYXRlcmlhbE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU1hdGVyaWFsXyhtYXRlcmlhbE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWxzW21hdGVyaWFsTmFtZV07XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZU1hdGVyaWFsXzogZnVuY3Rpb24gKG1hdGVyaWFsTmFtZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIG1hdGVyaWFsXG4gICAgICAgICAgICB2YXIgc2NvcGUgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIG1hdCA9IHRoaXMubWF0ZXJpYWxzSW5mb1ttYXRlcmlhbE5hbWVdO1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBtYXRlcmlhbE5hbWUsXG4gICAgICAgICAgICAgICAgc2lkZTogdGhpcy5zaWRlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTChiYXNlVXJsLCB1cmwpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycgfHwgdXJsID09PSAnJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgICAgIC8vIEFic29sdXRlIFVSTFxuICAgICAgICAgICAgICAgIGlmICgvXmh0dHBzPzpcXC9cXC8vaS50ZXN0KHVybCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1cmw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2VVcmwgKyB1cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRNYXBGb3JUeXBlKG1hcFR5cGUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtc1ttYXBUeXBlXSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBLZWVwIHRoZSBmaXJzdCBlbmNvdW50ZXJlZCB0ZXh0dXJlXG4gICAgICAgICAgICAgICAgdmFyIHRleFBhcmFtcyA9IHNjb3BlLmdldFRleHR1cmVQYXJhbXModmFsdWUsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgdmFyIG1hcCA9IHNjb3BlLmxvYWRUZXh0dXJlKHJlc29sdmVVUkwoc2NvcGUuYmFzZVVybCwgdGV4UGFyYW1zLnVybCkpO1xuICAgICAgICAgICAgICAgIG1hcC5yZXBlYXQuY29weSh0ZXhQYXJhbXMuc2NhbGUpO1xuICAgICAgICAgICAgICAgIG1hcC5vZmZzZXQuY29weSh0ZXhQYXJhbXMub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBtYXAud3JhcFMgPSBzY29wZS53cmFwO1xuICAgICAgICAgICAgICAgIG1hcC53cmFwVCA9IHNjb3BlLndyYXA7XG4gICAgICAgICAgICAgICAgcGFyYW1zW21hcFR5cGVdID0gbWFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBtYXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBtYXRbcHJvcF07XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnJylcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChwcm9wLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTnMgaXMgbWF0ZXJpYWwgc3BlY3VsYXIgZXhwb25lbnRcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAna2QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlmZnVzZSBjb2xvciAoY29sb3IgdW5kZXIgd2hpdGUgbGlnaHQpIHVzaW5nIFJHQiB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5jb2xvciA9IG5ldyBUSFJFRS5Db2xvcigpLmZyb21BcnJheSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAna3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3BlY3VsYXIgY29sb3IgKGNvbG9yIHdoZW4gbGlnaHQgaXMgcmVmbGVjdGVkIGZyb20gc2hpbnkgc3VyZmFjZSkgdXNpbmcgUkdCIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnNwZWN1bGFyID0gbmV3IFRIUkVFLkNvbG9yKCkuZnJvbUFycmF5KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtYXBfa2QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlmZnVzZSB0ZXh0dXJlIG1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TWFwRm9yVHlwZShcIm1hcFwiLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWFwX2tzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNwZWN1bGFyIG1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TWFwRm9yVHlwZShcInNwZWN1bGFyTWFwXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtYXBfYnVtcCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2J1bXAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQnVtcCB0ZXh0dXJlIG1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TWFwRm9yVHlwZShcImJ1bXBNYXBcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ25zJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzcGVjdWxhciBleHBvbmVudCAoZGVmaW5lcyB0aGUgZm9jdXMgb2YgdGhlIHNwZWN1bGFyIGhpZ2hsaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEEgaGlnaCBleHBvbmVudCByZXN1bHRzIGluIGEgdGlnaHQsIGNvbmNlbnRyYXRlZCBoaWdobGlnaHQuIE5zIHZhbHVlcyBub3JtYWxseSByYW5nZSBmcm9tIDAgdG8gMTAwMC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5zaGluaW5lc3MgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMub3BhY2l0eSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVHInOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5vcGFjaXR5ID0gMSAtIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzW21hdGVyaWFsTmFtZV0gPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwocGFyYW1zKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsc1ttYXRlcmlhbE5hbWVdO1xuICAgICAgICB9LFxuICAgICAgICBnZXRUZXh0dXJlUGFyYW1zOiBmdW5jdGlvbiAodmFsdWUsIG1hdFBhcmFtcykge1xuICAgICAgICAgICAgdmFyIHRleFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBzY2FsZTogbmV3IFRIUkVFLlZlY3RvcjIoMSwgMSksXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBuZXcgVEhSRUUuVmVjdG9yMigwLCAwKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHZhbHVlLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgICAgICB2YXIgcG9zO1xuICAgICAgICAgICAgcG9zID0gaXRlbXMuaW5kZXhPZignLWJtJyk7XG4gICAgICAgICAgICBpZiAocG9zID49IDApIHtcbiAgICAgICAgICAgICAgICBtYXRQYXJhbXMuYnVtcFNjYWxlID0gcGFyc2VGbG9hdChpdGVtc1twb3MgKyAxXSk7XG4gICAgICAgICAgICAgICAgaXRlbXMuc3BsaWNlKHBvcywgMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3MgPSBpdGVtcy5pbmRleE9mKCctcycpO1xuICAgICAgICAgICAgaWYgKHBvcyA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdGV4UGFyYW1zLnNjYWxlLnNldChwYXJzZUZsb2F0KGl0ZW1zW3BvcyArIDFdKSwgcGFyc2VGbG9hdChpdGVtc1twb3MgKyAyXSkpO1xuICAgICAgICAgICAgICAgIGl0ZW1zLnNwbGljZShwb3MsIDQpOyAvLyB3ZSBleHBlY3QgMyBwYXJhbWV0ZXJzIGhlcmUhXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3MgPSBpdGVtcy5pbmRleE9mKCctbycpO1xuICAgICAgICAgICAgaWYgKHBvcyA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdGV4UGFyYW1zLm9mZnNldC5zZXQocGFyc2VGbG9hdChpdGVtc1twb3MgKyAxXSksIHBhcnNlRmxvYXQoaXRlbXNbcG9zICsgMl0pKTtcbiAgICAgICAgICAgICAgICBpdGVtcy5zcGxpY2UocG9zLCA0KTsgLy8gd2UgZXhwZWN0IDMgcGFyYW1ldGVycyBoZXJlIVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGV4UGFyYW1zLnVybCA9IGl0ZW1zLmpvaW4oJyAnKS50cmltKCk7XG4gICAgICAgICAgICByZXR1cm4gdGV4UGFyYW1zO1xuICAgICAgICB9LFxuICAgICAgICBsb2FkVGV4dHVyZTogZnVuY3Rpb24gKHVybCwgbWFwcGluZywgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yKSB7XG4gICAgICAgICAgICB2YXIgdGV4dHVyZTtcbiAgICAgICAgICAgIHZhciBsb2FkZXIgPSBUSFJFRS5Mb2FkZXIuSGFuZGxlcnMuZ2V0KHVybCk7XG4gICAgICAgICAgICB2YXIgbWFuYWdlciA9ICh0aGlzLm1hbmFnZXIgIT09IHVuZGVmaW5lZCkgPyB0aGlzLm1hbmFnZXIgOiBUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXI7XG4gICAgICAgICAgICBpZiAobG9hZGVyID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIobWFuYWdlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobG9hZGVyLnNldENyb3NzT3JpZ2luKVxuICAgICAgICAgICAgICAgIGxvYWRlci5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTtcbiAgICAgICAgICAgIHRleHR1cmUgPSBsb2FkZXIubG9hZCh1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvcik7XG4gICAgICAgICAgICBpZiAobWFwcGluZyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRleHR1cmUubWFwcGluZyA9IG1hcHBpbmc7XG4gICAgICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIHJldHVybiBUSFJFRS5NVExMb2FkZXI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lUVlJNVEc5aFpHVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVRWUk1URzloWkdWeUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEUxQlFVMHNRMEZCUXl4UFFVRlBMRzlDUVVGdlFpeExRVUZMTzBsQlJYWkRMR3RDUVVGclFqdEpRVVZzUWpzN096dFBRVWxITzBsQlJVZ3NTMEZCU3l4RFFVRkRMRk5CUVZNc1IwRkJSeXhWUVVGWExFOUJRVTg3VVVGRmJrTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhEUVVGRkxFOUJRVThzUzBGQlN5eFRRVUZUTEVOQlFVVXNSMEZCUnl4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRPMGxCUld4R0xFTkJRVU1zUTBGQlF6dEpRVVZHTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1UwRkJVeXhIUVVGSE8xRkJSVE5DTEZkQlFWY3NSVUZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVenRSUVVVMVFqczdPenM3T3pzN096czdPMWRCV1VjN1VVRkRTQ3hKUVVGSkxFVkJRVVVzVlVGQlZ5eEhRVUZITEVWQlFVVXNUVUZCVFN4RlFVRkZMRlZCUVZVc1JVRkJSU3hQUVVGUE8xbEJSV2hFTEVsQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJRenRaUVVWcVFpeEpRVUZKTEUxQlFVMHNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhWUVVGVkxFTkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUlN4RFFVRkRPMWxCUTJ4RUxFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJSU3hEUVVGRE8xbEJRelZDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVVc1IwRkJSeXhGUVVGRkxGVkJRVmNzU1VGQlNUdG5Ra0ZGYUVNc1RVRkJUU3hEUVVGRkxFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVVc1EwRkJRenRaUVVVdlFpeERRVUZETEVWQlFVVXNWVUZCVlN4RlFVRkZMRTlCUVU4c1EwRkJSU3hEUVVGRE8xRkJSVEZDTEVOQlFVTTdVVUZGUkRzN096czdPenM3T3p0WFFWVkhPMUZCUTBnc1QwRkJUeXhGUVVGRkxGVkJRVmNzU1VGQlNUdFpRVVYyUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF6dFJRVVZzUWl4RFFVRkRPMUZCUlVRN096czdPenM3T3pzN096dFhRVmxITzFGQlEwZ3NZMEZCWXl4RlFVRkZMRlZCUVZjc1NVRkJTVHRaUVVVNVFpeEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVWNlFpeERRVUZETzFGQlJVUXNWVUZCVlN4RlFVRkZMRlZCUVZjc1NVRkJTVHRaUVVVeFFpeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkZMQ3RKUVVFclNTeERRVUZGTEVOQlFVTTdXVUZGYUVzc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlJTeEpRVUZKTEVOQlFVVXNRMEZCUXp0UlFVVTNRaXhEUVVGRE8xRkJSVVFzWTBGQll5eEZRVUZGTEZWQlFWY3NTMEZCU3p0WlFVVXZRaXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEV0QlFVc3NRMEZCUXp0UlFVVXhRaXhEUVVGRE8xRkJSVVFzYTBKQlFXdENMRVZCUVVVc1ZVRkJWeXhMUVVGTE8xbEJSVzVETEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJSVGxDTEVOQlFVTTdVVUZGUkRzN096czdPenM3T3p0WFFWVkhPMUZCUTBnc1MwRkJTeXhGUVVGRkxGVkJRVmNzU1VGQlNUdFpRVVZ5UWl4SlFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZGTEVsQlFVa3NRMEZCUlN4RFFVRkRPMWxCUXk5Q0xFbEJRVWtzU1VGQlNTeEhRVUZITEVWQlFVVXNRMEZCUXp0WlFVTmtMRWxCUVVrc2FVSkJRV2xDTEVkQlFVY3NTMEZCU3l4RFFVRkRPMWxCUXpsQ0xFbEJRVWtzWVVGQllTeEhRVUZITEVWQlFVVXNRMEZCUXp0WlFVVjJRaXhIUVVGSExFTkJRVU1zUTBGQlJTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkhMRVZCUVVjc1EwRkJRenRuUWtGRk1VTXNTVUZCU1N4SlFVRkpMRWRCUVVjc1MwRkJTeXhEUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZETzJkQ1FVTjBRaXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPMmRDUVVWdVFpeEZRVUZGTEVOQlFVTXNRMEZCUlN4SlFVRkpMRU5CUVVNc1RVRkJUU3hMUVVGTExFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkZMRU5CUVVNc1EwRkJSU3hMUVVGTExFZEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUlhKRUxDdENRVUVyUWp0dlFrRkRMMElzVVVGQlVTeERRVUZETzJkQ1FVVldMRU5CUVVNN1owSkJSVVFzU1VGQlNTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJSU3hIUVVGSExFTkJRVVVzUTBGQlF6dG5Ra0ZGT1VJc1NVRkJTU3hIUVVGSExFZEJRVWNzUTBGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlJTeERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRE8yZENRVU42UkN4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETzJkQ1FVVjRRaXhKUVVGSkxFdEJRVXNzUjBGQlJ5eERRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZGTEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU03WjBKQlF6RkVMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdaMEpCUlhKQ0xFVkJRVVVzUTBGQlF5eERRVUZGTEVkQlFVY3NTMEZCU3l4UlFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVVY0UWl4bFFVRmxPMjlDUVVWbUxFbEJRVWtzUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxMRVZCUVVVc1EwRkJRenR2UWtGRGRrSXNZVUZCWVN4RFFVRkZMRXRCUVVzc1EwRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF6dG5Ra0ZGTDBJc1EwRkJRenRuUWtGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVVc1NVRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZGYmtJc1JVRkJSU3hEUVVGRExFTkJRVVVzUjBGQlJ5eExRVUZMTEVsQlFVa3NTVUZCU1N4SFFVRkhMRXRCUVVzc1NVRkJTU3hKUVVGSkxFZEJRVWNzUzBGQlN5eEpRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPM2RDUVVWd1JDeEpRVUZKTEVWQlFVVXNSMEZCUnl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRkxHbENRVUZwUWl4RlFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRE8zZENRVU0zUXl4SlFVRkpMRU5CUVVVc1IwRkJSeXhEUVVGRkxFZEJRVWNzUTBGQlJTeFZRVUZWTEVOQlFVVXNSVUZCUlN4RFFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRkxFVkJRVVVzVlVGQlZTeERRVUZGTEVWQlFVVXNRMEZCUlN4RFFVRkRMRU5CUVVVc1EwRkJSU3hGUVVGRkxGVkJRVlVzUTBGQlJTeEZRVUZGTEVOQlFVVXNRMEZCUXl4RFFVRkZMRU5CUVVVc1EwRkJSU3hEUVVGRE8yOUNRVVYyUml4RFFVRkRPMjlDUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzNkQ1FVVlFMRWxCUVVrc1EwRkJSU3hIUVVGSExFTkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTTdiMEpCUlhKQ0xFTkJRVU03WjBKQlJVWXNRMEZCUXp0WlFVVkdMRU5CUVVNN1dVRkZSQ3hKUVVGSkxHVkJRV1VzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1pVRkJaU3hEUVVGRkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZGTEVOQlFVTTdXVUZEYWtnc1pVRkJaU3hEUVVGRExHTkJRV01zUTBGQlJTeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkZMRU5CUVVNN1dVRkRia1FzWlVGQlpTeERRVUZETEZWQlFWVXNRMEZCUlN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRkxFTkJRVU03V1VGRE0wTXNaVUZCWlN4RFFVRkRMRmxCUVZrc1EwRkJSU3hoUVVGaExFTkJRVVVzUTBGQlF6dFpRVU01UXl4TlFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRE8xRkJSWGhDTEVOQlFVTTdTMEZGUkN4RFFVRkRPMGxCUlVZN096czdPenM3T3pzN096czdUMEZoUnp0SlFVVklMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zWlVGQlpTeEhRVUZITEZWQlFWY3NUMEZCVHl4RlFVRkZMRTlCUVU4N1VVRkZOVVFzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4UFFVRlBMRWxCUVVrc1JVRkJSU3hEUVVGRE8xRkJRemRDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRE8xRkJRM1pDTEVsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRM2hDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRM0JDTEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRM3BDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJSWEpDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJSU3hKUVVGSkxFTkJRVU1zVDBGQlR5eEpRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRWRCUVVjc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF6dFJRVU40Uml4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFTkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNTVUZCU1N4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hIUVVGSExFdEJRVXNzUTBGQlF5eGpRVUZqTEVOQlFVTTdTVUZGT1VZc1EwRkJReXhEUVVGRE8wbEJSVVlzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4bFFVRmxMRU5CUVVNc1UwRkJVeXhIUVVGSE8xRkJSVE5ETEZkQlFWY3NSVUZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExHVkJRV1U3VVVGRk5VTXNZMEZCWXl4RlFVRkZMRlZCUVZjc1MwRkJTenRaUVVVdlFpeEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVVeFFpeERRVUZETzFGQlJVUXNWVUZCVlN4RlFVRkZMRlZCUVZjc1MwRkJTenRaUVVVelFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVWMFFpeERRVUZETzFGQlJVUXNXVUZCV1N4RlFVRkZMRlZCUVZjc1lVRkJZVHRaUVVWeVF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVVVzWVVGQllTeERRVUZGTEVOQlFVTTdXVUZEYmtRc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdXVUZEY0VJc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eEZRVUZGTEVOQlFVTTdXVUZEZWtJc1NVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZGZEVJc1EwRkJRenRSUVVWRUxFOUJRVThzUlVGQlJTeFZRVUZYTEdGQlFXRTdXVUZGYUVNc1JVRkJSU3hEUVVGRExFTkJRVVVzUTBGQlJTeEpRVUZKTEVOQlFVTXNUMEZCVVN4RFFVRkRPMmRDUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTTdXVUZGTTBNc1NVRkJTU3hUUVVGVExFZEJRVWNzUlVGQlJTeERRVUZETzFsQlJXNUNMRWRCUVVjc1EwRkJReXhEUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEdGQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJSV2hETEN0RVFVRXJSRHRuUWtGRkwwUXNTVUZCU1N4SFFVRkhMRWRCUVVjc1lVRkJZU3hEUVVGRkxFVkJRVVVzUTBGQlJTeERRVUZETzJkQ1FVVTVRaXhKUVVGSkxFMUJRVTBzUjBGQlJ5eEZRVUZGTEVOQlFVTTdaMEpCUldoQ0xGTkJRVk1zUTBGQlJTeEZRVUZGTEVOQlFVVXNSMEZCUnl4TlFVRk5MRU5CUVVNN1owSkJSWHBDTEVkQlFVY3NRMEZCUXl4RFFVRkZMRWxCUVVrc1NVRkJTU3hKUVVGSkxFZEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUlhoQ0xFbEJRVWtzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXp0dlFrRkRhRUlzU1VGQlNTeExRVUZMTEVkQlFVY3NSMEZCUnl4RFFVRkZMRWxCUVVrc1EwRkJSU3hEUVVGRE8yOUNRVU40UWl4SlFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTTdiMEpCUlM5Q0xFMUJRVTBzUTBGQlF5eERRVUZGTEV0QlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJSV3BDTEV0QlFVc3NTVUZCU1N4RFFVRkRPM2RDUVVOV0xFdEJRVXNzU1VGQlNTeERRVUZETzNkQ1FVTldMRXRCUVVzc1NVRkJTVHMwUWtGRlVpd3lSRUZCTWtRN05FSkJSVE5FTEVWQlFVVXNRMEZCUXl4RFFVRkZMRWxCUVVrc1EwRkJReXhQUVVGUExFbEJRVWtzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4WlFVRmhMRU5CUVVNc1EwRkJReXhEUVVGRE8yZERRVVZxUkN4TFFVRkxMRWRCUVVjc1EwRkJSU3hMUVVGTExFTkJRVVVzUTBGQlF5eERRVUZGTEVkQlFVY3NSMEZCUnl4RlFVRkZMRXRCUVVzc1EwRkJSU3hEUVVGRExFTkJRVVVzUjBGQlJ5eEhRVUZITEVWQlFVVXNTMEZCU3l4RFFVRkZMRU5CUVVNc1EwRkJSU3hIUVVGSExFZEJRVWNzUTBGQlJTeERRVUZET3pSQ1FVVnNSU3hEUVVGRE96UkNRVVZFTEVWQlFVVXNRMEZCUXl4RFFVRkZMRWxCUVVrc1EwRkJReXhQUVVGUExFbEJRVWtzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4alFVRmxMRU5CUVVNc1EwRkJReXhEUVVGRE8yZERRVVZ1UkN4RlFVRkZMRU5CUVVNc1EwRkJSU3hMUVVGTExFTkJRVVVzUTBGQlF5eERRVUZGTEV0QlFVc3NRMEZCUXl4SlFVRkpMRXRCUVVzc1EwRkJSU3hEUVVGRExFTkJRVVVzUzBGQlN5eERRVUZETEVsQlFVa3NTMEZCU3l4RFFVRkZMRU5CUVVNc1EwRkJSU3hMUVVGTExFTkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdiME5CUldoRkxGTkJRVk03YjBOQlJWUXNTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJRenRuUTBGRlpDeERRVUZET3pSQ1FVVkdMRU5CUVVNN05FSkJSVVFzUzBGQlN5eERRVUZETzNkQ1FVVlFPelJDUVVWRExFdEJRVXNzUTBGQlF6dHZRa0ZGVWl4RFFVRkRPMjlDUVVWRUxFVkJRVVVzUTBGQlF5eERRVUZGTEVsQlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJSVm9zVFVGQlRTeERRVUZGTEV0QlFVc3NRMEZCUlN4SFFVRkhMRXRCUVVzc1EwRkJRenR2UWtGRmVrSXNRMEZCUXp0blFrRkZSaXhEUVVGRE8xbEJSVVlzUTBGQlF6dFpRVVZFTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNN1VVRkZiRUlzUTBGQlF6dFJRVVZFTEU5QlFVOHNSVUZCUlR0WlFVVlNMRWRCUVVjc1EwRkJReXhEUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVsQlFVa3NRMEZCUXl4aFFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVVZ5UXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRkxFVkJRVVVzUTBGQlJTeERRVUZETzFsQlJXNUNMRU5CUVVNN1VVRkZSaXhEUVVGRE8xRkJSVVFzVVVGQlVTeEZRVUZGTEZWQlFWY3NXVUZCV1R0WlFVVm9ReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUlN4WlFVRlpMRU5CUVVVc1EwRkJRenRSUVVWNFF5eERRVUZETzFGQlJVUXNWVUZCVlN4RlFVRkZPMWxCUlZnc1NVRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETzFsQlJXUXNSMEZCUnl4RFFVRkRMRU5CUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzU1VGQlNTeERRVUZETEdGQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJSWEpETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVVc1MwRkJTeXhEUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUlN4RlFVRkZMRU5CUVVVc1EwRkJRenRuUWtGRGFrUXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJSU3hGUVVGRkxFTkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTTdaMEpCUXpsQ0xFdEJRVXNzUlVGQlJ5eERRVUZETzFsQlJWWXNRMEZCUXp0WlFVVkVMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETzFGQlJUVkNMRU5CUVVNN1VVRkZSQ3hOUVVGTkxFVkJRVVVzVlVGQlZ5eFpRVUZaTzFsQlJUbENMRVZCUVVVc1EwRkJReXhEUVVGRkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVVXNXVUZCV1N4RFFVRkZMRXRCUVVzc1UwRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZGY0VRc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlJTeFpRVUZaTEVOQlFVVXNRMEZCUXp0WlFVVjBReXhEUVVGRE8xbEJSVVFzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVVc1dVRkJXU3hEUVVGRkxFTkJRVU03VVVGRmRrTXNRMEZCUXp0UlFVVkVMR1ZCUVdVc1JVRkJSU3hWUVVGWExGbEJRVms3V1VGRmRrTXNhMEpCUVd0Q08xbEJSV3hDTEVsQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJRenRaUVVOcVFpeEpRVUZKTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRkxGbEJRVmtzUTBGQlJTeERRVUZETzFsQlF6ZERMRWxCUVVrc1RVRkJUU3hIUVVGSE8yZENRVVZhTEVsQlFVa3NSVUZCUlN4WlFVRlpPMmRDUVVOc1FpeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrN1lVRkZaaXhEUVVGRE8xbEJSVVlzYjBKQlFYRkNMRTlCUVU4c1JVRkJSU3hIUVVGSE8yZENRVVZvUXl4RlFVRkZMRU5CUVVNc1EwRkJSU3hQUVVGUExFZEJRVWNzUzBGQlN5eFJRVUZSTEVsQlFVa3NSMEZCUnl4TFFVRkxMRVZCUVVjc1EwRkJRenR2UWtGRE0wTXNUVUZCVFN4RFFVRkRMRVZCUVVVc1EwRkJRenRuUWtGRldDeGxRVUZsTzJkQ1FVTm1MRVZCUVVVc1EwRkJReXhEUVVGRkxHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVVXNSMEZCUnl4RFFVRkhMRU5CUVVNN2IwSkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXp0blFrRkZPVU1zVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4SFFVRkhMRU5CUVVNN1dVRkZkRUlzUTBGQlF6dFpRVVZFTEhWQ1FVRjNRaXhQUVVGUExFVkJRVVVzUzBGQlN6dG5Ra0ZGY2tNc1JVRkJSU3hEUVVGRExFTkJRVVVzVFVGQlRTeERRVUZGTEU5QlFVOHNRMEZCUnl4RFFVRkRPMjlDUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEhGRFFVRnhRenRuUWtGRmRFVXNTVUZCU1N4VFFVRlRMRWRCUVVjc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkZMRXRCUVVzc1JVRkJSU3hOUVVGTkxFTkJRVVVzUTBGQlF6dG5Ra0ZEZUVRc1NVRkJTU3hIUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUlN4VlFVRlZMRU5CUVVVc1MwRkJTeXhEUVVGRExFOUJRVThzUlVGQlJTeFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkZMRU5CUVVVc1EwRkJRenRuUWtGRk1VVXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVVVzVTBGQlV5eERRVUZETEV0QlFVc3NRMEZCUlN4RFFVRkRPMmRDUVVOdVF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJSU3hUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZGTEVOQlFVTTdaMEpCUlhCRExFZEJRVWNzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJRenRuUWtGRGRrSXNSMEZCUnl4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVVjJRaXhOUVVGTkxFTkJRVVVzVDBGQlR5eERRVUZGTEVkQlFVY3NSMEZCUnl4RFFVRkRPMWxCUlhwQ0xFTkJRVU03V1VGRlJDeEhRVUZITEVOQlFVTXNRMEZCUlN4SlFVRkpMRWxCUVVrc1NVRkJTU3hIUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVVjRRaXhKUVVGSkxFdEJRVXNzUjBGQlJ5eEhRVUZITEVOQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVNN1owSkJSWGhDTEVWQlFVVXNRMEZCUXl4RFFVRkZMRXRCUVVzc1MwRkJTeXhGUVVGSExFTkJRVU03YjBKQlFVTXNVVUZCVVN4RFFVRkRPMmRDUVVVM1FpeE5RVUZOTEVOQlFVTXNRMEZCUlN4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVVTVRaXh0UTBGQmJVTTdiMEpCUlc1RExFdEJRVXNzU1VGQlNUdDNRa0ZGVWl3eVJFRkJNa1E3ZDBKQlJUTkVMRTFCUVUwc1EwRkJReXhMUVVGTExFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNc1UwRkJVeXhEUVVGRkxFdEJRVXNzUTBGQlJTeERRVUZETzNkQ1FVVndSQ3hMUVVGTExFTkJRVU03YjBKQlJWQXNTMEZCU3l4SlFVRkpPM2RDUVVWU0xIRkdRVUZ4Ump0M1FrRkRja1lzVFVGQlRTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF5eFRRVUZUTEVOQlFVVXNTMEZCU3l4RFFVRkZMRU5CUVVNN2QwSkJSWFpFTEV0QlFVc3NRMEZCUXp0dlFrRkZVQ3hMUVVGTExGRkJRVkU3ZDBKQlJWb3NjMEpCUVhOQ08zZENRVVYwUWl4aFFVRmhMRU5CUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlJTeERRVUZETzNkQ1FVVTVRaXhMUVVGTExFTkJRVU03YjBKQlJWQXNTMEZCU3l4UlFVRlJPM2RDUVVWYUxHVkJRV1U3ZDBKQlJXWXNZVUZCWVN4RFFVRkZMR0ZCUVdFc1JVRkJSU3hMUVVGTExFTkJRVVVzUTBGQlF6dDNRa0ZGZEVNc1MwRkJTeXhEUVVGRE8yOUNRVVZRTEV0QlFVc3NWVUZCVlN4RFFVRkRPMjlDUVVOb1FpeExRVUZMTEUxQlFVMDdkMEpCUlZZc2JVSkJRVzFDTzNkQ1FVVnVRaXhoUVVGaExFTkJRVVVzVTBGQlV5eEZRVUZGTEV0QlFVc3NRMEZCUlN4RFFVRkRPM2RDUVVWc1F5eExRVUZMTEVOQlFVTTdiMEpCUlZBc1MwRkJTeXhKUVVGSk8zZENRVVZTTEhORlFVRnpSVHQzUWtGRGRFVXNkVWRCUVhWSE8zZENRVVYyUnl4TlFVRk5MRU5CUVVNc1UwRkJVeXhIUVVGSExGVkJRVlVzUTBGQlJTeExRVUZMTEVOQlFVVXNRMEZCUXp0M1FrRkZka01zUzBGQlN5eERRVUZETzI5Q1FVVlFMRXRCUVVzc1IwRkJSenQzUWtGRlVDeEZRVUZGTEVOQlFVTXNRMEZCUlN4TFFVRkxMRWRCUVVjc1EwRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6czBRa0ZGYWtJc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eExRVUZMTEVOQlFVTTdORUpCUTNaQ0xFMUJRVTBzUTBGQlF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRPM2RDUVVVelFpeERRVUZETzNkQ1FVVkVMRXRCUVVzc1EwRkJRenR2UWtGRlVDeExRVUZMTEVsQlFVazdkMEpCUlZJc1JVRkJSU3hEUVVGRExFTkJRVVVzUzBGQlN5eEhRVUZITEVOQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN05FSkJSV3BDTEUxQlFVMHNRMEZCUXl4UFFVRlBMRWRCUVVjc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF6czBRa0ZETTBJc1RVRkJUU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdkMEpCUlROQ0xFTkJRVU03ZDBKQlJVUXNTMEZCU3l4RFFVRkRPMjlDUVVWUU8zZENRVU5ETEV0QlFVc3NRMEZCUXp0blFrRkZVaXhEUVVGRE8xbEJSVVlzUTBGQlF6dFpRVVZFTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVVc1dVRkJXU3hEUVVGRkxFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVVVzVFVGQlRTeERRVUZGTEVOQlFVTTdXVUZEZGtVc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVVXNXVUZCV1N4RFFVRkZMRU5CUVVNN1VVRkZka01zUTBGQlF6dFJRVVZFTEdkQ1FVRm5RaXhGUVVGRkxGVkJRVmNzUzBGQlN5eEZRVUZGTEZOQlFWTTdXVUZGTlVNc1NVRkJTU3hUUVVGVExFZEJRVWM3WjBKQlJXWXNTMEZCU3l4RlFVRkZMRWxCUVVrc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkZPMmRDUVVOb1F5eE5RVUZOTEVWQlFVVXNTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVVTdZVUZGYUVNc1EwRkJRenRaUVVWSUxFbEJRVWtzUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVVc1MwRkJTeXhEUVVGRkxFTkJRVU03V1VGRGFrTXNTVUZCU1N4SFFVRkhMRU5CUVVNN1dVRkZVaXhIUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUlN4TFFVRkxMRU5CUVVVc1EwRkJRenRaUVVVM1FpeEZRVUZGTEVOQlFVTXNRMEZCUlN4SFFVRkhMRWxCUVVrc1EwRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZGYUVJc1UwRkJVeXhEUVVGRExGTkJRVk1zUjBGQlJ5eFZRVUZWTEVOQlFVVXNTMEZCU3l4RFFVRkZMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVVVzUTBGQlJTeERRVUZETzJkQ1FVTnlSQ3hMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVVc1EwRkJRenRaUVVWNFFpeERRVUZETzFsQlJVUXNSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVVVzU1VGQlNTeERRVUZGTEVOQlFVTTdXVUZGTlVJc1JVRkJSU3hEUVVGRExFTkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJSV2hDTEZOQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRkxGVkJRVlVzUTBGQlJTeExRVUZMTEVOQlFVVXNSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJSU3hEUVVGRkxFVkJRVVVzVlVGQlZTeERRVUZGTEV0QlFVc3NRMEZCUlN4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRkxFTkJRVVVzUTBGQlJTeERRVUZETzJkQ1FVTjBSaXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVVc1EwRkJReXhEUVVGRExDdENRVUVyUWp0WlFVVjRSQ3hEUVVGRE8xbEJSVVFzUjBGQlJ5eEhRVUZITEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVVc1NVRkJTU3hEUVVGRkxFTkJRVU03V1VGRk5VSXNSVUZCUlN4RFFVRkRMRU5CUVVVc1IwRkJSeXhKUVVGSkxFTkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUldoQ0xGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkZMRlZCUVZVc1EwRkJSU3hMUVVGTExFTkJRVVVzUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUlN4RFFVRkZMRVZCUVVVc1ZVRkJWU3hEUVVGRkxFdEJRVXNzUTBGQlJTeEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkZMRU5CUVVVc1EwRkJSU3hEUVVGRE8yZENRVU4yUml4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVVXNRMEZCUXl4RFFVRkRMQ3RDUVVFclFqdFpRVVY0UkN4RFFVRkRPMWxCUlVRc1UwRkJVeXhEUVVGRExFZEJRVWNzUjBGQlJ5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkZMRWRCUVVjc1EwRkJSU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzFsQlEzcERMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU03VVVGRmJFSXNRMEZCUXp0UlFVVkVMRmRCUVZjc1JVRkJSU3hWUVVGWExFZEJRVWNzUlVGQlJTeFBRVUZQTEVWQlFVVXNUVUZCVFN4RlFVRkZMRlZCUVZVc1JVRkJSU3hQUVVGUE8xbEJSV2hGTEVsQlFVa3NUMEZCVHl4RFFVRkRPMWxCUTFvc1NVRkJTU3hOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRkxFZEJRVWNzUTBGQlJTeERRVUZETzFsQlF6bERMRWxCUVVrc1QwRkJUeXhIUVVGSExFTkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNTMEZCU3l4VFFVRlRMRU5CUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF6dFpRVVV4Uml4RlFVRkZMRU5CUVVNc1EwRkJSU3hOUVVGTkxFdEJRVXNzU1VGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkZka0lzVFVGQlRTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMR0ZCUVdFc1EwRkJSU3hQUVVGUExFTkJRVVVzUTBGQlF6dFpRVVUzUXl4RFFVRkRPMWxCUlVRc1JVRkJSU3hEUVVGRExFTkJRVVVzVFVGQlRTeERRVUZETEdOQlFXVXNRMEZCUXp0blFrRkJReXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZGTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVVc1EwRkJRenRaUVVOMlJTeFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJSU3hIUVVGSExFVkJRVVVzVFVGQlRTeEZRVUZGTEZWQlFWVXNSVUZCUlN4UFFVRlBMRU5CUVVVc1EwRkJRenRaUVVVeFJDeEZRVUZGTEVOQlFVTXNRMEZCUlN4UFFVRlBMRXRCUVVzc1UwRkJWU3hEUVVGRE8yZENRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRE8xbEJSWFpFTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNN1VVRkZhRUlzUTBGQlF6dExRVVZFTEVOQlFVTTdTVUZGUml4dFFrRkJiVUk3U1VGRlppeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJRenRCUVVNelFpeERRVUZESW4wPVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vd3d3L3ZlbmRvci90aHJlZS9sb2FkZXJzL01UTExvYWRlci5qc1xuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gT0JKTG9hZGVyKFRIUkVFKSB7XG4gICAgLyplc2xpbnQtZGlzYWJsZSovXG4gICAgLyoqXG4gICAgICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAgICAgKi9cbiAgICBUSFJFRS5PQkpMb2FkZXIgPSBmdW5jdGlvbiAobWFuYWdlcikge1xuICAgICAgICB0aGlzLm1hbmFnZXIgPSAobWFuYWdlciAhPT0gdW5kZWZpbmVkKSA/IG1hbmFnZXIgOiBUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXI7XG4gICAgICAgIHRoaXMubWF0ZXJpYWxzID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWdleHAgPSB7XG4gICAgICAgICAgICAvLyB2IGZsb2F0IGZsb2F0IGZsb2F0XG4gICAgICAgICAgICB2ZXJ0ZXhfcGF0dGVybjogL152XFxzKyhbXFxkfFxcLnxcXCt8XFwtfGV8RV0rKVxccysoW1xcZHxcXC58XFwrfFxcLXxlfEVdKylcXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspLyxcbiAgICAgICAgICAgIC8vIHZuIGZsb2F0IGZsb2F0IGZsb2F0XG4gICAgICAgICAgICBub3JtYWxfcGF0dGVybjogL152blxccysoW1xcZHxcXC58XFwrfFxcLXxlfEVdKylcXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspXFxzKyhbXFxkfFxcLnxcXCt8XFwtfGV8RV0rKS8sXG4gICAgICAgICAgICAvLyB2dCBmbG9hdCBmbG9hdFxuICAgICAgICAgICAgdXZfcGF0dGVybjogL152dFxccysoW1xcZHxcXC58XFwrfFxcLXxlfEVdKylcXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspLyxcbiAgICAgICAgICAgIC8vIGYgdmVydGV4IHZlcnRleCB2ZXJ0ZXhcbiAgICAgICAgICAgIGZhY2VfdmVydGV4OiAvXmZcXHMrKC0/XFxkKylcXHMrKC0/XFxkKylcXHMrKC0/XFxkKykoPzpcXHMrKC0/XFxkKykpPy8sXG4gICAgICAgICAgICAvLyBmIHZlcnRleC91diB2ZXJ0ZXgvdXYgdmVydGV4L3V2XG4gICAgICAgICAgICBmYWNlX3ZlcnRleF91djogL15mXFxzKygtP1xcZCspXFwvKC0/XFxkKylcXHMrKC0/XFxkKylcXC8oLT9cXGQrKVxccysoLT9cXGQrKVxcLygtP1xcZCspKD86XFxzKygtP1xcZCspXFwvKC0/XFxkKykpPy8sXG4gICAgICAgICAgICAvLyBmIHZlcnRleC91di9ub3JtYWwgdmVydGV4L3V2L25vcm1hbCB2ZXJ0ZXgvdXYvbm9ybWFsXG4gICAgICAgICAgICBmYWNlX3ZlcnRleF91dl9ub3JtYWw6IC9eZlxccysoLT9cXGQrKVxcLygtP1xcZCspXFwvKC0/XFxkKylcXHMrKC0/XFxkKylcXC8oLT9cXGQrKVxcLygtP1xcZCspXFxzKygtP1xcZCspXFwvKC0/XFxkKylcXC8oLT9cXGQrKSg/OlxccysoLT9cXGQrKVxcLygtP1xcZCspXFwvKC0/XFxkKykpPy8sXG4gICAgICAgICAgICAvLyBmIHZlcnRleC8vbm9ybWFsIHZlcnRleC8vbm9ybWFsIHZlcnRleC8vbm9ybWFsXG4gICAgICAgICAgICBmYWNlX3ZlcnRleF9ub3JtYWw6IC9eZlxccysoLT9cXGQrKVxcL1xcLygtP1xcZCspXFxzKygtP1xcZCspXFwvXFwvKC0/XFxkKylcXHMrKC0/XFxkKylcXC9cXC8oLT9cXGQrKSg/OlxccysoLT9cXGQrKVxcL1xcLygtP1xcZCspKT8vLFxuICAgICAgICAgICAgLy8gbyBvYmplY3RfbmFtZSB8IGcgZ3JvdXBfbmFtZVxuICAgICAgICAgICAgb2JqZWN0X3BhdHRlcm46IC9eW29nXVxccyooLispPy8sXG4gICAgICAgICAgICAvLyBzIGJvb2xlYW5cbiAgICAgICAgICAgIHNtb290aGluZ19wYXR0ZXJuOiAvXnNcXHMrKFxcZCt8b258b2ZmKS8sXG4gICAgICAgICAgICAvLyBtdGxsaWIgZmlsZV9yZWZlcmVuY2VcbiAgICAgICAgICAgIG1hdGVyaWFsX2xpYnJhcnlfcGF0dGVybjogL15tdGxsaWIgLyxcbiAgICAgICAgICAgIC8vIHVzZW10bCBtYXRlcmlhbF9uYW1lXG4gICAgICAgICAgICBtYXRlcmlhbF91c2VfcGF0dGVybjogL151c2VtdGwgL1xuICAgICAgICB9O1xuICAgIH07XG4gICAgVEhSRUUuT0JKTG9hZGVyLnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29uc3RydWN0b3I6IFRIUkVFLk9CSkxvYWRlcixcbiAgICAgICAgbG9hZDogZnVuY3Rpb24gKHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yKSB7XG4gICAgICAgICAgICB2YXIgc2NvcGUgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5GaWxlTG9hZGVyKHNjb3BlLm1hbmFnZXIpO1xuICAgICAgICAgICAgbG9hZGVyLnNldFBhdGgodGhpcy5wYXRoKTtcbiAgICAgICAgICAgIGxvYWRlci5sb2FkKHVybCwgZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgICAgICAgICBvbkxvYWQoc2NvcGUucGFyc2UodGV4dCkpO1xuICAgICAgICAgICAgfSwgb25Qcm9ncmVzcywgb25FcnJvcik7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFBhdGg6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5wYXRoID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldE1hdGVyaWFsczogZnVuY3Rpb24gKG1hdGVyaWFscykge1xuICAgICAgICAgICAgdGhpcy5tYXRlcmlhbHMgPSBtYXRlcmlhbHM7XG4gICAgICAgIH0sXG4gICAgICAgIF9jcmVhdGVQYXJzZXJTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0YXRlID0ge1xuICAgICAgICAgICAgICAgIG9iamVjdHM6IFtdLFxuICAgICAgICAgICAgICAgIG9iamVjdDoge30sXG4gICAgICAgICAgICAgICAgdmVydGljZXM6IFtdLFxuICAgICAgICAgICAgICAgIG5vcm1hbHM6IFtdLFxuICAgICAgICAgICAgICAgIHV2czogW10sXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxMaWJyYXJpZXM6IFtdLFxuICAgICAgICAgICAgICAgIHN0YXJ0T2JqZWN0OiBmdW5jdGlvbiAobmFtZSwgZnJvbURlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBjdXJyZW50IG9iamVjdCAoaW5pdGlhbCBmcm9tIHJlc2V0KSBpcyBub3QgZnJvbSBhIGcvbyBkZWNsYXJhdGlvbiBpbiB0aGUgcGFyc2VkXG4gICAgICAgICAgICAgICAgICAgIC8vIGZpbGUuIFdlIG5lZWQgdG8gdXNlIGl0IGZvciB0aGUgZmlyc3QgcGFyc2VkIGcvbyB0byBrZWVwIHRoaW5ncyBpbiBzeW5jLlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vYmplY3QgJiYgdGhpcy5vYmplY3QuZnJvbURlY2xhcmF0aW9uID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmplY3QubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9iamVjdC5mcm9tRGVjbGFyYXRpb24gPSAoZnJvbURlY2xhcmF0aW9uICE9PSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzTWF0ZXJpYWwgPSAodGhpcy5vYmplY3QgJiYgdHlwZW9mIHRoaXMub2JqZWN0LmN1cnJlbnRNYXRlcmlhbCA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMub2JqZWN0LmN1cnJlbnRNYXRlcmlhbCgpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub2JqZWN0ICYmIHR5cGVvZiB0aGlzLm9iamVjdC5fZmluYWxpemUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0Ll9maW5hbGl6ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9iamVjdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tRGVjbGFyYXRpb246IChmcm9tRGVjbGFyYXRpb24gIT09IGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV2czogW11cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc21vb3RoOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRNYXRlcmlhbDogZnVuY3Rpb24gKG5hbWUsIGxpYnJhcmllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91cyA9IHRoaXMuX2ZpbmFsaXplKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZXcgdXNlbXRsIGRlY2xhcmF0aW9uIG92ZXJ3cml0ZXMgYW4gaW5oZXJpdGVkIG1hdGVyaWFsLCBleGNlcHQgaWYgZmFjZXMgd2VyZSBkZWNsYXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFmdGVyIHRoZSBtYXRlcmlhbCwgdGhlbiBpdCBtdXN0IGJlIHByZXNlcnZlZCBmb3IgcHJvcGVyIE11bHRpTWF0ZXJpYWwgY29udGludWF0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2aW91cyAmJiAocHJldmlvdXMuaW5oZXJpdGVkIHx8IHByZXZpb3VzLmdyb3VwQ291bnQgPD0gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRlcmlhbHMuc3BsaWNlKHByZXZpb3VzLmluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5tYXRlcmlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdGxsaWI6IChBcnJheS5pc0FycmF5KGxpYnJhcmllcykgJiYgbGlicmFyaWVzLmxlbmd0aCA+IDAgPyBsaWJyYXJpZXNbbGlicmFyaWVzLmxlbmd0aCAtIDFdIDogJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbW9vdGg6IChwcmV2aW91cyAhPT0gdW5kZWZpbmVkID8gcHJldmlvdXMuc21vb3RoIDogdGhpcy5zbW9vdGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cFN0YXJ0OiAocHJldmlvdXMgIT09IHVuZGVmaW5lZCA/IHByZXZpb3VzLmdyb3VwRW5kIDogMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwRW5kOiAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBDb3VudDogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbG9uZWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6ICh0eXBlb2YgaW5kZXggPT09ICdudW1iZXInID8gaW5kZXggOiB0aGlzLmluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXRsbGliOiB0aGlzLm10bGxpYixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbW9vdGg6IHRoaXMuc21vb3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwU3RhcnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBFbmQ6IC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQ291bnQ6IC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRlZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWQuY2xvbmUgPSB0aGlzLmNsb25lLmJpbmQoY2xvbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzLnB1c2gobWF0ZXJpYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRlcmlhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TWF0ZXJpYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRlcmlhbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXRlcmlhbHNbdGhpcy5tYXRlcmlhbHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2ZpbmFsaXplOiBmdW5jdGlvbiAoZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RNdWx0aU1hdGVyaWFsID0gdGhpcy5jdXJyZW50TWF0ZXJpYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE11bHRpTWF0ZXJpYWwgJiYgbGFzdE11bHRpTWF0ZXJpYWwuZ3JvdXBFbmQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwRW5kID0gdGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGggLyAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TXVsdGlNYXRlcmlhbC5ncm91cENvdW50ID0gbGFzdE11bHRpTWF0ZXJpYWwuZ3JvdXBFbmQgLSBsYXN0TXVsdGlNYXRlcmlhbC5ncm91cFN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TXVsdGlNYXRlcmlhbC5pbmhlcml0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIG9iamVjdHMgdGFpbCBtYXRlcmlhbHMgaWYgbm8gZmFjZSBkZWNsYXJhdGlvbnMgZm9sbG93ZWQgdGhlbSBiZWZvcmUgYSBuZXcgby9nIHN0YXJ0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZCAmJiB0aGlzLm1hdGVyaWFscy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1pID0gdGhpcy5tYXRlcmlhbHMubGVuZ3RoIC0gMTsgbWkgPj0gMDsgbWktLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0ZXJpYWxzW21pXS5ncm91cENvdW50IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGVyaWFscy5zcGxpY2UobWksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEd1YXJhbnRlZSBhdCBsZWFzdCBvbmUgZW1wdHkgbWF0ZXJpYWwsIHRoaXMgbWFrZXMgdGhlIGNyZWF0aW9uIGxhdGVyIG1vcmUgc3RyYWlnaHQgZm9yd2FyZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5kICYmIHRoaXMubWF0ZXJpYWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGVyaWFscy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21vb3RoOiB0aGlzLnNtb290aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RNdWx0aU1hdGVyaWFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAvLyBJbmhlcml0IHByZXZpb3VzIG9iamVjdHMgbWF0ZXJpYWwuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNwZWMgdGVsbHMgdXMgdGhhdCBhIGRlY2xhcmVkIG1hdGVyaWFsIG11c3QgYmUgc2V0IHRvIGFsbCBvYmplY3RzIHVudGlsIGEgbmV3IG1hdGVyaWFsIGlzIGRlY2xhcmVkLlxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBhIHVzZW10bCBkZWNsYXJhdGlvbiBpcyBlbmNvdW50ZXJlZCB3aGlsZSB0aGlzIG5ldyBvYmplY3QgaXMgYmVpbmcgcGFyc2VkLCBpdCB3aWxsXG4gICAgICAgICAgICAgICAgICAgIC8vIG92ZXJ3cml0ZSB0aGUgaW5oZXJpdGVkIG1hdGVyaWFsLiBFeGNlcHRpb24gYmVpbmcgdGhhdCB0aGVyZSB3YXMgYWxyZWFkeSBmYWNlIGRlY2xhcmF0aW9uc1xuICAgICAgICAgICAgICAgICAgICAvLyB0byB0aGUgaW5oZXJpdGVkIG1hdGVyaWFsLCB0aGVuIGl0IHdpbGwgYmUgcHJlc2VydmVkIGZvciBwcm9wZXIgTXVsdGlNYXRlcmlhbCBjb250aW51YXRpb24uXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2aW91c01hdGVyaWFsICYmIHByZXZpb3VzTWF0ZXJpYWwubmFtZSAmJiB0eXBlb2YgcHJldmlvdXNNYXRlcmlhbC5jbG9uZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVjbGFyZWQgPSBwcmV2aW91c01hdGVyaWFsLmNsb25lKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVjbGFyZWQuaW5oZXJpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0Lm1hdGVyaWFscy5wdXNoKGRlY2xhcmVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9iamVjdHMucHVzaCh0aGlzLm9iamVjdCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vYmplY3QgJiYgdHlwZW9mIHRoaXMub2JqZWN0Ll9maW5hbGl6ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmplY3QuX2ZpbmFsaXplKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYXJzZVZlcnRleEluZGV4OiBmdW5jdGlvbiAodmFsdWUsIGxlbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGluZGV4ID49IDAgPyBpbmRleCAtIDEgOiBpbmRleCArIGxlbiAvIDMpICogMztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhcnNlTm9ybWFsSW5kZXg6IGZ1bmN0aW9uICh2YWx1ZSwgbGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoaW5kZXggPj0gMCA/IGluZGV4IC0gMSA6IGluZGV4ICsgbGVuIC8gMykgKiAzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGFyc2VVVkluZGV4OiBmdW5jdGlvbiAodmFsdWUsIGxlbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGluZGV4ID49IDAgPyBpbmRleCAtIDEgOiBpbmRleCArIGxlbiAvIDIpICogMjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFkZFZlcnRleDogZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IHRoaXMudmVydGljZXM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS52ZXJ0aWNlcztcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAwXSk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKHNyY1thICsgMV0pO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDJdKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAwXSk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKHNyY1tiICsgMV0pO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaChzcmNbYiArIDJdKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAwXSk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKHNyY1tjICsgMV0pO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaChzcmNbYyArIDJdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFkZFZlcnRleExpbmU6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcmMgPSB0aGlzLnZlcnRpY2VzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkudmVydGljZXM7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKHNyY1thICsgMF0pO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAyXSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZGROb3JtYWw6IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcmMgPSB0aGlzLm5vcm1hbHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS5ub3JtYWxzO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDBdKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKHNyY1thICsgMl0pO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaChzcmNbYiArIDBdKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKHNyY1tiICsgMl0pO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaChzcmNbYyArIDBdKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKHNyY1tjICsgMl0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWRkVVY6IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcmMgPSB0aGlzLnV2cztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRzdCA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5LnV2cztcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAwXSk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKHNyY1thICsgMV0pO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaChzcmNbYiArIDBdKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKHNyY1tjICsgMF0pO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaChzcmNbYyArIDFdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFkZFVWTGluZTogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IHRoaXMudXZzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkudXZzO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDBdKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAxXSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZGRGYWNlOiBmdW5jdGlvbiAoYSwgYiwgYywgZCwgdWEsIHViLCB1YywgdWQsIG5hLCBuYiwgbmMsIG5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2TGVuID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpYSA9IHRoaXMucGFyc2VWZXJ0ZXhJbmRleChhLCB2TGVuKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGliID0gdGhpcy5wYXJzZVZlcnRleEluZGV4KGIsIHZMZW4pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWMgPSB0aGlzLnBhcnNlVmVydGV4SW5kZXgoYywgdkxlbik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRWZXJ0ZXgoaWEsIGliLCBpYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZCA9IHRoaXMucGFyc2VWZXJ0ZXhJbmRleChkLCB2TGVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVmVydGV4KGlhLCBpYiwgaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRWZXJ0ZXgoaWIsIGljLCBpZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHVhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dkxlbiA9IHRoaXMudXZzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlhID0gdGhpcy5wYXJzZVVWSW5kZXgodWEsIHV2TGVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGliID0gdGhpcy5wYXJzZVVWSW5kZXgodWIsIHV2TGVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljID0gdGhpcy5wYXJzZVVWSW5kZXgodWMsIHV2TGVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFVWKGlhLCBpYiwgaWMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSB0aGlzLnBhcnNlVVZJbmRleCh1ZCwgdXZMZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVVYoaWEsIGliLCBpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRVVihpYiwgaWMsIGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobmEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9ybWFscyBhcmUgbWFueSB0aW1lcyB0aGUgc2FtZS4gSWYgc28sIHNraXAgZnVuY3Rpb24gY2FsbCBhbmQgcGFyc2VJbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbkxlbiA9IHRoaXMubm9ybWFscy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpYSA9IHRoaXMucGFyc2VOb3JtYWxJbmRleChuYSwgbkxlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpYiA9IG5hID09PSBuYiA/IGlhIDogdGhpcy5wYXJzZU5vcm1hbEluZGV4KG5iLCBuTGVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljID0gbmEgPT09IG5jID8gaWEgOiB0aGlzLnBhcnNlTm9ybWFsSW5kZXgobmMsIG5MZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTm9ybWFsKGlhLCBpYiwgaWMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSB0aGlzLnBhcnNlTm9ybWFsSW5kZXgobmQsIG5MZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTm9ybWFsKGlhLCBpYiwgaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTm9ybWFsKGliLCBpYywgaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZGRMaW5lR2VvbWV0cnk6IGZ1bmN0aW9uICh2ZXJ0aWNlcywgdXZzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0Lmdlb21ldHJ5LnR5cGUgPSAnTGluZSc7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2TGVuID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1dkxlbiA9IHRoaXMudXZzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdmkgPSAwLCBsID0gdmVydGljZXMubGVuZ3RoOyB2aSA8IGw7IHZpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVmVydGV4TGluZSh0aGlzLnBhcnNlVmVydGV4SW5kZXgodmVydGljZXNbdmldLCB2TGVuKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdXZpID0gMCwgbCA9IHV2cy5sZW5ndGg7IHV2aSA8IGw7IHV2aSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFVWTGluZSh0aGlzLnBhcnNlVVZJbmRleCh1dnNbdXZpXSwgdXZMZW4pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdGF0ZS5zdGFydE9iamVjdCgnJywgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9LFxuICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUudGltZSgnT0JKTG9hZGVyJyk7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9jcmVhdGVQYXJzZXJTdGF0ZSgpO1xuICAgICAgICAgICAgaWYgKHRleHQuaW5kZXhPZignXFxyXFxuJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBmYXN0ZXIgdGhhbiBTdHJpbmcuc3BsaXQgd2l0aCByZWdleCB0aGF0IHNwbGl0cyBvbiBib3RoXG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxyXFxuL2csICdcXG4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0ZXh0LmluZGV4T2YoJ1xcXFxcXG4nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBqb2luIGxpbmVzIHNlcGFyYXRlZCBieSBhIGxpbmUgY29udGludWF0aW9uIGNoYXJhY3RlciAoXFwpXG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxcXFxcbi9nLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbGluZXMgPSB0ZXh0LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgICAgIHZhciBsaW5lID0gJycsIGxpbmVGaXJzdENoYXIgPSAnJywgbGluZVNlY29uZENoYXIgPSAnJztcbiAgICAgICAgICAgIHZhciBsaW5lTGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIC8vIEZhc3RlciB0byBqdXN0IHRyaW0gbGVmdCBzaWRlIG9mIHRoZSBsaW5lLiBVc2UgaWYgYXZhaWxhYmxlLlxuICAgICAgICAgICAgdmFyIHRyaW1MZWZ0ID0gKHR5cGVvZiAnJy50cmltTGVmdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpbmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lc1tpXTtcbiAgICAgICAgICAgICAgICBsaW5lID0gdHJpbUxlZnQgPyBsaW5lLnRyaW1MZWZ0KCkgOiBsaW5lLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBsaW5lTGVuZ3RoID0gbGluZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVMZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGxpbmVGaXJzdENoYXIgPSBsaW5lLmNoYXJBdCgwKTtcbiAgICAgICAgICAgICAgICAvLyBAdG9kbyBpbnZva2UgcGFzc2VkIGluIGhhbmRsZXIgaWYgYW55XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVGaXJzdENoYXIgPT09ICcjJylcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVGaXJzdENoYXIgPT09ICd2Jykge1xuICAgICAgICAgICAgICAgICAgICBsaW5lU2Vjb25kQ2hhciA9IGxpbmUuY2hhckF0KDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGluZVNlY29uZENoYXIgPT09ICcgJyAmJiAocmVzdWx0ID0gdGhpcy5yZWdleHAudmVydGV4X3BhdHRlcm4uZXhlYyhsaW5lKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAxICAgICAgMiAgICAgIDNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFtcInYgMS4wIDIuMCAzLjBcIiwgXCIxLjBcIiwgXCIyLjBcIiwgXCIzLjBcIl1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnZlcnRpY2VzLnB1c2gocGFyc2VGbG9hdChyZXN1bHRbMV0pLCBwYXJzZUZsb2F0KHJlc3VsdFsyXSksIHBhcnNlRmxvYXQocmVzdWx0WzNdKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobGluZVNlY29uZENoYXIgPT09ICduJyAmJiAocmVzdWx0ID0gdGhpcy5yZWdleHAubm9ybWFsX3BhdHRlcm4uZXhlYyhsaW5lKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAgMSAgICAgIDIgICAgICAzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBbXCJ2biAxLjAgMi4wIDMuMFwiLCBcIjEuMFwiLCBcIjIuMFwiLCBcIjMuMFwiXVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubm9ybWFscy5wdXNoKHBhcnNlRmxvYXQocmVzdWx0WzFdKSwgcGFyc2VGbG9hdChyZXN1bHRbMl0pLCBwYXJzZUZsb2F0KHJlc3VsdFszXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpbmVTZWNvbmRDaGFyID09PSAndCcgJiYgKHJlc3VsdCA9IHRoaXMucmVnZXhwLnV2X3BhdHRlcm4uZXhlYyhsaW5lKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAxICAgICAgMlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gW1widnQgMC4xIDAuMlwiLCBcIjAuMVwiLCBcIjAuMlwiXVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUudXZzLnB1c2gocGFyc2VGbG9hdChyZXN1bHRbMV0pLCBwYXJzZUZsb2F0KHJlc3VsdFsyXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCB2ZXJ0ZXgvbm9ybWFsL3V2IGxpbmU6ICdcIiArIGxpbmUgKyBcIidcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobGluZUZpcnN0Q2hhciA9PT0gXCJmXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChyZXN1bHQgPSB0aGlzLnJlZ2V4cC5mYWNlX3ZlcnRleF91dl9ub3JtYWwuZXhlYyhsaW5lKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGYgdmVydGV4L3V2L25vcm1hbCB2ZXJ0ZXgvdXYvbm9ybWFsIHZlcnRleC91di9ub3JtYWxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAgICAgICAxICAgIDIgICAgMyAgICA0ICAgIDUgICAgNiAgICA3ICAgIDggICAgOSAgIDEwICAgICAgICAgMTEgICAgICAgICAxMlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gW1wiZiAxLzEvMSAyLzIvMiAzLzMvM1wiLCBcIjFcIiwgXCIxXCIsIFwiMVwiLCBcIjJcIiwgXCIyXCIsIFwiMlwiLCBcIjNcIiwgXCIzXCIsIFwiM1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuYWRkRmFjZShyZXN1bHRbMV0sIHJlc3VsdFs0XSwgcmVzdWx0WzddLCByZXN1bHRbMTBdLCByZXN1bHRbMl0sIHJlc3VsdFs1XSwgcmVzdWx0WzhdLCByZXN1bHRbMTFdLCByZXN1bHRbM10sIHJlc3VsdFs2XSwgcmVzdWx0WzldLCByZXN1bHRbMTJdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgocmVzdWx0ID0gdGhpcy5yZWdleHAuZmFjZV92ZXJ0ZXhfdXYuZXhlYyhsaW5lKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGYgdmVydGV4L3V2IHZlcnRleC91diB2ZXJ0ZXgvdXZcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAxICAgIDIgICAgMyAgICA0ICAgIDUgICAgNiAgIDcgICAgICAgICAgOFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gW1wiZiAxLzEgMi8yIDMvM1wiLCBcIjFcIiwgXCIxXCIsIFwiMlwiLCBcIjJcIiwgXCIzXCIsIFwiM1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmFkZEZhY2UocmVzdWx0WzFdLCByZXN1bHRbM10sIHJlc3VsdFs1XSwgcmVzdWx0WzddLCByZXN1bHRbMl0sIHJlc3VsdFs0XSwgcmVzdWx0WzZdLCByZXN1bHRbOF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChyZXN1bHQgPSB0aGlzLnJlZ2V4cC5mYWNlX3ZlcnRleF9ub3JtYWwuZXhlYyhsaW5lKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGYgdmVydGV4Ly9ub3JtYWwgdmVydGV4Ly9ub3JtYWwgdmVydGV4Ly9ub3JtYWxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAgICAxICAgIDIgICAgMyAgICA0ICAgIDUgICAgNiAgIDcgICAgICAgICAgOFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gW1wiZiAxLy8xIDIvLzIgMy8vM1wiLCBcIjFcIiwgXCIxXCIsIFwiMlwiLCBcIjJcIiwgXCIzXCIsIFwiM1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmFkZEZhY2UocmVzdWx0WzFdLCByZXN1bHRbM10sIHJlc3VsdFs1XSwgcmVzdWx0WzddLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHJlc3VsdFsyXSwgcmVzdWx0WzRdLCByZXN1bHRbNl0sIHJlc3VsdFs4XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHJlc3VsdCA9IHRoaXMucmVnZXhwLmZhY2VfdmVydGV4LmV4ZWMobGluZSkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmIHZlcnRleCB2ZXJ0ZXggdmVydGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwICAgICAgICAgICAgMSAgICAyICAgIDMgICA0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBbXCJmIDEgMiAzXCIsIFwiMVwiLCBcIjJcIiwgXCIzXCIsIHVuZGVmaW5lZF1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmFkZEZhY2UocmVzdWx0WzFdLCByZXN1bHRbMl0sIHJlc3VsdFszXSwgcmVzdWx0WzRdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgZmFjZSBsaW5lOiAnXCIgKyBsaW5lICsgXCInXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpbmVGaXJzdENoYXIgPT09IFwibFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW5lUGFydHMgPSBsaW5lLnN1YnN0cmluZygxKS50cmltKCkuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGluZVZlcnRpY2VzID0gW10sIGxpbmVVVnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmUuaW5kZXhPZihcIi9cIikgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lVmVydGljZXMgPSBsaW5lUGFydHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBsaSA9IDAsIGxsZW4gPSBsaW5lUGFydHMubGVuZ3RoOyBsaSA8IGxsZW47IGxpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSBsaW5lUGFydHNbbGldLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydHNbMF0gIT09IFwiXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVWZXJ0aWNlcy5wdXNoKHBhcnRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydHNbMV0gIT09IFwiXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVVVnMucHVzaChwYXJ0c1sxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuYWRkTGluZUdlb21ldHJ5KGxpbmVWZXJ0aWNlcywgbGluZVVWcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChyZXN1bHQgPSB0aGlzLnJlZ2V4cC5vYmplY3RfcGF0dGVybi5leGVjKGxpbmUpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBvIG9iamVjdF9uYW1lXG4gICAgICAgICAgICAgICAgICAgIC8vIG9yXG4gICAgICAgICAgICAgICAgICAgIC8vIGcgZ3JvdXBfbmFtZVxuICAgICAgICAgICAgICAgICAgICAvLyBXT1JLQVJPVU5EOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yODY5XG4gICAgICAgICAgICAgICAgICAgIC8vIHZhciBuYW1lID0gcmVzdWx0WyAwIF0uc3Vic3RyKCAxICkudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IChcIiBcIiArIHJlc3VsdFswXS5zdWJzdHIoMSkudHJpbSgpKS5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnN0YXJ0T2JqZWN0KG5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnJlZ2V4cC5tYXRlcmlhbF91c2VfcGF0dGVybi50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1hdGVyaWFsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLm9iamVjdC5zdGFydE1hdGVyaWFsKGxpbmUuc3Vic3RyaW5nKDcpLnRyaW0oKSwgc3RhdGUubWF0ZXJpYWxMaWJyYXJpZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnJlZ2V4cC5tYXRlcmlhbF9saWJyYXJ5X3BhdHRlcm4udGVzdChsaW5lKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBtdGwgZmlsZVxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tYXRlcmlhbExpYnJhcmllcy5wdXNoKGxpbmUuc3Vic3RyaW5nKDcpLnRyaW0oKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChyZXN1bHQgPSB0aGlzLnJlZ2V4cC5zbW9vdGhpbmdfcGF0dGVybi5leGVjKGxpbmUpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzbW9vdGggc2hhZGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBAdG9kbyBIYW5kbGUgZmlsZXMgdGhhdCBoYXZlIHZhcnlpbmcgc21vb3RoIHZhbHVlcyBmb3IgYSBzZXQgb2YgZmFjZXMgaW5zaWRlIG9uZSBnZW9tZXRyeSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGRvZXMgbm90IGRlZmluZSBhIHVzZW10bCBmb3IgZWFjaCBmYWNlIHNldC5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgZGV0ZWN0ZWQgYW5kIGEgZHVtbXkgbWF0ZXJpYWwgY3JlYXRlZCAobGF0ZXIgTXVsdGlNYXRlcmlhbCBhbmQgZ2VvbWV0cnkgZ3JvdXBzKS5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyByZXF1aXJlcyBzb21lIGNhcmUgdG8gbm90IGNyZWF0ZSBleHRyYSBtYXRlcmlhbCBvbiBlYWNoIHNtb290aCB2YWx1ZSBmb3IgXCJub3JtYWxcIiBvYmogZmlsZXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZXJlIGV4cGxpY2l0IHVzZW10bCBkZWZpbmVzIGdlb21ldHJ5IGdyb3Vwcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gRXhhbXBsZSBhc3NldDogZXhhbXBsZXMvbW9kZWxzL29iai9jZXJiZXJ1cy9DZXJiZXJ1cy5vYmpcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0WzFdLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5vYmplY3Quc21vb3RoID0gKHZhbHVlID09PSAnMScgfHwgdmFsdWUgPT09ICdvbicpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBzdGF0ZS5vYmplY3QuY3VycmVudE1hdGVyaWFsKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuc21vb3RoID0gc3RhdGUub2JqZWN0LnNtb290aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIG51bGwgdGVybWluYXRlZCBmaWxlcyB3aXRob3V0IGV4Y2VwdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAobGluZSA9PT0gJ1xcMCcpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBsaW5lOiAnXCIgKyBsaW5lICsgXCInXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlLmZpbmFsaXplKCk7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gbmV3IFRIUkVFLkdyb3VwKCk7XG4gICAgICAgICAgICBjb250YWluZXIubWF0ZXJpYWxMaWJyYXJpZXMgPSBbXS5jb25jYXQoc3RhdGUubWF0ZXJpYWxMaWJyYXJpZXMpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdGF0ZS5vYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSBzdGF0ZS5vYmplY3RzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcbiAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWxzID0gb2JqZWN0Lm1hdGVyaWFscztcbiAgICAgICAgICAgICAgICB2YXIgaXNMaW5lID0gKGdlb21ldHJ5LnR5cGUgPT09ICdMaW5lJyk7XG4gICAgICAgICAgICAgICAgLy8gU2tpcCBvL2cgbGluZSBkZWNsYXJhdGlvbnMgdGhhdCBkaWQgbm90IGZvbGxvdyB3aXRoIGFueSBmYWNlc1xuICAgICAgICAgICAgICAgIGlmIChnZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHZhciBidWZmZXJnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgICAgICAgICAgICAgIGJ1ZmZlcmdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoZ2VvbWV0cnkudmVydGljZXMpLCAzKSk7XG4gICAgICAgICAgICAgICAgaWYgKGdlb21ldHJ5Lm5vcm1hbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBidWZmZXJnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ25vcm1hbCcsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShnZW9tZXRyeS5ub3JtYWxzKSwgMykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyZ2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdlb21ldHJ5LnV2cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcmdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgndXYnLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoZ2VvbWV0cnkudXZzKSwgMikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgbWF0ZXJpYWxzXG4gICAgICAgICAgICAgICAgdmFyIGNyZWF0ZWRNYXRlcmlhbHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtaSA9IDAsIG1pTGVuID0gbWF0ZXJpYWxzLmxlbmd0aDsgbWkgPCBtaUxlbjsgbWkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlTWF0ZXJpYWwgPSBtYXRlcmlhbHNbbWldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGVyaWFscyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFscy5jcmVhdGUoc291cmNlTWF0ZXJpYWwubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtdGwgZXRjLiBsb2FkZXJzIHByb2JhYmx5IGNhbid0IGNyZWF0ZSBsaW5lIG1hdGVyaWFscyBjb3JyZWN0bHksIGNvcHkgcHJvcGVydGllcyB0byBhIGxpbmUgbWF0ZXJpYWwuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNMaW5lICYmIG1hdGVyaWFsICYmICEobWF0ZXJpYWwgaW5zdGFuY2VvZiBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWxMaW5lID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxMaW5lLmNvcHkobWF0ZXJpYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gbWF0ZXJpYWxMaW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gKCFpc0xpbmUgPyBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoKSA6IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLm5hbWUgPSBzb3VyY2VNYXRlcmlhbC5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLnNoYWRpbmcgPSBzb3VyY2VNYXRlcmlhbC5zbW9vdGggPyBUSFJFRS5TbW9vdGhTaGFkaW5nIDogVEhSRUUuRmxhdFNoYWRpbmc7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRNYXRlcmlhbHMucHVzaChtYXRlcmlhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBtZXNoXG4gICAgICAgICAgICAgICAgdmFyIG1lc2g7XG4gICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRNYXRlcmlhbHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtaSA9IDAsIG1pTGVuID0gbWF0ZXJpYWxzLmxlbmd0aDsgbWkgPCBtaUxlbjsgbWkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZU1hdGVyaWFsID0gbWF0ZXJpYWxzW21pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcmdlb21ldHJ5LmFkZEdyb3VwKHNvdXJjZU1hdGVyaWFsLmdyb3VwU3RhcnQsIHNvdXJjZU1hdGVyaWFsLmdyb3VwQ291bnQsIG1pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNoID0gKCFpc0xpbmUgPyBuZXcgVEhSRUUuTWVzaChidWZmZXJnZW9tZXRyeSwgY3JlYXRlZE1hdGVyaWFscykgOiBuZXcgVEhSRUUuTGluZVNlZ21lbnRzKGJ1ZmZlcmdlb21ldHJ5LCBjcmVhdGVkTWF0ZXJpYWxzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtZXNoID0gKCFpc0xpbmUgPyBuZXcgVEhSRUUuTWVzaChidWZmZXJnZW9tZXRyeSwgY3JlYXRlZE1hdGVyaWFsc1swXSkgOiBuZXcgVEhSRUUuTGluZVNlZ21lbnRzKGJ1ZmZlcmdlb21ldHJ5LCBjcmVhdGVkTWF0ZXJpYWxzWzBdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1lc2gubmFtZSA9IG9iamVjdC5uYW1lO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hZGQobWVzaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoJ09CSkxvYWRlcicpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIHJldHVybiBUSFJFRS5PQkpMb2FkZXI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lUMEpLVEc5aFpHVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVQwSktURzloWkdWeUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEUxQlFVMHNRMEZCUXl4UFFVRlBMRzlDUVVGdlFpeExRVUZMTzBsQlJYWkRMR3RDUVVGclFqdEpRVVZzUWpzN1QwRkZSenRKUVVWSUxFdEJRVXNzUTBGQlF5eFRRVUZUTEVkQlFVY3NWVUZCVnl4UFFVRlBPMUZCUlc1RExFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NRMEZCUlN4UFFVRlBMRXRCUVVzc1UwRkJVeXhEUVVGRkxFZEJRVWNzVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF6dFJRVVZxUml4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF6dFJRVVYwUWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSE8xbEJRMklzYzBKQlFYTkNPMWxCUTNSQ0xHTkJRV01zUlVGQllTeDVSVUZCZVVVN1dVRkRjRWNzZFVKQlFYVkNPMWxCUTNaQ0xHTkJRV01zUlVGQllTd3dSVUZCTUVVN1dVRkRja2NzYVVKQlFXbENPMWxCUTJwQ0xGVkJRVlVzUlVGQmFVSXNiVVJCUVcxRU8xbEJRemxGTEhsQ1FVRjVRanRaUVVONlFpeFhRVUZYTEVWQlFXZENMR2xFUVVGcFJEdFpRVU0xUlN4clEwRkJhME03V1VGRGJFTXNZMEZCWXl4RlFVRmhMSEZHUVVGeFJqdFpRVU5vU0N4MVJFRkJkVVE3V1VGRGRrUXNjVUpCUVhGQ0xFVkJRVTBzZVVoQlFYbElPMWxCUTNCS0xHbEVRVUZwUkR0WlFVTnFSQ3hyUWtGQmEwSXNSVUZCVXl3MlJrRkJOa1k3V1VGRGVFZ3NLMEpCUVN0Q08xbEJReTlDTEdOQlFXTXNSVUZCWVN4bFFVRmxPMWxCUXpGRExGbEJRVms3V1VGRFdpeHBRa0ZCYVVJc1JVRkJWU3h0UWtGQmJVSTdXVUZET1VNc2QwSkJRWGRDTzFsQlEzaENMSGRDUVVGM1FpeEZRVUZITEZWQlFWVTdXVUZEY2tNc2RVSkJRWFZDTzFsQlEzWkNMRzlDUVVGdlFpeEZRVUZQTEZWQlFWVTdVMEZEY2tNc1EwRkJRenRKUVVWSUxFTkJRVU1zUTBGQlF6dEpRVVZHTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1UwRkJVeXhIUVVGSE8xRkJSVE5DTEZkQlFWY3NSVUZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVenRSUVVVMVFpeEpRVUZKTEVWQlFVVXNWVUZCVnl4SFFVRkhMRVZCUVVVc1RVRkJUU3hGUVVGRkxGVkJRVlVzUlVGQlJTeFBRVUZQTzFsQlJXaEVMRWxCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF6dFpRVVZxUWl4SlFVRkpMRTFCUVUwc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVVXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJSU3hEUVVGRE8xbEJRMjVFTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlJTeERRVUZETzFsQlF6VkNMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVVVzUjBGQlJ5eEZRVUZGTEZWQlFWY3NTVUZCU1R0blFrRkZhRU1zVFVGQlRTeERRVUZGTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVVc1NVRkJTU3hEUVVGRkxFTkJRVVVzUTBGQlF6dFpRVVV2UWl4RFFVRkRMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFOUJRVThzUTBGQlJTeERRVUZETzFGQlJURkNMRU5CUVVNN1VVRkZSQ3hQUVVGUExFVkJRVVVzVlVGQlZ5eExRVUZMTzFsQlJYaENMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUzBGQlN5eERRVUZETzFGQlJXNUNMRU5CUVVNN1VVRkZSQ3haUVVGWkxFVkJRVVVzVlVGQlZ5eFRRVUZUTzFsQlJXcERMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzVTBGQlV5eERRVUZETzFGQlJUVkNMRU5CUVVNN1VVRkZSQ3hyUWtGQmEwSXNSVUZCUnp0WlFVVndRaXhKUVVGSkxFdEJRVXNzUjBGQlJ6dG5Ra0ZEV0N4UFFVRlBMRVZCUVVrc1JVRkJSVHRuUWtGRFlpeE5RVUZOTEVWQlFVc3NSVUZCUlR0blFrRkZZaXhSUVVGUkxFVkJRVWNzUlVGQlJUdG5Ra0ZEWWl4UFFVRlBMRVZCUVVrc1JVRkJSVHRuUWtGRFlpeEhRVUZITEVWQlFWRXNSVUZCUlR0blFrRkZZaXhwUWtGQmFVSXNSVUZCUnl4RlFVRkZPMmRDUVVWMFFpeFhRVUZYTEVWQlFVVXNWVUZCVnl4SlFVRkpMRVZCUVVVc1pVRkJaVHR2UWtGRk5VTXNlVVpCUVhsR08yOUNRVU42Uml3eVJVRkJNa1U3YjBKQlF6TkZMRVZCUVVVc1EwRkJReXhEUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhsUVVGbExFdEJRVXNzUzBGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkZOVVFzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRE8zZENRVU40UWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHVkJRV1VzUjBGQlJ5eERRVUZGTEdWQlFXVXNTMEZCU3l4TFFVRkxMRU5CUVVVc1EwRkJRenQzUWtGRE5VUXNUVUZCVFN4RFFVRkRPMjlDUVVWU0xFTkJRVU03YjBKQlJVUXNTVUZCU1N4blFrRkJaMElzUjBGQlJ5eERRVUZGTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWxCUVVrc1QwRkJUeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdWQlFXVXNTMEZCU3l4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGxRVUZsTEVWQlFVVXNSMEZCUnl4VFFVRlRMRU5CUVVVc1EwRkJRenR2UWtGRmVFa3NSVUZCUlN4RFFVRkRMRU5CUVVVc1NVRkJTU3hEUVVGRExFMUJRVTBzU1VGQlNTeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhMUVVGTExGVkJRVmNzUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUld4RkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkZMRWxCUVVrc1EwRkJSU3hEUVVGRE8yOUNRVVV2UWl4RFFVRkRPMjlDUVVWRUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVYzdkMEpCUTJJc1NVRkJTU3hGUVVGSExFbEJRVWtzU1VGQlNTeEZRVUZGTzNkQ1FVTnFRaXhsUVVGbExFVkJRVWNzUTBGQlJTeGxRVUZsTEV0QlFVc3NTMEZCU3l4RFFVRkZPM2RDUVVVdlF5eFJRVUZSTEVWQlFVYzdORUpCUTFZc1VVRkJVU3hGUVVGSExFVkJRVVU3TkVKQlEySXNUMEZCVHl4RlFVRkpMRVZCUVVVN05FSkJRMklzUjBGQlJ5eEZRVUZSTEVWQlFVVTdlVUpCUTJJN2QwSkJRMFFzVTBGQlV5eEZRVUZITEVWQlFVVTdkMEpCUTJRc1RVRkJUU3hGUVVGSExFbEJRVWs3ZDBKQlJXSXNZVUZCWVN4RlFVRkhMRlZCUVZVc1NVRkJTU3hGUVVGRkxGTkJRVk03TkVKQlJYaERMRWxCUVVrc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVVXNTMEZCU3l4RFFVRkZMRU5CUVVNN05FSkJSWFpETEhsR1FVRjVSanMwUWtGRGVrWXNkVVpCUVhWR096UkNRVU4yUml4RlFVRkZMRU5CUVVNc1EwRkJSU3hSUVVGUkxFbEJRVWtzUTBGQlJTeFJRVUZSTEVOQlFVTXNVMEZCVXl4SlFVRkpMRkZCUVZFc1EwRkJReXhWUVVGVkxFbEJRVWtzUTBGQlF5eERRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMmREUVVWMFJTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJSU3hSUVVGUkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTXNRMEZCUlN4RFFVRkRPelJDUVVVMVF5eERRVUZET3pSQ1FVVkVMRWxCUVVrc1VVRkJVU3hIUVVGSE8yZERRVU5rTEV0QlFVc3NSVUZCVVN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTA3WjBOQlEyeERMRWxCUVVrc1JVRkJVeXhKUVVGSkxFbEJRVWtzUlVGQlJUdG5RMEZEZGtJc1RVRkJUU3hGUVVGUExFTkJRVVVzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUlN4VFFVRlRMRU5CUVVVc1NVRkJTU3hUUVVGVExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSMEZCUnl4VFFVRlRMRU5CUVVVc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVVN1owTkJRelZITEUxQlFVMHNSVUZCVHl4RFFVRkZMRkZCUVZFc1MwRkJTeXhUUVVGVExFZEJRVWNzVVVGQlVTeERRVUZETEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRk8yZERRVU4yUlN4VlFVRlZMRVZCUVVjc1EwRkJSU3hSUVVGUkxFdEJRVXNzVTBGQlV5eEhRVUZITEZGQlFWRXNRMEZCUXl4UlFVRlJMRWRCUVVjc1EwRkJReXhEUVVGRk8yZERRVU12UkN4UlFVRlJMRVZCUVVzc1EwRkJReXhEUVVGRE8yZERRVU5tTEZWQlFWVXNSVUZCUnl4RFFVRkRMRU5CUVVNN1owTkJRMllzVTBGQlV5eEZRVUZKTEV0QlFVczdaME5CUld4Q0xFdEJRVXNzUlVGQlJ5eFZRVUZWTEV0QlFVczdiME5CUTNSQ0xFbEJRVWtzVFVGQlRTeEhRVUZITzNkRFFVTmFMRXRCUVVzc1JVRkJVU3hEUVVGRkxFOUJRVThzUzBGQlN5eExRVUZMTEZGQlFWRXNSMEZCUnl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlJUdDNRMEZETDBRc1NVRkJTU3hGUVVGVExFbEJRVWtzUTBGQlF5eEpRVUZKTzNkRFFVTjBRaXhOUVVGTkxFVkJRVThzU1VGQlNTeERRVUZETEUxQlFVMDdkME5CUTNoQ0xFMUJRVTBzUlVGQlR5eEpRVUZKTEVOQlFVTXNUVUZCVFR0M1EwRkRlRUlzVlVGQlZTeEZRVUZITEVOQlFVTTdkME5CUTJRc1VVRkJVU3hGUVVGTExFTkJRVU1zUTBGQlF6dDNRMEZEWml4VlFVRlZMRVZCUVVjc1EwRkJReXhEUVVGRE8zZERRVU5tTEZOQlFWTXNSVUZCU1N4TFFVRkxPM0ZEUVVOc1FpeERRVUZETzI5RFFVTkdMRTFCUVUwc1EwRkJReXhMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03YjBOQlEzWkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU03WjBOQlEyWXNRMEZCUXpzMlFrRkRSQ3hEUVVGRE96UkNRVVZHTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRkxGRkJRVkVzUTBGQlJTeERRVUZET3pSQ1FVVm9ReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETzNkQ1FVVnFRaXhEUVVGRE8zZENRVVZFTEdWQlFXVXNSVUZCUnpzMFFrRkZha0lzUlVGQlJTeERRVUZETEVOQlFVVXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0blEwRkRha01zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVVc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkZMRU5CUVVNN05FSkJRM0JFTEVOQlFVTTdORUpCUlVRc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF6dDNRa0ZGYkVJc1EwRkJRenQzUWtGRlJDeFRRVUZUTEVWQlFVY3NWVUZCVlN4SFFVRkhPelJDUVVWNFFpeEpRVUZKTEdsQ1FVRnBRaXhIUVVGSExFbEJRVWtzUTBGQlF5eGxRVUZsTEVWQlFVVXNRMEZCUXpzMFFrRkRMME1zUlVGQlJTeERRVUZETEVOQlFVVXNhVUpCUVdsQ0xFbEJRVWtzYVVKQlFXbENMRU5CUVVNc1VVRkJVU3hMUVVGTExFTkJRVU1zUTBGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0blEwRkZPVVFzYVVKQlFXbENMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03WjBOQlF5OUVMR2xDUVVGcFFpeERRVUZETEZWQlFWVXNSMEZCUnl4cFFrRkJhVUlzUTBGQlF5eFJRVUZSTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zVlVGQlZTeERRVUZETzJkRFFVTjZSaXhwUWtGQmFVSXNRMEZCUXl4VFFVRlRMRWRCUVVjc1MwRkJTeXhEUVVGRE96UkNRVVZ5UXl4RFFVRkRPelJDUVVWRUxHZEhRVUZuUnpzMFFrRkRhRWNzUlVGQlJTeERRVUZETEVOQlFVVXNSMEZCUnl4SlFVRkpMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owTkJSWGhETEVkQlFVY3NRMEZCUXl4RFFVRkZMRWxCUVVrc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1JVRkJSU3hGUVVGRkxFbEJRVWtzUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkhMRU5CUVVNN2IwTkJRekZFTEVWQlFVVXNRMEZCUXl4RFFVRkZMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNWVUZCVlN4SlFVRkpMRU5CUVVVc1EwRkJReXhEUVVGRExFTkJRVU03ZDBOQlF6RkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVVc1EwRkJRenR2UTBGRGFFTXNRMEZCUXp0blEwRkRSaXhEUVVGRE96UkNRVVZHTEVOQlFVTTdORUpCUlVRc09FWkJRVGhHT3pSQ1FVTTVSaXhGUVVGRkxFTkJRVU1zUTBGQlJTeEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0blEwRkZNVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNN2IwTkJRMjVDTEVsQlFVa3NSVUZCU3l4RlFVRkZPMjlEUVVOWUxFMUJRVTBzUlVGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFR0cFEwRkRjRUlzUTBGQlF5eERRVUZET3pSQ1FVVktMRU5CUVVNN05FSkJSVVFzVFVGQlRTeERRVUZETEdsQ1FVRnBRaXhEUVVGRE8zZENRVVV4UWl4RFFVRkRPM0ZDUVVORUxFTkJRVU03YjBKQlJVWXNjVU5CUVhGRE8yOUNRVU55UXl4elIwRkJjMGM3YjBKQlEzUkhMSGRHUVVGM1JqdHZRa0ZEZUVZc05rWkJRVFpHTzI5Q1FVTTNSaXc0UmtGQk9FWTdiMEpCUlRsR0xFVkJRVVVzUTBGQlF5eERRVUZGTEdkQ1FVRm5RaXhKUVVGSkxHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1NVRkJTU3hQUVVGUExHZENRVUZuUWl4RFFVRkRMRXRCUVVzc1MwRkJTeXhWUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETzNkQ1FVVnFSeXhKUVVGSkxGRkJRVkVzUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJReXhMUVVGTExFTkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTTdkMEpCUXpORExGRkJRVkVzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRPM2RDUVVNeFFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVVVzVVVGQlVTeERRVUZGTEVOQlFVTTdiMEpCUlhoRExFTkJRVU03YjBKQlJVUXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVVVzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUlN4RFFVRkRPMmRDUVVWc1F5eERRVUZETzJkQ1FVVkVMRkZCUVZFc1JVRkJSenR2UWtGRlZpeEZRVUZGTEVOQlFVTXNRMEZCUlN4SlFVRkpMRU5CUVVNc1RVRkJUU3hKUVVGSkxFOUJRVThzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRXRCUVVzc1ZVRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF6dDNRa0ZGYkVVc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVNN2IwSkJSUzlDTEVOQlFVTTdaMEpCUlVZc1EwRkJRenRuUWtGRlJDeG5Ra0ZCWjBJc1JVRkJSU3hWUVVGWExFdEJRVXNzUlVGQlJTeEhRVUZITzI5Q1FVVjBReXhKUVVGSkxFdEJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVVXNTMEZCU3l4RlFVRkZMRVZCUVVVc1EwRkJSU3hEUVVGRE8yOUNRVU5zUXl4TlFVRk5MRU5CUVVNc1EwRkJSU3hMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEV0QlFVc3NSMEZCUnl4RFFVRkRMRWRCUVVjc1MwRkJTeXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETEVOQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1owSkJSWHBFTEVOQlFVTTdaMEpCUlVRc1owSkJRV2RDTEVWQlFVVXNWVUZCVnl4TFFVRkxMRVZCUVVVc1IwRkJSenR2UWtGRmRFTXNTVUZCU1N4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRkxFdEJRVXNzUlVGQlJTeEZRVUZGTEVOQlFVVXNRMEZCUXp0dlFrRkRiRU1zVFVGQlRTeERRVUZETEVOQlFVVXNTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhMUVVGTExFZEJRVWNzUTBGQlF5eEhRVUZITEV0QlFVc3NSMEZCUnl4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzJkQ1FVVjZSQ3hEUVVGRE8yZENRVVZFTEZsQlFWa3NSVUZCUlN4VlFVRlhMRXRCUVVzc1JVRkJSU3hIUVVGSE8yOUNRVVZzUXl4SlFVRkpMRXRCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVVVzUzBGQlN5eEZRVUZGTEVWQlFVVXNRMEZCUlN4RFFVRkRPMjlDUVVOc1F5eE5RVUZOTEVOQlFVTXNRMEZCUlN4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFdEJRVXNzUjBGQlJ5eERRVUZETEVkQlFVY3NTMEZCU3l4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdaMEpCUlhwRUxFTkJRVU03WjBKQlJVUXNVMEZCVXl4RlFVRkZMRlZCUVZjc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETzI5Q1FVVTFRaXhKUVVGSkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMjlDUVVONFFpeEpRVUZKTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTTdiMEpCUlhoRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVVXNSMEZCUnl4RFFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVVVzUTBGQlJTeERRVUZETzI5Q1FVTjZRaXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZGTEVkQlFVY3NRMEZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRkxFTkJRVVVzUTBGQlF6dHZRa0ZEZWtJc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlJTeEhRVUZITEVOQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJSU3hEUVVGRkxFTkJRVU03YjBKQlEzcENMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVVVzUjBGQlJ5eERRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVVc1EwRkJSU3hEUVVGRE8yOUNRVU42UWl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRkxFZEJRVWNzUTBGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkZMRU5CUVVVc1EwRkJRenR2UWtGRGVrSXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJSU3hIUVVGSExFTkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUlN4RFFVRkZMRU5CUVVNN2IwSkJRM3BDTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVVc1IwRkJSeXhEUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVVXNRMEZCUlN4RFFVRkRPMjlDUVVONlFpeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkZMRWRCUVVjc1EwRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZGTEVOQlFVVXNRMEZCUXp0dlFrRkRla0lzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUlN4SFFVRkhMRU5CUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlJTeERRVUZGTEVOQlFVTTdaMEpCUlRGQ0xFTkJRVU03WjBKQlJVUXNZVUZCWVN4RlFVRkZMRlZCUVZjc1EwRkJRenR2UWtGRk1VSXNTVUZCU1N4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dHZRa0ZEZUVJc1NVRkJTU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRE8yOUNRVVY0UXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRkxFZEJRVWNzUTBGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkZMRU5CUVVVc1EwRkJRenR2UWtGRGVrSXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJSU3hIUVVGSExFTkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUlN4RFFVRkZMRU5CUVVNN2IwSkJRM3BDTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVVc1IwRkJSeXhEUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVVXNRMEZCUlN4RFFVRkRPMmRDUVVVeFFpeERRVUZETzJkQ1FVVkVMRk5CUVZNc1JVRkJSeXhWUVVGWExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXp0dlFrRkZOMElzU1VGQlNTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJRenR2UWtGRGRrSXNTVUZCU1N4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRPMjlDUVVWMlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkZMRWRCUVVjc1EwRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZGTEVOQlFVVXNRMEZCUXp0dlFrRkRla0lzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUlN4SFFVRkhMRU5CUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlJTeERRVUZGTEVOQlFVTTdiMEpCUTNwQ0xFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVVXNSMEZCUnl4RFFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVVVzUTBGQlJTeERRVUZETzI5Q1FVTjZRaXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZGTEVkQlFVY3NRMEZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRkxFTkJRVVVzUTBGQlF6dHZRa0ZEZWtJc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlJTeEhRVUZITEVOQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJSU3hEUVVGRkxFTkJRVU03YjBKQlEzcENMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVVVzUjBGQlJ5eERRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVVc1EwRkJSU3hEUVVGRE8yOUNRVU42UWl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRkxFZEJRVWNzUTBGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkZMRU5CUVVVc1EwRkJRenR2UWtGRGVrSXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJSU3hIUVVGSExFTkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUlN4RFFVRkZMRU5CUVVNN2IwSkJRM3BDTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVVc1IwRkJSeXhEUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVVXNRMEZCUlN4RFFVRkRPMmRDUVVVeFFpeERRVUZETzJkQ1FVVkVMRXRCUVVzc1JVRkJSU3hWUVVGWExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXp0dlFrRkZlRUlzU1VGQlNTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJRenR2UWtGRGJrSXNTVUZCU1N4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRPMjlDUVVWdVF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkZMRWRCUVVjc1EwRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZGTEVOQlFVVXNRMEZCUXp0dlFrRkRla0lzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUlN4SFFVRkhMRU5CUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlJTeERRVUZGTEVOQlFVTTdiMEpCUTNwQ0xFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVVXNSMEZCUnl4RFFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVVVzUTBGQlJTeERRVUZETzI5Q1FVTjZRaXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZGTEVkQlFVY3NRMEZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRkxFTkJRVVVzUTBGQlF6dHZRa0ZEZWtJc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlJTeEhRVUZITEVOQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJSU3hEUVVGRkxFTkJRVU03YjBKQlEzcENMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVVVzUjBGQlJ5eERRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVVc1EwRkJSU3hEUVVGRE8yZENRVVV4UWl4RFFVRkRPMmRDUVVWRUxGTkJRVk1zUlVGQlJTeFZRVUZYTEVOQlFVTTdiMEpCUlhSQ0xFbEJRVWtzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNN2IwSkJRMjVDTEVsQlFVa3NSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXp0dlFrRkZia01zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUlN4SFFVRkhMRU5CUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlJTeERRVUZGTEVOQlFVTTdiMEpCUTNwQ0xFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVVXNSMEZCUnl4RFFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVVVzUTBGQlJTeERRVUZETzJkQ1FVVXhRaXhEUVVGRE8yZENRVVZFTEU5QlFVOHNSVUZCUlN4VlFVRlhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJUdHZRa0ZGTjBRc1NVRkJTU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNN2IwSkJSV2hETEVsQlFVa3NSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUlN4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRkxFTkJRVU03YjBKQlF6RkRMRWxCUVVrc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJSU3hEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZGTEVOQlFVTTdiMEpCUXpGRExFbEJRVWtzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlJTeERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVNN2IwSkJRekZETEVsQlFVa3NSVUZCUlN4RFFVRkRPMjlDUVVWUUxFVkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNTMEZCU3l4VFFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8zZENRVVYyUWl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkZMRU5CUVVNN2IwSkJSVGxDTEVOQlFVTTdiMEpCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03ZDBKQlJWQXNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUlN4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRkxFTkJRVU03ZDBKQlJYUkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRU5CUVVVc1EwRkJRenQzUWtGRE4wSXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUlN4RFFVRkRPMjlDUVVVNVFpeERRVUZETzI5Q1FVVkVMRVZCUVVVc1EwRkJReXhEUVVGRkxFVkJRVVVzUzBGQlN5eFRRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRPM2RDUVVWNFFpeEpRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF6dDNRa0ZGTlVJc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVVXNSVUZCUlN4RlFVRkZMRXRCUVVzc1EwRkJSU3hEUVVGRE8zZENRVU53UXl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlJTeEZRVUZGTEVWQlFVVXNTMEZCU3l4RFFVRkZMRU5CUVVNN2QwSkJRM0JETEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRkxFVkJRVVVzUlVGQlJTeExRVUZMTEVOQlFVVXNRMEZCUXp0M1FrRkZjRU1zUlVGQlJTeERRVUZETEVOQlFVVXNRMEZCUXl4TFFVRkxMRk5CUVZVc1EwRkJReXhEUVVGRExFTkJRVU03TkVKQlJYWkNMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRU5CUVVVc1EwRkJRenQzUWtGRk1VSXNRMEZCUXp0M1FrRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6czBRa0ZGVUN4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlJTeEZRVUZGTEVWQlFVVXNTMEZCU3l4RFFVRkZMRU5CUVVNN05FSkJSWEJETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVOQlFVVXNRMEZCUXpzMFFrRkRla0lzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUTBGQlJTeERRVUZETzNkQ1FVVXhRaXhEUVVGRE8yOUNRVVZHTEVOQlFVTTdiMEpCUlVRc1JVRkJSU3hEUVVGRExFTkJRVVVzUlVGQlJTeExRVUZMTEZOQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJSWGhDTERKRlFVRXlSVHQzUWtGRE0wVXNTVUZCU1N4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTTdkMEpCUXk5Q0xFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVVVzUlVGQlJTeEZRVUZGTEVsQlFVa3NRMEZCUlN4RFFVRkRPM2RDUVVWMlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4TFFVRkxMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRkxFVkJRVVVzUlVGQlJTeEpRVUZKTEVOQlFVVXNRMEZCUXp0M1FrRkRlRVFzUlVGQlJTeEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJSU3hGUVVGRkxFVkJRVVVzU1VGQlNTeERRVUZGTEVOQlFVTTdkMEpCUlhoRUxFVkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNTMEZCU3l4VFFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE96UkNRVVYyUWl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkZMRU5CUVVNN2QwSkJSVGxDTEVOQlFVTTdkMEpCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03TkVKQlJWQXNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUlN4RlFVRkZMRVZCUVVVc1NVRkJTU3hEUVVGRkxFTkJRVU03TkVKQlJYWkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRU5CUVVVc1EwRkJRenMwUWtGRE4wSXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUlN4RFFVRkRPM2RDUVVVNVFpeERRVUZETzI5Q1FVVkdMRU5CUVVNN1owSkJSVVlzUTBGQlF6dG5Ra0ZGUkN4bFFVRmxMRVZCUVVVc1ZVRkJWeXhSUVVGUkxFVkJRVVVzUjBGQlJ6dHZRa0ZGZUVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4SFFVRkhMRTFCUVUwc1EwRkJRenR2UWtGRmJrTXNTVUZCU1N4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTTdiMEpCUTJoRExFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRE8yOUNRVVUxUWl4SFFVRkhMRU5CUVVNc1EwRkJSU3hKUVVGSkxFVkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRkZCUVZFc1EwRkJReXhOUVVGTkxFVkJRVVVzUlVGQlJTeEhRVUZITEVOQlFVTXNSVUZCUlN4RlFVRkZMRVZCUVVjc1JVRkJSeXhEUVVGRE8zZENRVVYyUkN4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJSU3hSUVVGUkxFTkJRVVVzUlVGQlJTeERRVUZGTEVWQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVVc1EwRkJRenR2UWtGRmNrVXNRMEZCUXp0dlFrRkZSQ3hIUVVGSExFTkJRVU1zUTBGQlJTeEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4SFFVRkhMRU5CUVVNc1JVRkJSU3hIUVVGSExFVkJRVWNzUlVGQlJ5eERRVUZETzNkQ1FVVnlSQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZGTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVVc1IwRkJSeXhEUVVGRkxFZEJRVWNzUTBGQlJTeEZRVUZGTEV0QlFVc3NRMEZCUlN4RFFVRkZMRU5CUVVNN2IwSkJSVEZFTEVOQlFVTTdaMEpCUlVZc1EwRkJRenRoUVVWRUxFTkJRVU03V1VGRlJpeExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkZMRVZCUVVVc1JVRkJSU3hMUVVGTExFTkJRVVVzUTBGQlF6dFpRVVV2UWl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRE8xRkJSV1FzUTBGQlF6dFJRVVZFTEV0QlFVc3NSVUZCUlN4VlFVRlhMRWxCUVVrN1dVRkZja0lzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUlN4WFFVRlhMRU5CUVVVc1EwRkJRenRaUVVVMVFpeEpRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVXNRMEZCUXp0WlFVVjBReXhGUVVGRkxFTkJRVU1zUTBGQlJTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkZMRTFCUVUwc1EwRkJSU3hMUVVGTExFTkJRVVVzUTBGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkZkRU1zYTBWQlFXdEZPMmRDUVVOc1JTeEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJSU3hQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZGTEVOQlFVTTdXVUZGZEVNc1EwRkJRenRaUVVWRUxFVkJRVVVzUTBGQlF5eERRVUZGTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVVc1RVRkJUU3hEUVVGRkxFdEJRVXNzUTBGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVWeVF5dzBSRUZCTkVRN1owSkJRelZFTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRkxFOUJRVThzUlVGQlJTeEZRVUZGTEVOQlFVVXNRMEZCUXp0WlFVVndReXhEUVVGRE8xbEJSVVFzU1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlF6dFpRVU12UWl4SlFVRkpMRWxCUVVrc1IwRkJSeXhGUVVGRkxFVkJRVVVzWVVGQllTeEhRVUZITEVWQlFVVXNSVUZCUlN4alFVRmpMRWRCUVVjc1JVRkJSU3hEUVVGRE8xbEJRM1pFTEVsQlFVa3NWVUZCVlN4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOdVFpeEpRVUZKTEUxQlFVMHNSMEZCUnl4RlFVRkZMRU5CUVVNN1dVRkZhRUlzSzBSQlFTdEVPMWxCUXk5RUxFbEJRVWtzVVVGQlVTeEhRVUZITEVOQlFVVXNUMEZCVHl4RlFVRkZMRU5CUVVNc1VVRkJVU3hMUVVGTExGVkJRVlVzUTBGQlJTeERRVUZETzFsQlJYSkVMRWRCUVVjc1EwRkJReXhEUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSeXhGUVVGSExFTkJRVU03WjBKQlJXcEVMRWxCUVVrc1IwRkJSeXhMUVVGTExFTkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTTdaMEpCUld4Q0xFbEJRVWtzUjBGQlJ5eFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0blFrRkZhRVFzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNN1owSkJSWHBDTEVWQlFVVXNRMEZCUXl4RFFVRkZMRlZCUVZVc1MwRkJTeXhEUVVGRkxFTkJRVU03YjBKQlFVTXNVVUZCVVN4RFFVRkRPMmRDUVVWcVF5eGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJSU3hEUVVGRExFTkJRVVVzUTBGQlF6dG5Ra0ZGYWtNc2QwTkJRWGRETzJkQ1FVTjRReXhGUVVGRkxFTkJRVU1zUTBGQlJTeGhRVUZoTEV0QlFVc3NSMEZCU1N4RFFVRkRPMjlDUVVGRExGRkJRVkVzUTBGQlF6dG5Ra0ZGZEVNc1JVRkJSU3hEUVVGRExFTkJRVVVzWVVGQllTeExRVUZMTEVkQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJSVGRDTEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZETzI5Q1FVVnNReXhGUVVGRkxFTkJRVU1zUTBGQlJTeGpRVUZqTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVVc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlJTeExRVUZMTEVsQlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJSUzlHTEhGRFFVRnhRenQzUWtGRGNrTXNlVU5CUVhsRE8zZENRVVY2UXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGRGJFSXNWVUZCVlN4RFFVRkZMRTFCUVUwc1EwRkJSU3hEUVVGRExFTkJRVVVzUTBGQlJTeEZRVU42UWl4VlFVRlZMRU5CUVVVc1RVRkJUU3hEUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZGTEVWQlEzcENMRlZCUVZVc1EwRkJSU3hOUVVGTkxFTkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVVXNRMEZEZWtJc1EwRkJRenR2UWtGRlNDeERRVUZETzI5Q1FVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlJTeGpRVUZqTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVVc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlJTeExRVUZMTEVsQlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJSWFJITEhORFFVRnpRenQzUWtGRGRFTXNNRU5CUVRCRE8zZENRVVV4UXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGRGFrSXNWVUZCVlN4RFFVRkZMRTFCUVUwc1EwRkJSU3hEUVVGRExFTkJRVVVzUTBGQlJTeEZRVU42UWl4VlFVRlZMRU5CUVVVc1RVRkJUU3hEUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZGTEVWQlEzcENMRlZCUVZVc1EwRkJSU3hOUVVGTkxFTkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVVXNRMEZEZWtJc1EwRkJRenR2UWtGRlNDeERRVUZETzI5Q1FVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlJTeGpRVUZqTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVVc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlJTeExRVUZMTEVsQlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJSV3hITERKQ1FVRXlRanQzUWtGRE0wSXNLMEpCUVN0Q08zZENRVVV2UWl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGRFlpeFZRVUZWTEVOQlFVVXNUVUZCVFN4RFFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRkxFVkJRM3BDTEZWQlFWVXNRMEZCUlN4TlFVRk5MRU5CUVVVc1EwRkJReXhEUVVGRkxFTkJRVVVzUTBGRGVrSXNRMEZCUXp0dlFrRkZTQ3hEUVVGRE8yOUNRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPM2RDUVVWUUxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVVXNjVU5CUVhGRExFZEJRVWNzU1VGQlNTeEhRVUZKTEVkQlFVY3NRMEZCUlN4RFFVRkRPMjlDUVVWNFJTeERRVUZETzJkQ1FVVkdMRU5CUVVNN1owSkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkZMR0ZCUVdFc1MwRkJTeXhIUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVVndReXhGUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZGTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRWxCUVVrc1EwRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlJTeExRVUZMTEVsQlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJSVFZGTEhWRVFVRjFSRHQzUWtGRGRrUXNaMGRCUVdkSE8zZENRVU5vUnl4M1IwRkJkMGM3ZDBKQlJYaEhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRMW9zVFVGQlRTeERRVUZGTEVOQlFVTXNRMEZCUlN4RlFVRkZMRTFCUVUwc1EwRkJSU3hEUVVGRExFTkJRVVVzUlVGQlJTeE5RVUZOTEVOQlFVVXNRMEZCUXl4RFFVRkZMRVZCUVVVc1RVRkJUU3hEUVVGRkxFVkJRVVVzUTBGQlJTeEZRVU51UkN4TlFVRk5MRU5CUVVVc1EwRkJReXhEUVVGRkxFVkJRVVVzVFVGQlRTeERRVUZGTEVOQlFVTXNRMEZCUlN4RlFVRkZMRTFCUVUwc1EwRkJSU3hEUVVGRExFTkJRVVVzUlVGQlJTeE5RVUZOTEVOQlFVVXNSVUZCUlN4RFFVRkZMRVZCUTI1RUxFMUJRVTBzUTBGQlJTeERRVUZETEVOQlFVVXNSVUZCUlN4TlFVRk5MRU5CUVVVc1EwRkJReXhEUVVGRkxFVkJRVVVzVFVGQlRTeERRVUZGTEVOQlFVTXNRMEZCUlN4RlFVRkZMRTFCUVUwc1EwRkJSU3hGUVVGRkxFTkJRVVVzUTBGRGJrUXNRMEZCUXp0dlFrRkZTQ3hEUVVGRE8yOUNRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVVVzU1VGQlNTeERRVUZGTEVOQlFVVXNTMEZCU3l4SlFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8zZENRVVUxUlN4clEwRkJhME03ZDBKQlEyeERMQ3RFUVVFclJEdDNRa0ZETDBRc2QwVkJRWGRGTzNkQ1FVVjRSU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVU5hTEUxQlFVMHNRMEZCUlN4RFFVRkRMRU5CUVVVc1JVRkJSU3hOUVVGTkxFTkJRVVVzUTBGQlF5eERRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkZMRU5CUVVNc1EwRkJSU3hGUVVGRkxFMUJRVTBzUTBGQlJTeERRVUZETEVOQlFVVXNSVUZEYkVRc1RVRkJUU3hEUVVGRkxFTkJRVU1zUTBGQlJTeEZRVUZGTEUxQlFVMHNRMEZCUlN4RFFVRkRMRU5CUVVVc1JVRkJSU3hOUVVGTkxFTkJRVVVzUTBGQlF5eERRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkZMRU5CUVVNc1EwRkJSU3hEUVVOc1JDeERRVUZETzI5Q1FVVklMRU5CUVVNN2IwSkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkZMRU5CUVVVc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zU1VGQlNTeERRVUZGTEVsQlFVa3NRMEZCUlN4RFFVRkZMRXRCUVVzc1NVRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dDNRa0ZGYUVZc2FVUkJRV2xFTzNkQ1FVTnFSQ3hyUlVGQmEwVTdkMEpCUTJ4RkxESkZRVUV5UlR0M1FrRkZNMFVzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZEV2l4TlFVRk5MRU5CUVVVc1EwRkJReXhEUVVGRkxFVkJRVVVzVFVGQlRTeERRVUZGTEVOQlFVTXNRMEZCUlN4RlFVRkZMRTFCUVUwc1EwRkJSU3hEUVVGRExFTkJRVVVzUlVGQlJTeE5RVUZOTEVOQlFVVXNRMEZCUXl4RFFVRkZMRVZCUTJ4RUxGTkJRVk1zUlVGQlJTeFRRVUZUTEVWQlFVVXNVMEZCVXl4RlFVRkZMRk5CUVZNc1JVRkRNVU1zVFVGQlRTeERRVUZGTEVOQlFVTXNRMEZCUlN4RlFVRkZMRTFCUVUwc1EwRkJSU3hEUVVGRExFTkJRVVVzUlVGQlJTeE5RVUZOTEVOQlFVVXNRMEZCUXl4RFFVRkZMRVZCUVVVc1RVRkJUU3hEUVVGRkxFTkJRVU1zUTBGQlJTeERRVU5zUkN4RFFVRkRPMjlDUVVWSUxFTkJRVU03YjBKQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRkxFTkJRVVVzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlJTeEpRVUZKTEVOQlFVVXNRMEZCUlN4TFFVRkxMRWxCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03ZDBKQlJYcEZMSGxDUVVGNVFqdDNRa0ZEZWtJc0swSkJRU3RDTzNkQ1FVTXZRaXgzUTBGQmQwTTdkMEpCUlhoRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlExb3NUVUZCVFN4RFFVRkZMRU5CUVVNc1EwRkJSU3hGUVVGRkxFMUJRVTBzUTBGQlJTeERRVUZETEVOQlFVVXNSVUZCUlN4TlFVRk5MRU5CUVVVc1EwRkJReXhEUVVGRkxFVkJRVVVzVFVGQlRTeERRVUZGTEVOQlFVTXNRMEZCUlN4RFFVTnNSQ3hEUVVGRE8yOUNRVVZJTEVOQlFVTTdiMEpCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03ZDBKQlJWQXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJSU3g1UWtGQmVVSXNSMEZCUnl4SlFVRkpMRWRCUVVrc1IwRkJSeXhEUVVGRkxFTkJRVU03YjBKQlJUVkVMRU5CUVVNN1owSkJSVVlzUTBGQlF6dG5Ra0ZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVVVzWVVGQllTeExRVUZMTEVkQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJSWEJETEVsQlFVa3NVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRkxFZEJRVWNzUTBGQlJTeERRVUZETzI5Q1FVTjRSQ3hKUVVGSkxGbEJRVmtzUjBGQlJ5eEZRVUZGTEVWQlFVVXNUMEZCVHl4SFFVRkhMRVZCUVVVc1EwRkJRenR2UWtGRmNFTXNSVUZCUlN4RFFVRkRMRU5CUVVVc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlJTeEhRVUZITEVOQlFVVXNTMEZCU3l4RFFVRkZMRU5CUVVVc1EwRkJReXhEUVVGRExFTkJRVU03ZDBKQlJXNURMRmxCUVZrc1IwRkJSeXhUUVVGVExFTkJRVU03YjBKQlJURkNMRU5CUVVNN2IwSkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdkMEpCUlZBc1IwRkJSeXhEUVVGRExFTkJRVVVzU1VGQlNTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RlFVRkZMRWxCUVVrc1IwRkJSeXhUUVVGVExFTkJRVU1zVFVGQlRTeEZRVUZGTEVWQlFVVXNSMEZCUnl4SlFVRkpMRVZCUVVVc1JVRkJSU3hGUVVGSExFVkJRVWNzUTBGQlF6czBRa0ZGT1VRc1NVRkJTU3hMUVVGTExFZEJRVWNzVTBGQlV5eERRVUZGTEVWQlFVVXNRMEZCUlN4RFFVRkRMRXRCUVVzc1EwRkJSU3hIUVVGSExFTkJRVVVzUTBGQlF6czBRa0ZGZWtNc1JVRkJSU3hEUVVGRExFTkJRVVVzUzBGQlN5eERRVUZGTEVOQlFVTXNRMEZCUlN4TFFVRkxMRVZCUVVjc1EwRkJRenRuUTBGQlF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkZMRXRCUVVzc1EwRkJSU3hEUVVGRExFTkJRVVVzUTBGQlJTeERRVUZET3pSQ1FVTjZSQ3hGUVVGRkxFTkJRVU1zUTBGQlJTeExRVUZMTEVOQlFVVXNRMEZCUXl4RFFVRkZMRXRCUVVzc1JVRkJSeXhEUVVGRE8yZERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVVc1MwRkJTeXhEUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZGTEVOQlFVTTdkMEpCUlhKRUxFTkJRVU03YjBKQlJVWXNRMEZCUXp0dlFrRkRSQ3hMUVVGTExFTkJRVU1zWlVGQlpTeERRVUZGTEZsQlFWa3NSVUZCUlN4UFFVRlBMRU5CUVVVc1EwRkJRenRuUWtGRmFFUXNRMEZCUXp0blFrRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVVXNRMEZCUlN4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkZMRWxCUVVrc1EwRkJSU3hEUVVGRkxFdEJRVXNzU1VGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkZOVVVzWjBKQlFXZENPMjlDUVVOb1FpeExRVUZMTzI5Q1FVTk1MR1ZCUVdVN2IwSkJSV1lzYlVWQlFXMUZPMjlDUVVOdVJTdzJRMEZCTmtNN2IwSkJRemRETEVsQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVVc1IwRkJSeXhIUVVGSExFMUJRVTBzUTBGQlJTeERRVUZETEVOQlFVVXNRMEZCUXl4TlFVRk5MRU5CUVVVc1EwRkJReXhEUVVGRkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVVXNRMEZCUXl4TlFVRk5MRU5CUVVVc1EwRkJReXhEUVVGRkxFTkJRVU03YjBKQlJXaEZMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVVVzU1VGQlNTeERRVUZGTEVOQlFVTTdaMEpCUlROQ0xFTkJRVU03WjBKQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zU1VGQlNTeERRVUZGTEVsQlFVa3NRMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRk5VUXNWMEZCVnp0dlFrRkZXQ3hMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEdGQlFXRXNRMEZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRkZMRXRCUVVzc1EwRkJReXhwUWtGQmFVSXNRMEZCUlN4RFFVRkRPMmRDUVVWdVJpeERRVUZETzJkQ1FVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlJTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMSGRDUVVGM1FpeERRVUZETEVsQlFVa3NRMEZCUlN4SlFVRkpMRU5CUVVjc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlJXaEZMRmRCUVZjN2IwSkJSVmdzUzBGQlN5eERRVUZETEdsQ1FVRnBRaXhEUVVGRExFbEJRVWtzUTBGQlJTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZGTEVOQlFVTTdaMEpCUlRWRUxFTkJRVU03WjBKQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRkxFTkJRVVVzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNTVUZCU1N4RFFVRkZMRWxCUVVrc1EwRkJSU3hEUVVGRkxFdEJRVXNzU1VGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkZMMFVzYVVKQlFXbENPMjlDUVVWcVFpdzJSa0ZCTmtZN2IwSkJRemRHTEd0RVFVRnJSRHR2UWtGRGJFUXNhMGRCUVd0SE8yOUNRVU5zUnl4dlIwRkJiMGM3YjBKQlEzQkhMR2xFUVVGcFJEdHZRa0ZEYWtRc01rUkJRVEpFTzI5Q1FVVXpSQ3hKUVVGSkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVVXNRMEZCUXl4RFFVRkZMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTTdiMEpCUXpkRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVVc1MwRkJTeXhMUVVGTExFZEJRVWNzU1VGQlNTeExRVUZMTEV0QlFVc3NTVUZCU1N4RFFVRkZMRU5CUVVNN2IwSkJSVEZFTEVsQlFVa3NVVUZCVVN4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVTTdiMEpCUXpsRExFVkJRVVVzUTBGQlF5eERRVUZGTEZGQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJSV2hDTEZGQlFWRXNRMEZCUXl4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTTdiMEpCUlhaRExFTkJRVU03WjBKQlJVWXNRMEZCUXp0blFrRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dHZRa0ZGVUN4cFJFRkJhVVE3YjBKQlEycEVMRVZCUVVVc1EwRkJReXhEUVVGRkxFbEJRVWtzUzBGQlN5eEpRVUZMTEVOQlFVTTdkMEpCUVVNc1VVRkJVU3hEUVVGRE8yOUNRVVU1UWl4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRkxHOUNRVUZ2UWl4SFFVRkhMRWxCUVVrc1IwRkJTU3hIUVVGSExFTkJRVVVzUTBGQlF6dG5Ra0ZGZGtRc1EwRkJRenRaUVVWR0xFTkJRVU03V1VGRlJDeExRVUZMTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1dVRkZha0lzU1VGQlNTeFRRVUZUTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03V1VGRGJFTXNVMEZCVXl4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEVWQlFVVXNRMEZCUXl4TlFVRk5MRU5CUVVVc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RFFVRkZMRU5CUVVNN1dVRkZia1VzUjBGQlJ5eERRVUZETEVOQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUnl4RlFVRkhMRU5CUVVNN1owSkJSWHBFTEVsQlFVa3NUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTTdaMEpCUTJoRExFbEJRVWtzVVVGQlVTeEhRVUZITEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNN1owSkJReTlDTEVsQlFVa3NVMEZCVXl4SFFVRkhMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU03WjBKQlEycERMRWxCUVVrc1RVRkJUU3hIUVVGSExFTkJRVVVzVVVGQlVTeERRVUZETEVsQlFVa3NTMEZCU3l4TlFVRk5MRU5CUVVVc1EwRkJRenRuUWtGRk1VTXNaMFZCUVdkRk8yZENRVU5vUlN4RlFVRkZMRU5CUVVNc1EwRkJSU3hSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkZMRU5CUVVNN2IwSkJRVU1zVVVGQlVTeERRVUZETzJkQ1FVVXZReXhKUVVGSkxHTkJRV01zUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJRenRuUWtGRmFFUXNZMEZCWXl4RFFVRkRMRmxCUVZrc1EwRkJSU3hWUVVGVkxFVkJRVVVzU1VGQlNTeExRVUZMTEVOQlFVTXNaVUZCWlN4RFFVRkZMRWxCUVVrc1dVRkJXU3hEUVVGRkxGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVVc1EwRkJSU3hEUVVGRE8yZENRVVZxU0N4RlFVRkZMRU5CUVVNc1EwRkJSU3hSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVVZ1UXl4alFVRmpMRU5CUVVNc1dVRkJXU3hEUVVGRkxGRkJRVkVzUlVGQlJTeEpRVUZKTEV0QlFVc3NRMEZCUXl4bFFVRmxMRU5CUVVVc1NVRkJTU3haUVVGWkxFTkJRVVVzVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUlN4RlFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRkxFTkJRVU03WjBKQlJTOUhMRU5CUVVNN1owSkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdiMEpCUlZBc1kwRkJZeXhEUVVGRExHOUNRVUZ2UWl4RlFVRkZMRU5CUVVNN1owSkJSWFpETEVOQlFVTTdaMEpCUlVRc1JVRkJSU3hEUVVGRExFTkJRVVVzVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZGTDBJc1kwRkJZeXhEUVVGRExGbEJRVmtzUTBGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4TFFVRkxMRU5CUVVNc1pVRkJaU3hEUVVGRkxFbEJRVWtzV1VGQldTeERRVUZGTEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVVc1JVRkJSU3hEUVVGRExFTkJRVVVzUTBGQlJTeERRVUZETzJkQ1FVVjJSeXhEUVVGRE8yZENRVVZFTEcxQ1FVRnRRanRuUWtGRmJrSXNTVUZCU1N4blFrRkJaMElzUjBGQlJ5eEZRVUZGTEVOQlFVTTdaMEpCUlRGQ0xFZEJRVWNzUTBGQlF5eERRVUZGTEVsQlFVa3NSVUZCUlN4SFFVRkhMRU5CUVVNc1JVRkJSU3hMUVVGTExFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMHNSVUZCUlN4RlFVRkZMRWRCUVVjc1MwRkJTeXhGUVVGSExFVkJRVVVzUlVGQlJTeEZRVUZITEVOQlFVTTdiMEpCUldoRkxFbEJRVWtzWTBGQll5eEhRVUZITEZOQlFWTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenR2UWtGRGJrTXNTVUZCU1N4UlFVRlJMRWRCUVVjc1UwRkJVeXhEUVVGRE8yOUNRVVY2UWl4RlFVRkZMRU5CUVVNc1EwRkJSU3hKUVVGSkxFTkJRVU1zVTBGQlV5eExRVUZMTEVsQlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJSUzlDTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlJTeGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkZMRU5CUVVNN2QwSkJSWGhFTEhWSFFVRjFSenQzUWtGRGRrY3NSVUZCUlN4RFFVRkRMRU5CUVVVc1RVRkJUU3hKUVVGSkxGRkJRVkVzU1VGQlNTeERRVUZGTEVOQlFVVXNVVUZCVVN4WlFVRlpMRXRCUVVzc1EwRkJReXhwUWtGQmFVSXNRMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenMwUWtGRkwwVXNTVUZCU1N4WlFVRlpMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zYVVKQlFXbENMRVZCUVVVc1EwRkJRenMwUWtGRGFrUXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJSU3hSUVVGUkxFTkJRVVVzUTBGQlF6czBRa0ZET1VJc1VVRkJVU3hIUVVGSExGbEJRVmtzUTBGQlF6dDNRa0ZGZWtJc1EwRkJRenR2UWtGRlJpeERRVUZETzI5Q1FVVkVMRVZCUVVVc1EwRkJReXhEUVVGRkxFTkJRVVVzVVVGQlV5eERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkZiRUlzVVVGQlVTeEhRVUZITEVOQlFVVXNRMEZCUlN4TlFVRk5MRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zYVVKQlFXbENMRVZCUVVVc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hEUVVGRkxFTkJRVU03ZDBKQlEzaEdMRkZCUVZFc1EwRkJReXhKUVVGSkxFZEJRVWNzWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXp0dlFrRkZja01zUTBGQlF6dHZRa0ZGUkN4UlFVRlJMRU5CUVVNc1QwRkJUeXhIUVVGSExHTkJRV01zUTBGQlF5eE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRMR0ZCUVdFc1IwRkJSeXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETzI5Q1FVVnVSaXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03WjBKQlJXcERMRU5CUVVNN1owSkJSVVFzWTBGQll6dG5Ra0ZGWkN4SlFVRkpMRWxCUVVrc1EwRkJRenRuUWtGRlZDeEZRVUZGTEVOQlFVTXNRMEZCUlN4blFrRkJaMElzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRmJrTXNSMEZCUnl4RFFVRkRMRU5CUVVVc1NVRkJTU3hGUVVGRkxFZEJRVWNzUTBGQlF5eEZRVUZGTEV0QlFVc3NSMEZCUnl4VFFVRlRMRU5CUVVNc1RVRkJUU3hGUVVGRkxFVkJRVVVzUjBGQlJ5eExRVUZMTEVWQlFVY3NSVUZCUlN4RlFVRkZMRVZCUVVjc1EwRkJRenQzUWtGRmFFVXNTVUZCU1N4alFVRmpMRWRCUVVjc1UwRkJVeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzNkQ1FVTnVReXhqUVVGakxFTkJRVU1zVVVGQlVTeERRVUZGTEdOQlFXTXNRMEZCUXl4VlFVRlZMRVZCUVVVc1kwRkJZeXhEUVVGRExGVkJRVlVzUlVGQlJTeEZRVUZGTEVOQlFVVXNRMEZCUXp0dlFrRkZja1lzUTBGQlF6dHZRa0ZGUkN4SlFVRkpMRWRCUVVjc1EwRkJSU3hEUVVGRkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVVc1kwRkJZeXhGUVVGRkxHZENRVUZuUWl4RFFVRkZMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zV1VGQldTeERRVUZGTEdOQlFXTXNSVUZCUlN4blFrRkJaMElzUTBGQlJTeERRVUZGTEVOQlFVTTdaMEpCUlhaSkxFTkJRVU03WjBKQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJSVkFzU1VGQlNTeEhRVUZITEVOQlFVVXNRMEZCUlN4TlFVRk5MRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZGTEdOQlFXTXNSVUZCUlN4blFrRkJaMElzUTBGQlJTeERRVUZETEVOQlFVVXNRMEZCUlN4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlJTeGpRVUZqTEVWQlFVVXNaMEpCUVdkQ0xFTkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVVXNRMEZCUlN4RFFVRkRPMmRDUVVOcVNpeERRVUZETzJkQ1FVVkVMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXp0blFrRkZlRUlzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUlN4SlFVRkpMRU5CUVVVc1EwRkJRenRaUVVWMlFpeERRVUZETzFsQlJVUXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJSU3hYUVVGWExFTkJRVVVzUTBGQlF6dFpRVVV2UWl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRE8xRkJSV3hDTEVOQlFVTTdTMEZGUkN4RFFVRkRPMGxCUlVZc2JVSkJRVzFDTzBsQlJXWXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU03UVVGRE0wSXNRMEZCUXlKOVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vd3d3L3ZlbmRvci90aHJlZS9sb2FkZXJzL09CSkxvYWRlci5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==